C4io#2688: 256 byte HDD, 20 ticks delay.
Dudeman#6566: RAM
Dudeman#6566: 256 byte ram, can be expanded with some effort though it's large enough to cause game problems when moving
Dudeman#6566: Memory Cell
DanielGJ44#4557: Threads, please!
circuitgamer77#0377: That's my understanding - I've been designing my more recent ALUs to use subtraction and output flags from that as comparison.  I know a lot of older computers used that, but I don't know about the more recent ones.  I'm not anywhere near an expert on this :)
Dudeman#6566: though comparison is merged with subtraction and would probably be handled with control logic <[newline]> maybe that's how it usually works idk
Dudeman#6566: messy alu with add/sub/compare
TheGrandMinority#1499: Makes sense, because the rule only relied on the cells in a diagonal fashion, making every other tile irrelevant
totobono4#5551: In fact this is the states of a 2D game of life with the following rule: <[newline]> If a cell have one neighbour -> alive <[newline]> else -> dead <[newline]> https://en.wikipedia.org/wiki/Rule_90#Sierpi%C5%84ski_triangle
elblorenz32#4966: beautiful! look at this museum of microcode
Biggycheese69420#4947: 8 bit Multiplier MK2
Fabada El Conquistador#4885: CCA adder in LW
Fabada El Conquistador#4885: CCA adder in LW
DanielGJ44#4557: (reminder for our newer members üôÇ)
PseudoGoose#2841: Let's move this out of slow mode into <#401255675264761868>
PseudoGoose#2841: Yeah, signal strength and comparators are a core part of why CCA works, so I don't think its possible in logic world
Fabada El Conquistador#4885: It was invented by Majic but it can add any amount of bits in 5 ticks
PseudoGoose#2841: I don't think the concept of carry cancel translates directly to Logic World. We do have an instant carry that's similar to the piston-based instant carry in Minecraft, but with relays
elblorenz32#4966: what does it do?
Fabada El Conquistador#4885: Has anyone done a Carry-Cancel adder?
elblorenz32#4966: What a neat little fireplace
Justin#2534: Wow! ü§Ø
gnog#2259: https://youtu.be/1LdUPyffknQ
Justin#2534: More Ram
Justin#2534: Same module with better design
circuitgamer77#0377: This is a small one, but I made a version of the 1 tick comparison (for a decoder) that is programmable by control lines, so I can make this design figure out it's own addresses as well.  (input lines are the bottom switches, control lines are the top switches)
Jimmy#8080: Caden's Big Clock
commander of the pandas#1576: Clock I started hours ago is still accurate to the second. Real time on the left screen. (This is a 1 hz clock hooked up to the carry on a looping adder so it always increments by 1 and that is equal to the number of seconds since 00:00:00. And then the number of seconds in binary gets converted to a display using a complicated and fancy double dabble setup that switches between base ten and base six double dabble columns. So basically a Unix to display converter... Now I just need it to support days months and years so I can set it to actual Unix (number of seconds since January 1 1970 at 00:00:00))
SilentSoulsSr#1716: Nice can i has )
zandy#3110: BCD to Binary
BZ LQ#5423: 256 Bytes of RAM. I tried making it as dense as possible while also keeping it relatively simple and expandable.
SenseiPete#8797: one ugly ass 16bit Binary to BCD Encoder
Erikbot#6368: divider
binaryclock03#5762: Dividers are hard.
circuitgamer77#0377: Ok, it's failing the simple cases.  1/1 returns 01111111...
circuitgamer77#0377: Divider, but actually efficient this time.  This is my first attempt at making a proper divider - previously I made one that subtracted iteratively until the result was 0 or less, but that one takes an absurdly long time for higher numbers.  This one is doing the right thing - bitshifting.  Much, much faster!  Can someone give me some good test cases to error-check it?  I've done a bunch of tests, and all of them seem to work so far, but I don't know what the best kinds of problems are to test it.  I've done divide by 3 and a bunch of edge cases (literal "edge" cases - where some of the data is in the highest or lowest bit) so far.  (8 bits per input, and 8 bits output.  I might add a remainder system as well in a bit) <[newline]>  <[newline]> Almost forgot to clarify - the yellow boards are just a bit label for the inputs and outputs, all connected to a single base.  Designed to fit perfectly around the circuit so I don't forget which label goes where.
Flampt#3906: short song cover in Logic World by this thing I made
Flampt#3906: pretty compact 8 bit register
Flampt#3906: pretty bad 8 bit ALU (can only do addition and substraction)
elblorenz32#4966: 16 bit of modular ram (up to 65.535 Memory cells --> 16 Kbyte) <[newline]> edit: not able to flush at the moment (but there would be space to integrate this easily)
gnog#2259: 
Jimmy#8080: Justin's big Ram üò©
zandy#3110: I love the way the form factor of components tells a story about how each builder thinks differently during their design process
Justin#2534: My biggest Ram so far. 5 bit address, 8 bit address space, 32 bytes
GUMMYCAT#6001: Bits are stored in a line of buffers, looping on itself
binaryclock03#5762: What's delay line ram
SilentSoulsSr#1716: It is expensive in materials
zandy#3110: This looks so nice and neat
SilentSoulsSr#1716: 256 Bytes of RAM. Not yet expandable, but working on that.
Flampt#3906: 32 byte ram without address decoder
GUMMYCAT#6001: world fixed, gonna implemet a cache, so it can be used. increased width to 32 bits
Broyojo#2667: very nice
GUMMYCAT#6001: expanded to 256 bytes. seems like the world file didnt like this because my game will crash a few seconds after loading.
GUMMYCAT#6001: 32 bytes of delay line ram
Biggycheese69420#4947: 8 bit Multiplier
gnog#2259: character renderer for x,y display!
LOOPS#1372: Bobby Runner 2: Jump over rolling boulders and duck fireballs. Some fireballs will randomly hit the ground and turn into boulders just before they hit you
PythonGermany#0711: 16Byte extendable memory
blane1257#8086: pong
zandy#3110: 16x16screen
GUMMYCAT#6001: hooked up the new screen, and reprogrammed pong to make use of the colours.  also add a random number register and fixed a bug in my cpu breaking all jumps past address 64
GUMMYCAT#6001: 16x16, expandable, double buffered 4 colour screen
Jimmy#8080: PONG
GUMMYCAT#6001: definitely worth staying up till 4 am for this.  pong, all ran on my cpu. program is about 64 instructions long.
GUMMYCAT#6001: bouncy
GUMMYCAT#6001: made a compiler for assembly and a program to press the correct keys to program instruction memory.
Chime#3134: 512 bytes of ram, showing my bus interconnects working.  And a cute panel.  üêô
Cero#0516: Made it smaller, once again modular, but also stackable on all axis. Working on a 64 bit adapter to allow it to properly line up with inputs however.
Justin#2534: Small one input clock design
Nik#1011: tileable adder
LOOPS#1372: 2 wide tileable adder
Flampt#3906: tiny adder
Cero#0516: Tiny adder
Lim√≥n#7879: TRANS MODE
Justin#2534: https://youtu.be/3sgPXczCSFc
BitorBit#6268: question
Cero#0516: Saved a ton of space in the back and middle of the register, while also redesigning the Chub/Regular port adapter to be unified. (can't wait to design a register bus or whatever that's called)
Cero#0516: One chonky 64 bit register completely modular
LOOPS#1372: Collatz
Erikbot#6368: integer square root
GUMMYCAT#6001: square root integer approximation
Jimmy#8080: RAM with cache
GUMMYCAT#6001: multiplier integrated, collatz sequence starting at 27
Zoey#7836: 256B of RAM with 8B L1 cache
GUMMYCAT#6001: my biggest multiplier yet. 16 bit signed input.
GUMMYCAT#6001: cpu is back in working condition, and subroutines work. multiplication program is working.
GUMMYCAT#6001: compacted and improvet bit shifter, with a proper arethmatic shift, as i implemented it wrong last time.
Flampt#3906: ooh serial
NGeorge#5042: 
NGeorge#5042: Is this good a design to turn on a display with 4 inputs? <[newline]> i im a begginer btw. <[newline]> ... Why
LOOPS#1372: 16 bits of data over serial in 17 ticks
Jimmy#8080: Central Poggers Unit
Jimmy#8080: Pathfinding
Zoey#7836: My semi-modular 8 bit CPU running Fibonacci program
Justin#2534: My first seven seg display with a binary to hex converter
Erikbot#6368: **Cellular path finding**. It essentially performs a floodfill that remembers the source and makes sure to only use one of the sources. Once the floodfill is done, a query for the path from any point to the green source is instant.
Erikbot#6368: I built a tiled thing with oracles.
Infini#5724: Once made a binary counter reader and also accidentally rendered that.
Dragon Lord#6944: accidentally
Cloudy#0226: how does that happen
TheGrandMinority#1499: Accidentally made the sierpinski triangle
HuntaBadday#3556: Ive written a multiplication and Fibonacci program for it
LOOPS#1372: This is cool, you have anything written for it yet?
HuntaBadday#3556: My current CPU <[newline]> Instruction set and architecture: https://docs.google.com/spreadsheets/d/1y8e4P5_DQOyeCszfgzWVkcdFkyjpvJ1kywTjjZuinBk/edit?usp=sharing
GUMMYCAT#6001: much more readable
GUMMYCAT#6001: software multiplication programmed.  doing 5*7, result is 35.
Superdani_k#1936: I bought Logic world today and this is my Third creation ever, a Seven Segment display
Erikbot#6368: colorful display
Justin#2534: https://youtu.be/cQNe5n8y7lU
GUMMYCAT#6001: conditional branching works, program counts until it reaches 6, then restarts
LOOPS#1372: Okay it's finally done! 16-bit, multiplies, adds, subtracts and shifts, with branching and conditionals. It's also all made on a single board so it can be copied and moved around. It's running Triangular number sequence here.  (n(n+1))/2
Justin#2534: This game is so cool I'll quit multi posting soon üòÇ
Justin#2534: Full adder (Trying to make circuits without looking them up)
Justin#2534: Haven't studied circuitry in a long time. Here is my first 8-bit shift register üòÑ
cheese3660#8641: 16 Bit bit manipulation, can set, clear, and invert individual bits (UPDATE: added a get bit function as well)
GUMMYCAT#6001: upgraded 16 bit registers and alu, rewrote the fibonacci program. needs hazard controller, but is fully functional.  upgraded instructions to the 32 bit risc-v instruction set.
cheese3660#8641: 16 bit bit shifter that supports left shift, left rotate, right shift, right rotate, sign extended right shift, right shift in 1s (the right not gates are used as the shift input)
GUMMYCAT#6001: i feel like there is a better way to compare two binary numbers than this. returns equal, less than, and greater than. doesnt work for signed numbers though
Erikbot#6368: implementation of a barrel shifter
Erikbot#6368: Stackable HD screen
Zoey#7836: Stackable HD screen
GUMMYCAT#6001: 16 bit barrel shifter, can do left and right shift, and rotate
Zoey#7836: Scaleable int division+modulo
GUMMYCAT#6001: forwarding unit works, but it breaks my fibonacci program.  kinda wish i could disable it in software or something so i could take advantage of writeback delay
DoctorFoxy#5440: GOL
Erikbot#6368: Highly optimized **game of life**. cells wrap around the edges. Component count was extremely minimized. Partial sums are shared between cells to further reduce component count and active components. Also there are different colors for cells that will be born/die.
slendi#2681: My first build! An 8 bit registry module
LOOPS#1372: Box that does Multiplication, addition, subtraction, and left and right bit shifts. All 16-bit ofc
Erikbot#6368: **Rule 110, where each iteration takes 1 tick. **each module only has an xor, a relay and an inverter.
GUMMYCAT#6001: expanded to 8 bit, without really increasing footprint.
GUMMYCAT#6001: fibonacci program, not up to large numbers though.  tiny program thanks to no hazard detection and fun memory usage.
GUMMYCAT#6001: redid the design, the program adds 5 and 3.  can run on a 4 tick clock
GUMMYCAT#6001: finally made a pipelined cpu, 5 stage.  no hazard control, can execute a few instructions, if programmed to avoid hazzards
DoctorFoxy#5440: 16 bit adressable D-latch memory array o: (and you can write a value to the specified adress)
RyanT#1426: Small 2 wide tillable ALU
InCrIpTiOn#8028: 1x1 panels
Lim√≥n#7879: why flip flops
Erikbot#6368: Create a thread or face the consequences.
DoctorFoxy#5440: 7 segment decoder :p (with D-latches so it can store the data)
Erikbot#6368: **2bit color 1x1 pixel size**, screen module with 16x16 pixels and minimal part count.
ierdna100#9840: I tried building 256 Bytes of programmable ROM with a friend.  <[newline]> Flaws: <[newline]> - If I move it: game crash, save file gets corrupted <[newline]> - If I resize any boards in it: game crash, save file gets corrupted <[newline]> - If god forbid I wanted to admire it and looked at it wrong: game crash, save file gets corrupted
DoctorFoxy#5440: 
PLYSHKA#6201: Starting to build my first ALU and wanted to compact my Adder*, left side is older one (main part is that tower on right one)
Erikbot#6368: **12 tick 32 bit signed multiplier.**
Erikbot#6368: **1 tick 1 wide tillable 2s complement absolute value.**
Erikbot#6368: **3 tick sync/pipelined 32 bit primary ALU** , it can perform the following operations, notably the **max** and **min** operation (any comparison can cause a branch if needed): ``` <[newline]> max, signed <[newline]> max, unsigned <[newline]> min, singed <[newline]> min, unsinged <[newline]> addition <[newline]> subtraction (and negation) <[newline]> less than, signed <[newline]> less than, unsigned <[newline]> less than or equal, signed <[newline]> less than or equal, unsigned) <[newline]> greater than, signed <[newline]> greater than, unsigned <[newline]> greater than or equal, signed <[newline]> greater than or equal, unsigned <[newline]> equal <[newline]> bitwise and <[newline]> bitwise or <[newline]> bitwise xor <[newline]> bitwise nor <[newline]> bitwise xnor <[newline]> bitwise andn <[newline]> bitwise orn``` absolute value can be performed by combining `sub` and `max`, as adding it would significantly increase component count.
LOOPS#1372: JADE 1 - 16 Bit computer is finally done. Here's it running my collatz program on 255
circuitgamer77#0377: I always try to avoid humans...  So illogical...  Robots like me are much better :)
ardhati#9461: I have tried talking to woman but they immediately turn into dust and disappear at the sight of my atrocious being
Flampt#3906: Yes, connect random wires with random logic gates and you've got yourself a women ai... it's responses make no apsolute sense <:bigbren:894519004822138890>
Erikbot#6368: all discussion in the <#901195561980543007> channel should be in threads. Have you considered talking to women?
ardhati#9461: Is there a way to build a women ai so I can feel the embrace of a women
Erikbot#6368: **3 tick sync count leading zeroes**. This can be used to convert to floating point or to quickly calculate the integer logarithm. The relays are only used to disable the output.
Erikbot#6368: **3 tick sync bit manipulation unit**. It can set, clear, invert and extract an individual bit of the input number. This implements the entire Zbs extension. The selected bit is decided by the number in the second operand. This can be used to very quickly manipulate packed binary arrays.
Erikbot#6368: async 16x16 to 32 mutliplier
cheese3660#8641: asynchronous 16x16 -> 32 bit multiplier (should be about 9-10 ticks at most)
Erikbot#6368: **6 tick sync 32x32->64 bit carry-less multiplication**. This operation can be used to very quickly generate hashes or in cryptography.
Erikbot#6368: **8 tick sync 32 bit hamming weight calculator**, it is counting the number of set bits.
ierdna100#9840: Got the game last night with a friend and we built this as our first creation. 8 bit adder/subtractor. Great game so far.
Erikbot#6368: 32 bit integer divider, **3 ticks per iteration, no internal iteration registers**. Even though it is optimized, 32 bit division requires about 32 iterations.
Flampt#3906: 16-byte vertical RAM
Erikbot#6368: 32x32->64 synchronous multiplier, 1 wide/output bit. **11 tick if unsigned, 14 tick if signed.** (it uses about 4 MB of my save file)
gnog#2259: 2 tick ICA
Erikbot#6368: **2 tick synchronous** ICA, with 1 output bit/block, fully socket based.
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: First(?) 1 wide 3 tick sync ICA
Lim√≥n#7879: fractal
CrispyBacon7#9048: What is fractal
Lim√≥n#7879: fractal
Flampt#3906: google it
CrispyBacon7#9048: What is a mandlebrot
nemerod#0256: https://discord.com/channels/401255675264761866/940108858087600139/942159966519836713 <[newline]> tetris alive, last message with video <[newline]> he have bug and not full finish but he work now for true, not just simple render
gnog#2259: üéâ ||i think <#901195561980543007> is a better place for this, everyone puts their mandelbrots here||
CodotakuYT#8327: My first modular 8-bit ripple carry adder circuit, easily expandable and plug-play (thanks to socket oriented design)
GUMMYCAT#6001: supposed to be a mandelbrot, calculations should be correct, i think im inputing the wrong values
BitorBit#6268: a
GUMMYCAT#6001: four colour screen, each pixel is a 4x4 panel display
ThaCuber#5611: tried to make ram arranged in a matrix but i did something else
blane1257#8086: smol half adder
IDoget#3748: stupidly compact half adder (2x3) also chain-able
nemerod#0256: https://cdn.discordapp.com/attachments/900918579237634079/940108329924059156/unknown.png <[newline]> first line sprite engine connected to the main screen for TETRIS game !!!
Erikbot#6368: Mandelbrot using integer math with 12 iterations, final image is the bit shifted dot product of the point with itself mod 16, I then use a the light panel as a color LUT to produce the final color. 4 points are rendered in parallel, but because it is vertically symmetric, 8 pixels are written. The entire iteration loop is unrolled so the program is about 180 instructions, meaning it would take a bit over 13 hours to render it in 30 TPS. Multiplication takes a while (3-5 cycles) so the 3 multiplications are scheduled in advance for each iteration. Because this is fixed point, I only use the higher 16 bits since a 16 bit multiplication produces a 32 bit number. Because integer math is used, zooming is finite. **More pictures in thread.**
Erikbot#6368: Highly part and component update optimized **128x128 4 bit color** screen (16 colors) **with ability to overwrite entire screen** in a few ticks. If the CPU was constantly writing to the screen with zero calculations each tick, it would take 9 minutes to draw something arbitrary. Even with the optimized construction, it uses about 20 MB of my save file. <[newline]>  <[newline]> To reduce update count, write lines are sent on the x and y axis and data is only sent on the column that is written to. To reduce part count and floating point issues, the pixels and multiplexers are in groups of 4x4 and 4. To overwrite entire screen, all write lines are activated through buffers so that the overwrite functionality would not affect number of active components during normal operation.  <[newline]>  <[newline]> Like my previous screen, the component update complexity for single write is `O(sqrt(n))` and for writing to the entire screen it is `O(n)`, where `n` is the number of pixels. This can be reduced to `O(sqrt(sqrt(n)))` , by generalizing it to 4d, but would require projecting a 4d construction to a 2d screen.  <[newline]>  <[newline]> There is a boby board that is barely visible in the main image.
LOOPS#1372: 16-bit Multiplier! (8 x 8)
ThaCuber#5611: why boby
Crevette#1444: Perfect boby board
nemerod#0256: my 2048 decoder <[newline]> the board boby for the scale
Crevette#1444: Board boby is very nice <@!271102641881219072>
That Guy#1215: 6 bit to decimal converter thingy
Crevette#1444: Tetris Game Boy sound
Erikbot#6368: 64x64 screen with 4 bit color depth optimized to minimize number of components and number of active components. It is displaying (x+2y)%16. There is a mux for x and a mux for y and data is only sent on the column containing the pixel that will be written to. Active component complexity is O(sqrt(n)), where n is the number of pixels.
GHXX#9078: extended my 7segment display to cover hex digits also (A-F) (all uppercase, so B instead of b and D instead of d) üôÇ
Erikbot#6368: 4 core with optimized fib. Jump flags are inside instruction so that only add instructions need to be executed, therefore each core produces a number each cycle. There are 64 registers in total, 16 per core, where 15 are general purpose.
LOOPS#1372: 16-block wide 16 bit adder, part of my mini project to redesign everything the same width as the data it handles, for socketing.
GUMMYCAT#6001: made my first multiplier circuit.
LOOPS#1372: My double dabble circuits, array in thread
IDoget#3748: Any way to fit this into a 4 wide block
Erikbot#6368: Same thing, but **2 modules are merged**, making it **twice as fast**. **Logical expression in thread**
Erikbot#6368: CNF **double-dabble** sync add 3 module. This exploits the fact that `or` gates in logic world are free. **Logical expressions in thread**
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: 2 Tick Decrementer (shoutout to erikbot)
Alskis#8118: Not a very complex build but I'm happy with it, it's basically visualized RAM. But it has a 3-bit address and 16 bits per address, so that it can be shown on a 4x4 screen. Outside of the screenshot there is a register controlled by a clock, which cycles through the addresses, so I guess you can make some vague animations with it
nemerod#0256: dont worry XD <[newline]> i can understand your action, and i finish with the other topic üòâ
BitorBit#6268: image 1 (tower); <[newline]> 128B <[newline]> 16 addresses <[newline]> 8 bits per address <[newline]>  <[newline]> image 2 (wall); <[newline]> 2Kb <[newline]> 256 addresses <[newline]> 8 bits per address <[newline]>  <[newline]>  <[newline]> set address: 1 tick <[newline]> read from selected address: 1 tick <[newline]> write to selected address: 2 ticks <[newline]>  <[newline]> flash full 128B (logic tower image): 48 ticks (1.6sec) <[newline]> flash full 2KB (logic wall image): 768 ticks(25.6sec)
Reese4221#8317: 20x20x30(ish .5 bigger one one side and a bit shorter) CPU have yet to test it properly but should be fully functional
LOOPS#1372: pong
Crevette#1444: Solo mods and double Solo mods
Lim√≥n#7879: scam
PillburyDohBoy2#0651: Jimmy, you had better watch out. We are going to figure out if oracles are scams or not.
Crevette#1444: Pong
IDoget#3748: finished 16 + 16 bit super compact adder
LOOPS#1372: 16-Bit CPU with branching which does  the perrin sequence https://www.youtube.com/watch?v=8kL-A_lQs80&t=245s
IDoget#3748: 17 bit to BCD converter using double dabble (yet to manage outputs) edit: going to completely redesign, i need it to be smaller
Erikbot#6368: **4 core** CPU with single pipelined ALU. Each core has separate registers and PC, but otherwise everything is shared. In total there is **1 instruction per tick**, with a **4 tick clock**. The BCD converter is synchronous and shared between the cores. The Fibonacci program could be faster but it is just a demo program. **More pictures/details in thread**.
Erikbot#6368: extended discussion should be in a thread
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: lol i did something similar in mc using clocks at powers of 2
Tobilo#0073: Im proud of my first Alu, then I see the stuff posted here and cry
CrispyPin#1149: i hate how that is technically the optimal way to do that
Erikbot#6368: a normal 4 bit binary counter.
Erikbot#6368: **16 bit**, **4 tick clock**, **2 registers**, with a **0 instruction memory** and **1 instruction**, which produces the sum of the two registers and shifts them. This makes it **fully turing**-||in||**complete**. It is currently running a **Fibonacci program**.
LOOPS#1372: My first  16-bit computer running  Fibonacci sequence.  Interchangeable floppy storage programs  to the  left  of the main unit.
GHXX#9078: finally hooked up my iterative multi-divider (the massive thing in the center) to my counter (the tall building in the far back) and to my clock, so now i know how much time has passed in this world since we started üôÇ
ForLoveOfCats#4111: My 8-bit cpu just executed its first four instructions, storing these constant values into its four registers
That Guy#1215: question, also HOW
That Guy#1215: mmmm Gradient
Erikbot#6368: pulse based (tick perfect) computer. **2 tick clock** (pipelined with a 5 instruction branch delay, **data feedback in 4 ticks**), 16 bit. Has BCD converter to display and is currently showing the Fibonacci sequence. **ALU is 4 tick** and has bit shift, add/sub, and binary operations. Can query specific bits in a single instruction. It prints about 5 to 6 numbers per second. This is played in the default speed (30 ticks per second).
BitorBit#6268: 16x16 RGB display (256 pixels) <[newline]> To write a pixel takes 0.04sec to do it on default TPS(~10sec to write all pixels) <[newline]> 4bit <[newline]> ("DISPLAY REQUAIRES GRAPHIC PROCESSOR TO WORK OR MEMORY SCROLLER TO DRAW IMAGE") <[newline]>  <[newline]>  <[newline]> {abount of pixels is unlimited, they are infinitly expandable}
ùïçùï†ùïùùï•ùïíùïöùïî ùïÅùïñùï§ùï§#0001: Made a thing that can type stuff as a test before I make something with one
That Guy#1215: neat little 4-bit to decimal converter with a 7 segment display slapped onto it
PillburyDohBoy2#0651: sweden (yes, the entirety) <[newline]>  <[newline]> credit to: internet_man
GUMMYCAT#6001: 2 tick program counter using decoders
BlockOfGaming#7101: An almost instant adder
VigilanteHobo#1873: now with a case
BitorBit#6268: completed 16x16 30 tick auto adressed & 2 bit colors manualy builded display <[newline]>  <[newline]> short: MA2CD-V1
VigilanteHobo#1873: 31x31 base <[newline]> 20 tick clock <[newline]> 8 bit word <[newline]> indirect addressing
BitorBit#6268: the display that was manualy build block by block
GUMMYCAT#6001: continuous addition outputing to the terminal
BitorBit#6268: USB stick?
IDoget#3748: really fucking messy but functional binary to 7 segment display. you can use up to 10 of these and the "add 3 shift algorithm" to display 32 bit numbers in decimal
BitorBit#6268: one of the smallest computers <[newline]> made by: BitorBit
GUMMYCAT#6001: it also uses ASCII format
GHXX#9078: its actually way more interesting than a simple display that says "hello world"
circuitgamer77#0377: But it works, so it's perfect :)
PillburyDohBoy2#0651: ngl this is the most sad hello world i have ever seen
Satan#9850: nice
GUMMYCAT#6001: 
Biggycheese69420#4947: nice
GUMMYCAT#6001: hello_world!
LOOPS#1372: Universal 50-pin ALU connector
GUMMYCAT#6001: screen works, now to hook it up to the cpu
GUMMYCAT#6001: soooo much fun to wire up 20 bits together in a tight space
VigilanteHobo#1873: Unfinished minicomputer
ThePiGuy24#0369: made an instant carry adder and attached it to my stack (which has been expanded to 16 bytes long because i wanted to and i deliberately made it easy). not particularly useful but is now essentially an RPN adding machine ;p
GUMMYCAT#6001: made a python program to press keys on my keyboard and input whatever program i write
OkamiShadowX5#3319: think its possible to make a commodore 64 emulator? its just an 8 bit computer.  lol
GUMMYCAT#6001: 256 bytes of memory
GUMMYCAT#6001: made a giant decoder
GUMMYCAT#6001: shrank the rom and added more space for data.  200 bytes read only data
ThePiGuy24#0369: 8bit x 8 stack. green thing off to the right just ands the first and second value in the stack then pushes it back onto the stack (temporary stand-in for the ALU). it is "dual ported" (or maybe triple i guess) such that it can pop 2 values off the stack for the (to be) ALU, then push the return value back on in one cycle rather than having to do it in 3 discrete cycles
GUMMYCAT#6001: perhaps i should go to sleep now
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: Sequential BCD to Binary Converter
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: Small Sync Adder
blane1257#8086: adder
ilghar_kus#7496: 
ilghar_kus#7496: bought the game two hours ago, made a byte-adder, but i could see obvious latency
GUMMYCAT#6001: doin some bigger numbers.  two 8 bit numbers multiplied.
GUMMYCAT#6001: uses a stack thats mapped into ram
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: 32 bit, 2tick serial BCD computer
GUMMYCAT#6001: software multiplication.   uses shift and add method
nemerod#0256: you not see what we made on the FR server <[newline]> too many wire with the first center switch telecom in extreme beta <[newline]> https://cdn.discordapp.com/attachments/462771099600420867/934189257977893005/unknown.png <[newline]>  <[newline]> we trying made community server with all build connected and mega switch network üôÇ <[newline]> you can see on background the first modem we made üôÇ <[newline]>  <[newline]> good luck for your network, i'm happy for see the real pillar add for add several wire with just the tool multi wire, with size, total pin, but on one entity and the connector on bottom and how he connected to the groupe wire <[newline]> like generator pillar <[newline]>  <[newline]> you get maybe idea for add generator scripte electric pole
circuitgamer77#0377: Nice :)
EmergencyTemporalShift#0001: Get this then four times the internet
Jimmy#8080: Elevated wire
EmergencyTemporalShift#0001: I thought the internet wire on this one server could use some sprucing up so I ELEVATED IT <[newline]> I'm kind of a wiring savant
Biggycheese69420#4947: thank you
sybergoosejr#8256: Good job! This is the same cpu setup I based my AIY setup off of. Just a few minor changes because logic world. Such as how my instruction rom functions and how I use a slower clock to be 1 ins per clock
circuitgamer77#0377: Does it use a stack to return from it, or is it a different model?
GUMMYCAT#6001: this is a subroutine that ads 3 then subtract and repeat
GUMMYCAT#6001: subroutines implemented, branching next
Biggycheese69420#4947: Ben Eater 8-bit breadboard computer in LW
GUMMYCAT#6001: ADC instruction is working. ive also finished my full external assembler which encodes to keystrokes, which is converted to machine code
JPM-Baroque Spaceship#6542: Guess what is back! SERNET now in MS server!
GUMMYCAT#6001: rom made to reduce number of pegs, hopefully improving load times and space
GUMMYCAT#6001: wow, dont know why i didnt think of that lol
LOOPS#1372: https://www.youtube.com/watch?v=ihpWlXqHruk&t=6s
circuitgamer77#0377: I like it quite a lot more because it doesn't obscure as much (and smaller is usually nicer looking, at least to me).  It took me a bit to find the small one, though.
gunna#2218: the one i saw first i didn't even know there was a flat one lol
circuitgamer77#0377: Any reason you are using the big labels rather than the board thickness ones?  (just curious)
gunna#2218: in the front is a 4 bit counter that you can flash a number into and it will count up from there and in the back is a hex display with compact built in decoder. both will ether display the right number or nothing no ripple no fliped bits just the result
gunna#2218: this is a 4 bit comparator on the left and a 4 bit adder/subtrator on the right
sybergoosejr#8256: to speed thing up you could replace the buttons with keyboard keys and setup a seat.
GUMMYCAT#6001: making a programer to allow quick programing from an external assembler. to painful to manually input 8 bit numbers
GUMMYCAT#6001: 
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: small 1 tick decoder
GUMMYCAT#6001: binary to decimal using a shift register, far better than my last design
NitramiuZ#4145: Paint thingy that sends 64 bits of data through 8 wires up to the monitor. So when you update the image you've "drawn" on the switches it sends pulses to display it and stores the image on the monitor.
GHXX#9078: 1 tick falling edge detector
GHXX#9078: compact 2 digit decimal display that has a counter included, which includes switches for setting the largest allowed value (e.g. setting the left one to 5 and the right one to 9 will mean it will count from 0 to 59) üôÇ
GUMMYCAT#6001: first calculation, 5+3
GUMMYCAT#6001: building something smaller, but better.  got overwhelmed with the last one.
circuitgamer77#0377: Slight redesign done :)
circuitgamer77#0377: I realized an error I made - I actually need 3 data busses because a read instruction will put data on the bus 2 ticks after the address is supplied, but a write instruction will need to use the bus at the same time as the address is supplied.  That would create a possible data collision, so I'm going to split up the data bus into a read bus and a write bus.  I'll end up with 5 internal busses, but that's a compromise I can accept.  There will be an instruction address bus, an instruction data bus, a general address bus, a general write data bus/general purpose bus, and a general read data bus.  Lots of wires, but that's fine.
circuitgamer77#0377: Yet another RAM design, this one designed for my 1 tick pipelined CPU.  The actual RAM register components have 3 address and 3 data lines, no read control lines (always reading) and one write control line, but the chip on the front reorganizes it to one read address/data pair, no relays on the output, and one address/data pair, with a read control line and a write control line.  2 tick read, 4 tick write.  Fully synced (it has to be to work for this CPU).  All values are 32 bits.  Intended use is for the continuous read to be connected directly to the program counter for the address and the data to be connected directly to instruction decode, with the second bus connected to the CPU bus and a separate address bus that can come from other internal components.  8 addresses built here.
GUMMYCAT#6001: rom is far larger than the cpu, might try to shrink this down
GUMMYCAT#6001: too many data lines
HuntaBadday#3556: 808 Drum machine
nemerod#0256: https://cdn.discordapp.com/attachments/907200085547450378/931906595007397959/unknown.png <[newline]> https://cdn.discordapp.com/attachments/907200085547450378/931906595246460979/unknown.png <[newline]> https://cdn.discordapp.com/attachments/907200085547450378/931906595468746792/unknown.png <[newline]> https://cdn.discordapp.com/attachments/907200085547450378/931906595732992070/unknown.png <[newline]>  <[newline]> Memory cell with input and output separated bus <[newline]> Simple stack allowed in 2D with 1 row selector and 2 line for write/read <[newline]> Easy stack for add layer for make 3D memory via addresse controller <[newline]>  <[newline]> Size on floor = 10x3 squar <[newline]> Size height with indicator = 9 squar <[newline]> Size height no indicator = 8 squar <[newline]> speed read = 2 tick (allowed 1 pulse tick for get data with 1 tick delay after) <[newline]> speed write = 2 tick (fault by d-latch üò¶ ) (allowed 1 tick pulse row+colume if data have 1 tick delay on the input bus) <[newline]>  <[newline]> idea from several message here for make memory 2D with miss memory alignment supported from memory controller <[newline]>  <[newline]> inspired by FML-8 map by <@!138380569573720065> (i trying upgrade several component without touching the core üòâ ) <[newline]> no ask for how i made all wire inside, noclip abused
circuitgamer77#0377: Just made it 2 tick read, but it looks pretty much identical, so I won't send another screenshot.  The way it's wired it actually ends up more like 2 tick read 4 tick write because of a delay from the relay that allows 2 tick read, but I'm guessing there aren't many cases where a program will write to RAM and immediately want to read the same data back in the next couple ticks, so I think it's more optimized.  You could essentially read the old data for 2 ticks after you write the new data.
circuitgamer77#0377: This version is 4 bytes at a time, with 8 bytes of memory total, just because I didn't want to clone a ton of boards.
circuitgamer77#0377: Modular byte-addressable RAM, 2 tick control logic with a 3 tick read & write register design.  Can easily be switched out for a 2 tick read and 3 tick write, which will also be the timing for the whole circuit.  Not yet synced, but that's soon.  8 bit addresses for now, but I'll make a new version with longer addresses at some point.  Supports 1, 2, 3, and 4 byte unsigned read, signed read, and write, and the max number of bytes that can be addressed at once can be expanded by cloning a module along with the overall number of bytes in the circuit (max 256 bytes for now).
GUMMYCAT#6001: had to do fibonacci sequence again
GUMMYCAT#6001: after hours of struggling with data corruption, ive got my new cpu's counting program working
HuntaBadday#3556: The internet system is now finished
GUMMYCAT#6001: fixed up the rom and expanded, support for conditional jumps
GUMMYCAT#6001: new rom to store microinstructions, compacted and each section is removable and re-addable
GUMMYCAT#6001: 64 bytes of ram, expandable to 256 bytes, but i dont want to deal with the loading times for that
MoeKhaos#2187: previous version;
MoeKhaos#2187: Working on a compact version of my memory drives as they were so bulky
Lisa#4756: ~~Don't mind the interstellar OST in the background, I was just listening to it while building~~
Lisa#4756: I decided to make my own multiplier. I did not look up how adders are done. This was the design I came up with. It's basically just 3 adders (i have 4 cuz im lazy and it's a proof of concept) that basically shift the bits around, and it has a few AND gates.  <[newline]>  <[newline]> I just looked at how to do binary multiplication on paper and copied that into hardware.
Lisa#4756: https://streamable.com/zkrv4n
Jimmy#8080: People, please see the pinned message in this channel. For continuing the conversation, see the thread below:
Jimmy#8080: See, this is what happens when there isn't a zero tolerance policy
PseudoGoose#2841: oh no what have i done
pilonpl#4015: Just add a bot that would allow only images
HuntaBadday#3556: The builds channel is here to discuss **builds**
PseudoGoose#2841: most of the screen space is still images
PseudoGoose#2841: aw cmon jimmy it's not that bad
HuntaBadday#3556: No
Jimmy#8080: am I going to have to increase the slow mode time again üò§
Jimmy#8080: people can we please use threads for extended discussion
ThePiGuy24#0369: tfw your internet system built in a game has specs that meet or beat the real world internet by a very large margin <[newline]> ipv6 levels of addreses, and unmatched amount of ports
HuntaBadday#3556: 
HuntaBadday#3556: A router for my new internet system
Jimmy#8080: connect four
sybergoosejr#8256: looks like you  could just add a 2nd bit to each pixel to determine the player that belongs to that cell. and a t flop to switch between each player on each press. good luck on doing the win/lose logic.
MoeKhaos#2187: Changed my counters to have a pulse so you can hold down the button to drag the mouse across the screen in that direction.
Luckybuilder#6131: i have so far made single player connect 4 i just have to implement a second player now
circuitgamer77#0377: SHA-256 Calculator, finally finished (assuming I didn't make any mistakes, which I probably did):
Vinyl Boot Maven of Shade#1858: Data path for my pipelined cpu. Currently only 2 stages.
GUMMYCAT#6001: calculator program adding two numbers
blane1257#8086: risc-v
GUMMYCAT#6001: set of addressable outputs, running a counter program
PseudoGoose#2841: [8K] Here's a progress pic of the RISC-V core so far. The registers still take up the most space by far, because I wanted to keep things as flat as possible. I may reconsider that üòÖ
GUMMYCAT#6001: new cpu, not super knowledgable on the best methods to build cpu's, so i just added more busses and 16 dual readable registers
PseudoGoose#2841: Took an extended break from Logic World over the holidays, but I'm back at it. Continuing to work on my RISC-V core, I've built (most of) the immediate decoder.
Jezza#1264: Carry lookahead adder. Really simple, and very modular.
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: Matrix Mult V2 20bit signed 1+12.7 format
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: oh yeah wait i could do 2tick like vinyl mentioned, but it would only go up or down, not both
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: but my combinational incrementer is 2 tick and my decrementer is 2T also <[newline]> so i can get 3 tick dedicated up or down counters
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: yeah best i can do rn is 4ticks for up/down with branching
Vinyl Boot Maven of Shade#1858: You can use 2's complement to make a 2 tick up counter count down. But, it wouldn't be bidirectional. Otherwise I think using a shifter and encoder is the only way to surpass the 2 tick and 3 tick limit.
Vinyl Boot Maven of Shade#1858: Up count works at 2 ticks, but because of the added inversion, down count takes 3 ticks.
Zebtyfive#5856: Thanks, i'm looking into it üòÑ
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: here is a pic <@!279602192166682624>
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: i have a design you can use, but you havee to copy from pics <[newline]> https://discord.com/channels/401255675264761866/901195561980543007/928647558413299774
Zebtyfive#5856: i've tried it in multiple configurations, tried to put an "output stabilizer" (latches that trigger way after the +/-), but still : i can add with no problem at high frequency, but substracting at high frequency does bug : (3-1 -> 4 ??) <[newline]>  <[newline]>  If anyone has a premade design or is down to look into mine
circuitgamer77#0377: You can use an xor to invert the latch outputs conditionally, so you can switch from increment to decrement.
Vinyl Boot Maven of Shade#1858: With the D-Latch toggle version. Merely invert the Latch outputs that clock the following ones.
Zebtyfive#5856: Hi ! I'm trying to make a counter. While an increment only counter is easy (3 async Dlatchs), i can't find an easy way to make a counter that would support decrement(i don't really want to go through a transition table). If anyone has a solution, i'm a taker !
EagleWolf404#5555: That's a lot smaller than my design
Luckybuilder#6131: completely forgot you could tie lol so that has been added in now and this should be the final build of this tic tac toe game since everything else works 100% without issue
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: 20bit mults
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: that makes so much more sense now haha
GUMMYCAT#6001: barrel shifter, gonna expand to 16 bit
GUMMYCAT#6001: output on the left is ripple carry and on the right is carry lookahead. put them side by side for comparison
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: Oof why's it rippling. Didn't sync it yet? Or is that the rom input?
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: That brings me back man. Old school tung
GUMMYCAT#6001: feels good man
circuitgamer77#0377: Looks neat though :)
GUMMYCAT#6001: 16 bit carry lookahead adder. pure pain to wire
RyanT#1426: Floating point add
RyanT#1426: Single precision floating point adder. works with all types of floating point numbers (positive, negative, subnormal, infinity, NaN). can also be used as a subtractor if you invert the sign bit of input B
GUMMYCAT#6001: finally figured out carry look ahead adders
Luckybuilder#6131: Final Version, now it shows how you won by changing the color to gold in the winning pattern
Luckybuilder#6131: full set up for perfect game of tic tac toe
Dustin#1560: when the build is sus (it has a butt for checking wins)
Ryan#9918: ascii lookup table üëÄ
MoeKhaos#2187: I'll see if I can implement it.
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: hmm not really, just needs 1 inverter per DFF cell you already have. Ive done it in MC
MoeKhaos#2187: That's entirely possible, but very tedious to hook up
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: one cool trick for version 3 if you make one is using TFF instead of DFFs to store the image. Then you can easily invert the whole image by clocking all TFFs
circuitgamer77#0377: It should just be one bit that changes it, right?  Just put a relay on it?
MoeKhaos#2187: <:sweaty:792637220628070401>
circuitgamer77#0377: Idea for an addition - "hide cursor" switch.
MoeKhaos#2187: Mouse visibility added, possibility of animation capabilities installed.
MoeKhaos#2187: Version 2 Vs Version 1
Luckybuilder#6131: Decorated the front
Luckybuilder#6131: I finally made a perfect fully functioning tic tac toe game. all I have to add is a check for win part and it will be done 100%
GHXX#9078: sha256
circuitgamer77#0377: First 8 constants for SHA-256 programmed in, just another 64 to go...  And I need to redesign a ROM for those...
GUMMYCAT#6001: fibonacci sequence, to 24 places
MoeKhaos#2187: The circuit as is
MoeKhaos#2187: After SO MANY wires being crossed and logic gates being misplaced, it finally works! only the display part though.
GUMMYCAT#6001: 16 bit binary to bcd, using a serial input, very unoptomized, but fast enough
MoeKhaos#2187: Working mouse movement and built in screen wrapping, only thing left is memory storage and a 3 bit decoder/counter
GUMMYCAT#6001: i havent looked up how to optimize the program, was testing functions, but i think ill try that
MoeKhaos#2187: That's insane
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: nice work! try bit shift and add next
GUMMYCAT#6001: my cpu doing multiplication via continuous addition
drawcoco#9558: I would stack them (tower team)
Dustin#1560: my version
Luckybuilder#6131: Attempting to make tic tac toe, The stuff really far in the background is not ours
GUMMYCAT#6001: finaly added a bcd io, here is the fibonacci sequence
circuitgamer77#0377: 
circuitgamer77#0377: Counter redesign for SHA-256 complete - it actually counts correctly now!  Also much neater looking than Mk1 :)  Next up is the actual logic for the first encryption pass!
PLYSHKA#6201: Old (actually only one i know how to make and i forgor who was initial designer) design for 8 bit ram (first 8 bytes)
PLYSHKA#6201: Made more compact version of my adder/subtractor <[newline]> any ideas how i can make chaining a bit... smaller?)
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: Speedy Brezzy V2
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: linedrawer progress
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: 4 tick sync up/down counter with branching for linedrawer V2
Jimmy#8080: Floating point adder
Vinyl Boot Maven of Shade#1858: And finally some attempts at artistic shots.
Vinyl Boot Maven of Shade#1858: Some close ups: Special cases, zero counter(priority encoder) on back of normalizer, front of normalizer with rats nest of case decoder toward the bottom, Rounder, pre-adder(front part of adder).
Vinyl Boot Maven of Shade#1858: Finally finished my Floating point adder. The yellow: special cases. Green: adder. Blue: normalizing. purple: rounding.
GUMMYCAT#6001: 8 bit cpu, with microcode
Broyojo#2667: one step closer to bitcoin mining in lw
circuitgamer77#0377: SHA-2 (SHA-256) initial memory.  It's already gigantic, and it's only a tiny piece of the algorithm!
Jimmy#8080: Clock!
Biggycheese69420#4947: server "simulation.rate 30" in console
Wamboi#0666: Wish I knew how to change the tps
blane1257#8086: <:despair:827484568998117377>
Lim√≥n#7879: sets tps to 31 üëø
ùîóùî•ùî≤ùî´ùî°ùî¢ùîØ#2420: My first computer
Wamboi#0666: Made a clock that is aleast for 1 day accurate to the second
circuitgamer77#0377: FPE strikes again, but this is my new model for RAM designed for my 1 tick CPU - separate address and data busses for write, read 1, and read 2, plus auto-defined addresses or manually defined addresses.  The floating point errors are making it unusable at the moment though.
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: i would love to redo my render hardware in floating point, if you wanna work on a project *wink wink* :)
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: very nice, also nicely done on the barrel shifter for the normalization :)
Ecconia#4929: 16^2 display, speed0?
Vinyl Boot Maven of Shade#1858: Finally. Float to BCD.
GUMMYCAT#6001: added a top interface allowing me to route data a lot easier
DeadlyRAPTR#1916: My display with a vertical/horizontal line drawing module which can either draw normal or dotted lines with a specific interval. The weird mess in the bottom left is from testing and i havent built a module that can wipe the screen yet
HomelikeBrick42#1173: sockets
DADp#7461: binary decodr (buffers are fun)
Saphire#0773: 3x5 matrix display with 4 bit addressable "modular" ROM <[newline]>  <[newline]> Each ROM segment has own little decoder mess, ow. At least I remembered I can just... run addr/not_addr lines
Vinyl Boot Maven of Shade#1858: 32 bit would just be taller. Still only 4 microinstructions. Also, the barrel shifter is unneeded.
Vinyl Boot Maven of Shade#1858: Tiny 4 bit fibonacci.
GUMMYCAT#6001: 4 bit adder
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: FPGAs also usually have carry look ahead slices configurable for addition
GUMMYCAT#6001: yeah, i'm keeping it small since the interconnects are still a hassle, will be expanding the functionality of each cell at some point. that makes sense
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: Lack of lut. Most FPGAs have larger input 2 output LUTs. Usually more than one adder. And they usually have DSP slices as well.  <[newline]>  <[newline]> I guess it's pretty subjective tho. Cool work nonetheless. :)
GUMMYCAT#6001: what makes it not an FPGA? or what makes it only an SPLD
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: I think its more in the SPLD family of devices rather than an FPGA,  but still, nice work! :)
GUMMYCAT#6001: it does have a flip flop, towers with green on top are programmable interconects  with input and output seperated
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: No flip flops?
GUMMYCAT#6001: 2 input lookup table and a full adder
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: What's in each fpga cell
Tape#8369: yeah the rom is way bigger than i would have liked it to be, i'm gonna try and figure out a better way soon
GUMMYCAT#6001: 4 slice fpga adding two 2-bit numbers and outputing to a 7 seg
Lim√≥n#7879: so large
Tape#8369: 
Tape#8369: made a hex 7 seg (0-F) with the lookup table behind it
Saphire#0773: Flipped around the side which has the extra protruding part (to keep socket/plug from going wrong way around) so that it can now be mounted vertically flush to the main board, rather than with one offset to fit things in
Saphire#0773: Made them smaller in footprint of the support structure itself, and moved into a easy to copy separate "circuit" structure
Saphire#0773: A little plug/socket thing for 16 connections in 8 squares space ^-^
Saphire#0773: Made a little modular 7 segment display just to figure out how building and connections work here, and such ^^ <[newline]> The display segments have the black plate as main, and you just hook them onto the red plate that peeks through the decorative faceplate. Now makes me ponder at extension cards... But first need to build something that CAN be extended
Biggycheese69420#4947: 16*16 display
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: ayy nice, my 32 bit alu is also 4 ticks, but i also have all logical and shifting functions, also some interesting arithmetic operations like absolute value and vector ops
Vinyl Boot Maven of Shade#1858: My new 32 bit ALU 2.0 on the right. Old 8 bit ALU on the left. Controls are for new ALU. Max path length = 4 ticks.
GUMMYCAT#6001: made an fpga, currently hand programed, mimicking a half adder
sybergoosejr#8256: made AIY keyboard modifier card. 2 types. one with a built in input buffer and one direct encode. since the direct encode is simpler it has more keys.
VigilanteHobo#1873: my first text display
sybergoosejr#8256: finally finished debugging the new ram board (which was perfect). which showed issues with my demux board and micro code. i made the bug fixes and updated the 2x16 demux board upgraded 7 step rom to 8 step. (6 step and 8 step roms will be supplied in AIY) i tried to keep logic cards simple and straight forward as i can but i have ran into an issue that i could use some opinions on given my system and design rules.  more notably for faster clock cpu's that could be built with the AIY spec and parts. it boils down to demux timing. curently the entire system is based off of 2/3 bit demux cards which at best are 1 tick. the 2x16 demux board needs 10 of these cards but at the cost of 1 tick. should i add a larger demux card (4/5 bit) to bring demux time to as low as 1 tick for the applications that need the 2x16 demux board? this could lead to faster ram access times and less steps required per clock on a possible cpu.  <[newline]> or to keep the world small and components more backwards/forwards compatible stick to the one demux card spec. (the reason for the extra bit is some boards/setups can use the power pin as an enable effectively demuxing an extra bit.)
totobono4#5551: If you mean that yes you're right ü§î I was thinking on an external way to do the toric system, but you can totally include it in the cells.
totobono4#5551: You mean build a new layer of sockets in the existing cell linked side by side, and just connect the correct sockets on the edge of the game matrix ?
CrispyPin#1149: just a tip, you can send the signals back in straight lines to the other side if yuo just add more layers of cable, that's how i did it
totobono4#5551: And this is a toric game of life now thanks to new cells that transmit the cells states :3
sybergoosejr#8256: i think for AIY this will be final form as AIY is built around 8 bit but many components can be tiled for 16/24/32 and so on... bit operations.
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: nice work, if you find that amount limiting there are various memory mods to help you out :) <[newline]> imo a lot of the world size comes from DFF components
sybergoosejr#8256: 256 bytes of AIY memory!
sybergoosejr#8256: monster wired...
sybergoosejr#8256: the start of a new memory board for AIY. it is 64 bytes per board uses the 2x4-16 demux module and if i can manage the wire routing it will be tillable up to 4 of them in a row for the full 256 byte support. alot of wiring to do. going to be a crap load of componets!
Deleted User#0000: 5xmemorycells counting collectively
sybergoosejr#8256: it is some what possible to setup an AIY build to use dynamic clock mode by looping a control line to the clock input and setting the top of your instruction to pulse that line.
‚ñàhamster godoy#8888: i'm actually making buffers to slow down some operations so i can synchronize stuff, mine takes variable amount of time depending on the instructions, nop is really fast, mov does a bunch of stuff and i'm making JZ rn
sybergoosejr#8256: currently my cpu is 20t/cycle
‚ñàhamster godoy#8888: i don't even care about speed at the moment, my instructions take dozens of ticks hahaha
sybergoosejr#8256: kind of have to for the 8bit instructions to work. the 4bit is a bit more forgiving. to pull of 8bit moves i have to set and read 3 address in 1 master clock.
‚ñàhamster godoy#8888: oh i see, you are optimizing for speed
sybergoosejr#8256: i would like to make another layer but that would add another tick to decode time with my system without making a new demuxer setup.
sybergoosejr#8256: the included ram boards is 6 bit using a smilar bank switch. but it's treated as 8bit with the top 2 droped.
‚ñàhamster godoy#8888: the 2x4 decoder is connected to an extra 2 bits on my program counter, which actually is 6-bit, and the 2 bits are basically "bank select", so you have 4 banks of 16 nibbles
‚ñàhamster godoy#8888: that's how i made the 4-bit computer i'm making have 64 instructions. <[newline]> the way i have it setup is a 4x16 decoder to select the addresses, but it also has another 2 cables that are connected to a 2x4 decoder
sybergoosejr#8256: the way the micro code works you can have 256 instructions and 1024 with flags used.
‚ñàhamster godoy#8888: you can get more instructions using bank switching
sybergoosejr#8256: AIY is available for download on the site but it is missing 3-4 8 bit instructions and an upgraded rom card to run this program. but it does have the 8bit jump already written in the example cpu. the next version will resync to what i have on my server and the updates will be included. not sure if the program will be the same next time i upload the world though but you will be able to load it in. https://logicworld.net/view/ctn-1769ad2f (AIY 1.8 with cpu)
sybergoosejr#8256: i dont think of it as a stack but when you run an 8bit instruction on my cpu the next byte will be the value it uses if it requires it. the micro code steps the program counter twice to do this. where the 4 bit instructions can contain the value in 4 bit on the same byte so no double read is required. the fib program is done in mostly 4 byte to save space since my current ram setup only supports 64 bytes.(00 - 3F) (256 max logically)  but it does allow for more dynamic storage.
‚ñàhamster godoy#8888: the computers i downloaded in the website all just used really long instructions words instead of sequential ones
‚ñàhamster godoy#8888: cool, i noticed that you have different lines a full instruction, are you using a stack?
sybergoosejr#8256: here is the program <[newline]> ```(00)00001010 jp 8bit //boot <[newline]> (01)00010000 (10) <[newline]> (02) - (0F) RAM <[newline]> (10)00001100 LDA IND 8bit //copy start <[newline]> (11)00011101 (1D) <[newline]> (12)00001101 save A 8bit <[newline]> (13)00100011 (23) <[newline]> (14)00001100 LDA IND 8bit <[newline]> (15)00011111 (1F) <[newline]> (16)00001101 save A 8bit <[newline]> (17)00100001 (21) <[newline]> (18)00001110 LDB IND 8bit <[newline]> (19)00011110 (1E) <[newline]> (1A)00100011 JPO (2) //copy done? <[newline]> (1B)00001010 JP 8bit <[newline]> (1C)00100000 (20) <[newline]> (1D)00000010 (02) //const <[newline]> (1E)11000000 (C0) //const <[newline]> (1F)00110010 (32) //const <[newline]> (20)00001100 LDA IND 8bit <[newline]> (21) RAM <[newline]> (22)00001101 save A 8 bit <[newline]> (23) RAM <[newline]> (24)00010010 LDB DIR (1) <[newline]> (25)00001100 LDA IND 8bit <[newline]> (26)00100011 (23) <[newline]> (27)00001011 save sum 8bit <[newline]> (28)00100011 (23) <[newline]> (29)00001100 LDA IND 8bit <[newline]> (2A)00100001 (21) <[newline]> (2B)00001011 save sum 8but <[newline]> (2C)00100001 (21) <[newline]> (2D)00001100 LDA IND 8bit <[newline]> (2E)00100001 (21) <[newline]> (2F)00001010 jp 8bit <[newline]> (30)00011000 (18) <[newline]> (31)00001000 HALT //can be blank <[newline]> (32)00010001 LDA DIR (1) //FIB START <[newline]> (33)11110100 save sum (F) <[newline]> (34)00000010 LDB DIR (0) <[newline]> (35)11100100 save sum (E) <[newline]> (36)11110101 LDA IND (F) <[newline]> (37)11100111 LDB IND (E) <[newline]> (38)10100011 JPO (A) <[newline]> (39)00110110 JP (3) <[newline]> (3A)00000001 LDA DIR (0) <[newline]> (3B)00000010 LDB DIR (0) <[newline]> (3C)00100110 JP (2) <[newline]> (3D) - (3F) BLANK ```
sybergoosejr#8256: i made a monster program. kind of 2 in one.  except for 2 bytes the entire lower board is ram. on boot i jump to 0 and the 2 bytes of rom jump to the copy program that lives on the middle 2 boards and is 33 bytes long. it will copy the fib program that is stored on the top layer (11 bytes) to the ram on the lower layer then jump to ram and run the fib program.  basically a fancy boot loader!
jaalte#8572: this one converts a signal from a data pillar 3 bytes tall, 2 bytes wide, with an extra 6 control bits on top, into two sets of 3 bytes with 3 control bits each that could plug into smaller modules, and pass data through to the display
jaalte#8572: made it way easier to build this cause i could just focus on one module at a time and copy/pasting in new versions of modules whenever i updated them
jaalte#8572: i made a wiring standard for bytes the other day cause it was getting really messy trying to do it horizontally in a neat way <[newline]>  <[newline]> it centers all the sockets inbetween two tiles, and they're able to connect even if the sockets are upside down on the next wire <[newline]> they're elevated 1 tile above their base to leave room for wires, and they sit on 2 flat boards so you can adjust the height by just picking it up at a different spot <[newline]> bottom bit is significant in this one, indicated by it being flush with a tile line while the top one has an extra spot <[newline]> ive been designing all my circuits as little plug-and-play modules that do work on these bytes, and a bunch of adapters i can just copy paste into the line
RyanT#1426: Fibonacci on my CPU
‚ñàhamster godoy#8888: 4-bit rom, but it's able to have 64 instructions instead of just 16 with bank switching
‚ñàhamster godoy#8888: 
jaalte#8572: thx
ThePiGuy24#0369: enter `server "simulation.rate rate"` in the console to set the tickrate (replacing `rate` with the desired tickrate)
jaalte#8572: oh not in that screenshot tho, it's about a 50/50, so it might be every 3 ticks, so 10fps at 30tps <[newline]>  <[newline]>  <[newline]> btw is there a way to change tickrate to lower it so i can test?
jaalte#8572: it's fast enough that the 1 tick delay of the d latches in the frame buffers lets me take a screenshot of the next frame and the current frame at the same time
jaalte#8572: it updates every other tick as far as i can tell, do you know a good way to test that?
ThePiGuy24#0369: 15 fps at what tickrate though?
jaalte#8572: gl feeding this thing meaningful frames that fast tho, a giant array of those frame buffers might be able to run a pre-made animation
jaalte#8572: 
jaalte#8572: made an 8x8 rgb display that can update 15 times per second
totobono4#5551: 
CrispyPin#1149: now make it 4x4 and suffer :)
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: we need button lamp
totobono4#5551: Made a new one but 5 by 5 and faster :3 (and waaaaay smaller than my old one)
Chime#3134: 
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: 1+8.7 Fixed point multipliers
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: im making multipliers with the output format 1+8.7 fixed point
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: mult with 16 bit in and 16bit output on the left <[newline]> mult with 16 bit in and 32bit output on the right <[newline]>  <[newline]> huge size decrease
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: 3 tick sync 16bit RELAY-LESS 2s complementer
blane1257#8086: adder
RyanT#1426: Full QWERTY Keyboard (not functional yet, just visual)
sybergoosejr#8256: see <#924249932326662144>
MS#5409: Oh i named the switches but i couldn't figure out what the  2nd and 4th from the right are (they do hold the data there when you remove the input but don't save it)
sybergoosejr#8256: its ok it is ment to be 8 bit
MS#5409: Ah ok i maybe shuffled some of the wires bc i moved it from the bugged board
sybergoosejr#8256: control lines. the 16 bit data is actually 2 data bus meant for an alu but i got stuck when i could not rember how to make a 2 tick ica. the rest of it is basicly 2 registers. (A, B) 8 bit main bus
MS#5409: rn its `???`, `Write (0-7)`, `???`, `Write (8-15)`
MS#5409: <@!247449046615064577> what exactly are the right 4 switches for?
Chime#3134: steam is halping
NxthingbutV0id#1939: massive 16 bit multiplier!
commander of the pandas#1576: Just rotating some wires :-)
commander of the pandas#1576: 
Ryan#9918: OH lmao
GHXX#9078: ... moderators deleted it of course, so that nobody clicks it
Ryan#9918: I don't see one?
GHXX#9078: a classic free-nitroscam link
Ryan#9918: What link?
GHXX#9078: to everyone else: obviously do not click this link
Ryan#9918: 8bit multiplier, pretty quick too!
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: multipliers and stuff
blane1257#8086: serial com
ùîóùî•ùî≤ùî´ùî°ùî¢ùîØ#2420: Now that I think of it, it's similar to SPI but it only has MOSI (Data on mine) as data pin and chip select is inverted (STO on mine). You can send data to every slave on the net, but they only output it if you set its STO pin HIGH at the end of the message (can send the same data to multiple slaves at the same time too)
ùîóùî•ùî≤ùî´ùî°ùî¢ùîØ#2420: I've just realised that MVB and LVB are reversed. It starts on the LVB actually
ùîóùî•ùî≤ùî´ùî°ùî¢ùîØ#2420: In case you want to know how it works, I made this chronograph in AutoCAD so you can try to build it by yourself too. Note that this circuit doesn't use delayers, so it works really fast. I hope you like it
ùîóùî•ùî≤ùî´ùî°ùî¢ùîØ#2420: I made a 3 wires serial communication (based on the Nintendo NES controller protocol). At 1k tick rate, it's indistinguishable from instantaneous parallel but it has less wires
Sekoia#3968: what the f*ck
HuntaBadday#3556: 256 Bytes of delay line memory
totobono4#5551: Here is it, with his clock/impulse/reset at the exact same size.
totobono4#5551: 4 by 4 counter element with a reset feature (lol)
MS#5409: hmm slightly underestimated the size
TheCodec#2261: Still has some noise for some reason and of course it's very pixelated due to the display limitation and roundoff errors
TheCodec#2261: First attempt at a mandelbrot fractal renderer. The left side is the output (using the display from the cheese util mod) and on the right is the actual part of the fractal that is supposed to get rendered.
MS#5409: i cant get it to stack any higher for some reason <[newline]> does anyone have sugestions?
MS#5409: üíã
drawcoco#9558: https://tenor.com/view/rock-and-roll-classic-kiss-gif-15360735
Lim√≥n#7879: kiss üò≥ like kisses üíã
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: the engineering KISS principle hehehehe
SPECTRE#5183: Yeah I think I am misusing the term slightly. There is filtering happening in the system using AND gates so I think it is some form of signal processing, most of the filtering of character selection is happening else where but the displaying of those characters and in which display slot is being processed on the stackable module
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: i think you're mis-using the term signal processor.  <[newline]>  <[newline]> are you doing any of the following: convolution/FMA/filtering ?(https://en.wikipedia.org/wiki/Digital_signal_processor)  <[newline]> If you aren't its really jus a  display. nothing wrong with that, just no need to try to define it as something it isnt :P <[newline]>  <[newline]> Nice display for a word processor.
SPECTRE#5183: its more of a signal processor
SPECTRE#5183: ye its not really a gpu
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: very cool but id refrain from putting the GPU acronym in there
SPECTRE#5183: lets just say... wiring each letter to each permutation of and gates is going to be annoying on the display segements.
SPECTRE#5183: this is the stackable "GPU + VRAM + Display" that I run with a built-in refresh system comprised of 2 inverters reseting the d-latch via a switch on the control panel.
SPECTRE#5183: a WIP of my screen with 17 slots that displays all 26 letters of the alphabet plus some more.
Deleted User#0000: The useless "circuit" getting used.
Dragon Lord#6944: 3x3 (1x1 pixel) tileable row serialized display
NxthingbutV0id#1939: cpu parts in boxes for organizing
totobono4#5551: 
DjSapsan#4530: <@!91393712646553600> why it looks like this
NxthingbutV0id#1939: Cpu
Ryan#9918: WIP 8bit computer I'm making with friends. All pieces are built to be modular
sybergoosejr#8256: AIY 1.8 is now out and ready for download! BARE version https://logicworld.net/view/ctn-ab19ca39 with prebuilt test CPU https://logicworld.net/view/ctn-1769ad2f
C4io#2688: 2 tick RAM and ALU for my new CPU
C4io#2688: My first CPU, it's 16 ticks
Deleted User#0000: Yeah!
DeadlyRAPTR#1916: Heres my 8bit sequential divider, it uses 1 instant carry subtractor and is run from a 5/1 clock so can do a single division in 54 ticks (its the bit in the middle of the picture)
commander of the pandas#1576: So it runs on a clock of 22 ticks and has a 1/16 chance of turning itself back off each cycle?
Deleted User#0000: But it will be anything else than useless. It's my identifier!
Deleted User#0000: I've built a useless"circuit".
GUMMYCAT#6001: improved memory. starting to have glitches when cloning things too many times
Lim√≥n#7879: that's a really cool display
Chime#3134: operation C is A + A + C, so 30C nocarry, no logic = 6... I still need to make the 74182 so they can chain together faster, but ext P/G is working at least.  Also sorta proud of the nice display characters with auto edge detect and leading zero elimination (configurable)
Chime#3134: 74181-style 4bitslice ALU working~
ieee 802.11ac#6337: was bored so i made a distorted guitar note sweep
GUMMYCAT#6001: 8 bytes of terrible memory
Saltypretzel#0321: ~~make it die accurate~~
katkosmos#6502: Working on recreating my MOS 6502 recreation since I lost the world it was being built in (rip my server). <[newline]>  <[newline]> Here's a bidirectional stackable bus design allowing for bus widths of multiples of 4, supporting pull down. Also ANDs values that are output to the bus at the same time. <[newline]> (E.g. two registers, storing `0x57` and `0x23`, being output to the bus at the same time would result in the bus containing `0x03`). <[newline]>  <[newline]> This behavior is extremely important as it's what happens within the MOS 6502's internal buses. <[newline]>  <[newline]> I plan to build out all of the components needed for the 6502 recreation before I actually begin building it, that way I can properly structure the layout and hopefully end up with a much nicer looking build than the spaghetti that was gonna be my previous one.
GUMMYCAT#6001: getting more used constructing things, heres a 4bit decoder. wil be used with ram
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: works on a 4t clock at 25% DC <[newline]> aka 1t on 3t off
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: sync up/down counter with branching
GUMMYCAT#6001: expanded to 8 bit
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: 
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: building a line drawer <[newline]> done this part so far
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: 8 bit signed compare
‚õÑgravitowl‚õÑ#0001: yes, this is higher quality grass than i have outside
GUMMYCAT#6001: fancy
‚õÑgravitowl‚õÑ#0001: i have high quality grass
GUMMYCAT#6001: yep, no money
Lim√≥n#7879: the grass be, is this tung
GUMMYCAT#6001: 4bit adder with registers, 3 function
Lim√≥n#7879: yeah probably üòî
blane1257#8086: that feels like mod material to me
Dragon Lord#6944: I think I put a request for this on the bug tracker/feature requester...
HomelikeBrick42#1173: ||and compacting components into a block||
BigMintyMitch#1620: This is why we need bus wires üíÄ
circuitgamer77#0377: Yes
Vinyl Boot Maven of Shade#1858: One-tick CPU? As in an instruction every tick?
NxthingbutV0id#1939: if youre wondering about the song, its Nostalgic Blood of the East - Touhou 8
NxthingbutV0id#1939: i got distracted and did a little music test (bad quality because no nitro)
circuitgamer77#0377: Improved RAM for my one-tick CPU - Now supports dual-read, so data can be read while another instruction is being read at the same time.  Both manual-addressing and auto-addressing shown here.
blane1257#8086: alternative cursed mode of operation: always leave halt on, but use jump to jump to the current address + 1
circuitgamer77#0377: The first half adder kind of acts like the clock, but the way it works means it's not really a "clock" like most people use.
Vinyl Boot Maven of Shade#1858: Um... hello.
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: hi vinyl
Vinyl Boot Maven of Shade#1858: Per tick counter?
blane1257#8086: so its sort of like it has an internal 1-tick clock incrementing it, and the HLT is really more like a "count-enable-low"
circuitgamer77#0377: There is no clock with this because it's 1 tick per value, which means I can't just halt the clock.
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: uhm, this seems over engineered, halting is just an and gate with the clock
circuitgamer77#0377: Switch is halt, button is jump.
circuitgamer77#0377: Much better :)
circuitgamer77#0377: I got it to work - sometimes it's a good idea to restart from scratch :)  I just swapped the inputs to the first half adder, and now it's fine!  Now to rewire it to reduce components and size :)
circuitgamer77#0377: I had an idea - I could have a part of the jump instruction calculate the second value of the program counter ahead of time, then switch to that one tick after jumping.  I would need a bit more logic for when the jump instruction is immediately followed by another jump instruction, but if I have that it could work :)
circuitgamer77#0377: I can lock it in place with a switch too, so I can check a specific part of the signal.
sybergoosejr#8256: The oscilloscope is cool
circuitgamer77#0377: The first bit is actually fine, it's the rest of the bits that are a problem.
circuitgamer77#0377: Found a possible cause, no clue how to fix it yet...
circuitgamer77#0377: Still stuck, made a pair of oscilloscopes to help debugging...
circuitgamer77#0377: That's way harder with this design then you might think - halting is harder than continued execution.
HomelikeBrick42#1173: or it could detect that its a non-even jump and just consume 2 cycles?
circuitgamer77#0377: I'm trying to avoid as many limitations as possible...
HomelikeBrick42#1173: you could say that jumps/instructions in your cpu require 2 byte alignment?
circuitgamer77#0377: 
circuitgamer77#0377: Well, now I can jump to any multiple of 2 no problem, but if I want to jump to an odd number it holds the number for 2 ticks, which would make the processor read the same instruction twice in a row...
Lim√≥n#7879: 64 bit register
‚õÑgravitowl‚õÑ#0001: ooh
Sekoia#3968: "seven segment"
‚õÑgravitowl‚õÑ#0001: whats sevseg
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: Display
Verlio_H#0201: ‚àÇ
RyanT#1426: I was wondering what that was
Lim√≥n#7879: YOU MADE ME JUST REALIZE THAT THE 6 IS WRONG üò≠
CrispyPin#1149: √∞F
Sekoia#3968: trans sevseg <[newline]>  <[newline]> trans sevseg
Lim√≥n#7879: 
Reese4221#8317: https://logicworld.net/view/ctn-07b7ceb2
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: why is your nand gate double inverted?
Lim√≥n#7879: this is what Jimmy want's NOR only logic
blane1257#8086: register
Lim√≥n#7879: 32 bit register
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: intelliGEM parts
Lim√≥n#7879: 1 wide tflipflop
Ryan#9918: Nothing special but I made and designed it after being awake for almost 24 hours. 16b ram, with x and y addressing. Bulky as all hell so I'm reworking it currently while I have *all* of my mental senses with me and I'm not in some weird fever dream.
sybergoosejr#8256: Instruction decode/rom is probably one of the more complex parts of the cpu.
RyanT#1426: Introducing.... The all new RT-821D1 8-Bit CPU! It's only 32 x 64 x 13 tiles big (32x64x12.5 excluding the bottom circuit board). Coming to you... Sometime after I have access to the design document to wire up the instruction decoder on Sunday ... oops
sparks#0687: 512 Bytes of RAM! Different design, might be smaller?
RIVAL | Quent#0001: I feel like my RAM module is (almost) as small as it possible could be, at least footprint-wise. Anyone know of anything smaller? This doesn't have the addressing hooked up yet, but that's a pretty negligible effect on the footprint compared to the ram units
Lim√≥n#7879: small cpu
cabral#9547: how
blane1257#8086: FPGA nonsense
blane1257#8086: my logic cell is pretty much a direct copy of this one illustrated in the FPGA wikipedia page lol
blane1257#8086: in the center is a logic cell, and all those big blocks with loads of d flip-flops around it are programmable interconnects.. its very big lol
blane1257#8086: fpga mayhaps?
circuitgamer77#0377: Tiny Turing machine
circuitgamer77#0377: 128 instructions
Lim√≥n#7879: large
circuitgamer77#0377: This is a pretty angle of the ROM...
circuitgamer77#0377: Here's a program written in the Turing machine emulator site I shared before that calculates Fibonacci, written in a way that can be directly ported to the Turing machine I built in Logic World.  http://morphett.info/turing/?6a86dc176f934eec2689e11eadf81690
circuitgamer77#0377: Turing machine, with and without memory, plus instruction layout.  Designed based on http://morphett.info/turing/.  Actually runs pretty fast, it's just an inefficient processor design.  The processor itself is tiny though :)  And it's mostly just wires :)
Vinyl Boot Maven of Shade#1858: Got some Binary to BCD stuff working. The tower on the right is the same as the massive array behind it, except done in a loop. 32 bit integer to BCD converter. The tower on the left is Binary fraction to BCD converter. Planning on making some floating point stuff.
Sekoia#3968: *finally* completed this. Quite happy with the compression here, it's 2 bytes of ram in an 8x<something>x2 (WxDxH), which I'll tile 4 times to end up with an 8x<something>x8 display driver
commander of the pandas#1576: If the pulses you're sending are 1 tick anyway then that makes it a 1 tick throughput which is very convienient this could be useful in certain cases where you want the output to be inverted and don't carry about carry delay. The idea still stands. All this is is a chain of TFF's
commander of the pandas#1576: It functions exactly like a looping RCA. But it is not that. it has 2 tick throughput and 2 tick carry. Oh and it's inverted output by default...
commander of the pandas#1576: 
circuitgamer77#0377: Here's my currently not working 1 tick program counter, which counts but can't be kept stable while setting:
Lim√≥n#7879: Small cpu üò≥ 35x55x9 (L*W\*H)
circuitgamer77#0377: It's so compact, it's invisible!
WhyNot?#2534: thats an amazing alu
Nik#1011: best ALU I've built yet, part of a CPU project I'm working on with someone üòÑ
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: 1 tick sync decoder, 2wide per cell
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: program counter with branch/jumping done. 4tick loop <[newline]> *edit I just took out the relay in the bottom left corner, and now it is relay-less! :D
drawcoco#9558: of course <:bobby_ok:692790276623958087>
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: vertical <:woke:796822508148883486>
drawcoco#9558: 8 bit fast multiplier
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: 2 tick synced, combinational incrementer. (put in 7, get 7 out, tell it to increment and you get 8 with no ripple) <[newline]>  <[newline]> thank god for multi wire placement, it took about 30 seconds to make
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: cleaned up the inputs
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: i split my alu into arithmetic ops on the left and logic ops on the right, do you guys like how i implemented all logic gates? <a:DuckDance:830226039103684638>  i think its a pretty neat way
parallacks#7542: Made a quick module to test all 512 registers in my RAM. Wanted to make sure things are wired up properly before expanding and hooking it up to my CPU
TBS-Frain_Breeze#0771: for a school project, I made a basic 12-bit CPU. it's not done yet, but the primary goal was to calculate Fibonacci, and it does that perfectly fine.
blane1257#8086: OH. the game. right.
Default Cube#7530: WIP battleship
parallacks#7542: I refactored my RAM. I removed a bunch of unneeded components and cut the file size in half.
blane1257#8086: small cpu
Default Cube#7530: crude 7-seg 0-F driver
HomelikeSquid65#8653: The New monitor for all your drawing needs Buy yours today for only NOTHING https://logicworld.net/view/ctn-fd390935
potato lord#1969: 2 tick ALU
Lim√≥n#7879: small cpu (I think it's a cpu)
Reese4221#8317: https://logicworld.net/view/ctn-aa44a5a5 the RGPC2 is now available in stores!
Reese4221#8317: Coming soon to a LW near you the RGPC2
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: boxed ALU, 4 ticks. ADD, ADD VECTOR, SUBTRACT, ABSOLUTEVAL(B), ALL LOGIC OPS, SLL, SRL , SRA
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: these 2 builds do 3 barrel shifting functions <[newline]> SLL: shift left logical <[newline]> SRL: shift right logical <[newline]> SRA: shift right arithmetic <[newline]>  <[newline]> 2Tick latency, 2tick control
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: instant thruput, 2 tick control 32bit up barrelshifter
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: putting my 4 tick ALU in a box
DeadlyRAPTR#1916: finally the display is finished! appalling space efficiency (39squares^3 per bit) but the data fits in a 1x1x39 space (in 5x5 chunks so 5x5x39 for 25bits). There is a total of 1250 (50x25) pixels with 1 bit colour (black/white)
Sekoia#3968: shifts registers
circuitgamer77#0377: Updated version - I had some wires misplaced, but they're fixed now.
circuitgamer77#0377: This is a mess and I love it :)  Extremely fast shift register with two versions of every variation of shift operation, allowing for full optimization in it's usage by a 1 tick CPU.  The buffers on the input are the instant encoding for the internal control signals for each operation.  There's also instant read, of course.  I just don't have it wired on the same input panel.
Deleted User#0000: Cool!
WhyNot?#2534: a (mostly) working text editor. some issues with the cursor to the right and only l and w are in the letters right now
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: 9x2x3, 3 tick sync ica. could be a lot smaller still i bet
DjSapsan#4530: cache
101#1688: 256 byte 4 way set associative instruction cache, von neumann here we come!
DeadlyRAPTR#1916: finally managed to make a 25x50 display with video memory that fits within the 1x1 space (5x5 modules stacked) - no decoders yet tho
sybergoosejr#8256: per a sugestion i updated some AIY boards to be tile able  so you can easily combine them to be 16 or more bit functions.
sybergoosejr#8256: AIY fib in 13 bytes
drawcoco#9558: from front to back, invert A and B, Carry-In, Flood-Carry
circuitgamer77#0377: New version of auto-addressable RAM.  This model is optimized for speed, which means the input timings are a little weird to allow for the fastest possible operation.  This can be driven at one operation per tick, as long as the inputs are timed correctly.  The new input would be given to the system before the last operation is completed, meaning it ends up processing several things in parallel.  16 bit address, 32 bit data.  Timings below:
NxthingbutV0id#1939: What do the switches on the left do?
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: Pog
drawcoco#9558: getting good :p <[newline]> stackable block ALU
DADp#7461: analogggggg
101#1688: Also, the CPU runs happily at 48,000 ticks per second, which is pretty insane. Sure beats redstone üôÉ
101#1688: Built some more sensible (less huge) memory and wrote a test program for it: https://youtu.be/b4eLJjpo_L4
DjSapsan#4530: we need RGB wires for subpixels
Bumpy#3920: why use displays when you can use pegs?
circuitgamer77#0377: Updated now, moving to the thread.
circuitgamer77#0377: Correction - That compatablilty is not actually implemented yet, but I'm working on it now.
circuitgamer77#0377: Auto-assigning address version finished - figures out it's own address when connected to a group of these or the manual address version.  The compatibility with the manual version allows the user to break a block of memory into different locations in address space by just swapping out the first component in the block with the manual version.
circuitgamer77#0377: Back to simple circuits, here's a 32 bit RAM component with 2 dwords of memory in it, using 16 bit addressing (the addresses are meant to be built as blocks, so the other 16 would be for block select).  This one is more compact than the other ones I've been using (only 5 tiles wide instead of 6 or 7 previously, as well as slightly shorter and with a smaller address decoding circuit).  There are smaller designs, but this is pretty much the most optimal design I have come up with so far for my needs from it.  I'm about to add an address auto-calculator to it as well, just to make installing it at larger scales easier. <[newline]>  <[newline]> EDIT: This one only had 15 address bits - I miscounted.  It's fixed now.
sybergoosejr#8256: what this program is doing is loading A and B with random 4 bit numbers then saving the sum of A+B into memory. with a few jumps thrown in as well.
sybergoosejr#8256: you can go faster! this is aiy doing hardware counting!
Kai#9999: took so long to get the timing of this right...
sybergoosejr#8256: Update to my cpu (sorry no image) got save x function working (save sum to memory x) now to make my first 8 bit instruction soon. Load x into a where x is a memory address. Thinking it will have to be a 2 byte instruction. As I want to support 256 ram spaces or more.
DeadlyRAPTR#1916: infinitely expandable cpu, just add more 'modules' and control lines and done, no movement of input/output things
GHXX#9078: whats that?
Lim√≥n#7879: 
sybergoosejr#8256: i decided to cahnge the layout as i determined i needed another register. added program register. updated the working instructions. now i can continue with direct save instruction. which to me will be intresting as ill have to do 2 ram accesses in a row for. (one to save to byte and one to fetch next instruction)
C4io#2688: LW discord!
Saltypretzel#0321: It has very basic envelopes
Saltypretzel#0321: oop I started a sound card like thing
NxthingbutV0id#1939: BCD
jackson535#1361: I have more to say about this in <#401255675264761868>
jackson535#1361: I'm thinking we should have 6 bit 49 key singer modules that act like cartridges and slot into a machine
jackson535#1361: once the board sharing and saving feature gets added, singer projects can go full throttle
sybergoosejr#8256: someone could build a rom to store midi and make a midi decoder üòÑ
Lim√≥n#7879: they are very annoying to place
jackson535#1361: I didn't mean that there were *no* singer builds, just that an overwhelmingly low percentage of the builds are related to something like singers
jackson535#1361: very cool
sybergoosejr#8256: <@!491262532917657600> my AIY soundcard and a purpose built  stackable sequencer.
sybergoosejr#8256: also AIY has a sound card. but best i have gotten it to is 4 tick note selection due to demuxer limitations using the AIY cards.
Zoey#7836: MK2 binary to decimal converter. This one has an 8 bit input and is pipelined.
Lim√≥n#7879: <@247449046615064577> made a manual programmable music thing <[newline]> infinite stackability
OopsieDoopsie#0412: I've made C418 Sweden, like first 20 seconds. Does this count? <:bobby_thinking:692790276938399835>
jackson535#1361: insert evil laugh here
jackson535#1361: you're all leaving the singer machine opportunities, `to me!` üî• üî• üòé üëå üî• üî•
jackson535#1361: where are the non-cpu-related builds <:megathink:797979154549178399>
Ecconia#4929: From binary to meme-ary. <[newline]> My second and slicker binary to decimal converter. <[newline]> With human readable temporary outputs. Will be used in my tutorial.
parallacks#7542: My 16-bit cpu. Implements the "Hack computer" instruction set from the nand2tetris project. This is my second time building it because I wasn't happy with the first iteration's size. Still needs to be thoroughly tested but initial results show that its wired up properly at least
GHXX#9078: i see, thanks
circuitgamer77#0377: You can also think about it as shifting in the top bit rather than shifting in nothing like you do with a normal shift.
Ecconia#4929: If you take a random bit value and shift it right as is the highest bit gets shifted down by one (along with the other bits), that is a logical shift. <[newline]> But now imagine that you have a signed-number there. Negative numbers have the highest bit set. If you apply a logical shift now, the number will suddenly appear positive. <[newline]> To solve this, we have arithmetic right shift. That will remember if the highest bit was set, and after shifting down restore the old state. That way you preserve the sign of the number.
Sekoia#3968: The sign bit is treated differently in both: <[newline]> https://en.wikipedia.org/wiki/Bitwise_operation#Bit_shifts
GHXX#9078: what's the difference between arithmetic rsh and rsh?
circuitgamer77#0377: New design 16 bit general purpose register. <[newline]> Operations: <[newline]> -Write <[newline]> -Read <[newline]> -Clear <[newline]> -Shift Left <[newline]> -Shift Right <[newline]> -Rotate Left <[newline]> -Rotate Right <[newline]> -Arithmetic Shift (right) <[newline]>  <[newline]> All operations complete in 3 ticks or less. <[newline]> No sockets because this is designed to be embedded in a new purpose-built CPU experiment and sockets would increase the size by a tile, and could have floating point errors.  All required connections are on the front edge. <[newline]> Most significant bit is on the control input side due to the control signal needed for arithmetic shift being on that side.
Deleted User#0000: rofl
00asdf#7469: new and improved 256 bytes of ram. roughly doubled the density with this iteration.
Lim√≥n#7879: display
CrispyPin#1149: for a second i thought that was logic world wire art lol
Michael#8718: There's you tube video explaining some tings.  It will be in my playlist, sometime - https://www.youtube.com/playlist?list=PLBJP7W0Si5s-n3ebPOJOzhCYWLWjpajc7
Michael#8718: Looping multiplier for my 5 bit CPU.  It's a mini CPU turned on with an enable line, and synced via simply disabling my CPU clock for a long time.
Michael#8718: https://ibb.co/LrJznB0
Keklord#1759: 256 ram addresses with 32-bits each. 8 32-bit registers. And a display to see the values in decimal. A solid foundation for me to build further upon
circuitgamer77#0377: That's part of the reason that it's in a separate world...  The first reason is that it's a standalone project, the second is lag reduction.
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: might turn into a space heater <:LMAO:827636055519526942>
circuitgamer77#0377: Absolutely :)  This is not in any way an efficient design, I'm just experimenting.  My PC is pretty good, so I think this should be fine...
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: is that going to lag if its looping?
circuitgamer77#0377: 256 2 byte word serial memory loop for my serial CPU experiment:
OopsieDoopsie#0412: https://www.youtube.com/watch?v=lMmdqdFPUgQ
OopsieDoopsie#0412: FP16 display (IEEE 754-2008 16bit)
Deleted User#0000: This reminds me on the inner room of Hal9000 (Space Odysee 2001).
Keklord#1759: my 32-bit binary to 40-bit BCD is completed
blane1257#8086: modular cpu counting fibonacci
parallacks#7542: ICA
parallacks#7542: Variable clock
GHXX#9078: and here is a counter if one needs it, likely cant get smaller than that üòÇ
101#1688: Memory now attached to CPU and working! https://youtu.be/0yJPlxRDl9U
GHXX#9078: Clock signal generator which outputs a 1-long pulse either every 2 ticks (normal mode), or every 10 or 100 ticks, or for super in depth debugging, single ticks
GHXX#9078: corresponding 256 byte ram üôÇ
00asdf#7469: little debug room for our 256byte ram module <@!109262887310065664>
Satan#9850: nice
GHXX#9078: 128 Bytes of shift-register memory, gonna throw another layer ontop to have 256 bytes üòõ
Keklord#1759: 256 Bytes of ram
Hugin#2596: I didn't see anyone post this type of thing, but knowing this type of community I am not even close to being the first one exploring this idea <[newline]> anyways <[newline]> I don't know how to fix this touch display thing(idk what to call it) <[newline]> yes you can click buttons through wires, but I don't think you can disable outline thickness <[newline]> it's 32x32, this type of thing was first created by DjSapsan#4530 (this msg is a reply to his build) <[newline]> I don't have much spare time and motivation rn so feel free to make it work - can publish world files if anyone's interested, react with üìÇ and I will publish it on lw.net(rn I am to tired lmao)
OopsieDoopsie#0412: https://www.youtube.com/watch?v=k9shCNameLo i cry everytiem
Theix#5229: Well since you guys were talking about ICA's yesterday, I thought I would try to compact the design down. And I must say I', pretty happy with how it turned out. Although I would have liked to use sockets, instead of connecting the carry signals by hand, but no space for that.
OopsieDoopsie#0412: https://www.youtube.com/watch?v=R-y8S7vShVg
NxthingbutV0id#1939: 512 bytes of ram finally done
NxthingbutV0id#1939: My old RCA (right) vs my new ICA (left)
blane1257#8086: motherboard is complete i think.. i got a little messy stacking those decoders, i might redo that later
OopsieDoopsie#0412: my *i guess* computer
sybergoosejr#8256: my AIY system now jumps around. also improved memory/rom speeds.
Theix#5229: Finally finished with my horribly slow computer, with absolute trash timing, but at least it works. And I'm pretty happy about it, since it's my first ever completed computer in any game
blane1257#8086: working on a highly modular CPU design..
TheWildJarvi„ÄäTHE SEMI SEER„Äã#1337: not bad, i made this in TUNG ages ago so i bet you can heavily improve on the concept: https://youtu.be/iIMcy2ldpO4
Vinyl Boot Maven of Shade#1858: Finally made a screen and got Hello world working. <[newline]> https://youtu.be/eod_mKsTIjY
Keklord#1759: Not sure how compact this is for an 8-bit double dabble to 10-bit BCD converter, but it works. The right side is the output
OopsieDoopsie#0412: https://www.youtube.com/watch?v=FPDKUXqryOk <:bobby:628326527817220106>
Ecconia#4929: Into world from file
DeadlyRAPTR#1916: my newest multiplier - only one addition circuit with capacity for 8 bit multiplication to an 8 bit output (sort of wasted but i wanted things like 90*2)
sybergoosejr#8256: folks are getting into the Christmas theme already on my server üòÑ This is a musical present!
OopsieDoopsie#0412: https://www.youtube.com/watch?v=RrXNI1mjBDs <:bobby_joy:692808284331049040>
sybergoosejr#8256: 2 note sound card for AIY (requires the 2x16 demux board like the hex display)
Daimh#5870: BCD?
Keklord#1759: My 4-bit display that only goes up to 9. Should go up to 500+ soon
sybergoosejr#8256: Clock cards!
sybergoosejr#8256: ironed out timing bug in my instruction card.
OopsieDoopsie#0412: i've made instruction cards too, unfortunately i can't run them normaly cuz i can't fix my RAM timings :( <[newline]> left one is fibonacci card, right one resets RAM so i'll have A=1 and B=0 to start fibonacci count. They're modular (can increase amount of steps pretty much infinitely) and can control the entire system
sybergoosejr#8256: i feel proud üòÑ https://twitter.com/LogicWorldGame/status/1464498536570044417?s=20
OopsieDoopsie#0412: 
OopsieDoopsie#0412: its ridiculous how hard it was for me to beat synchronisation, but here's my RAM wooo<:bobby_joy:692808284331049040>
Sekoia#3968: 8-256 demux, 2-tick speed
Hugin#2596: [garbage - better version already exists] <[newline]> 4 bpp(16 colors) tileable display <[newline]> video/gif: <[newline]> 16x16 [256] pixels <[newline]> 512 tickrate <[newline]> changing color of whole display in one second giving 2ticks/pixel <[newline]> upper right 2 pixels are broken because data has no delay but pixel coordinates have(I fixed it by delaying data by 2 ticks, but was too lazy to record and export again)
NxthingbutV0id#1939: I would have sent an 8k screenshot but I don‚Äôt have nitro
NxthingbutV0id#1939: my current 16 bit pc progress, i just finished a 17 bit double dabble
Deleted User#0000: Understood
DanielGJ44#4557: I'm not going to make the judgement on whether or not that content is appropriate either, use your best judgment lol. Just shouldn't be in the main channel
DanielGJ44#4557: Hey, please keep this channel to builds please! Feel free to open a thread CrispyPin's build if you want to meme üòÑ
Deleted User#0000: looks more like this
101#1688: 2KB of byte addressable memory (untested), had to turn off shadows to get sensible performance üò¨
CrispyPin#1149: sundial
Sekoia#3968: instruction cards
sybergoosejr#8256: cool part is order of the instruction cards do not matter! everything is configured on the card
sybergoosejr#8256: what 12 instructions would look like.
sybergoosejr#8256: instruction card with options.
Sekoia#3968: 8-256 demux, using ANDs... so I can scrap it and replace it with a faster, more compact not/or demux build
sybergoosejr#8256: 
sybergoosejr#8256: CHALANGE! i got up to **18** within the rules. can someone do more? <[newline]> ```1.get as many wires through the hole as you can (wires must be isolated) <[newline]> 2.no new boards all other parts ok (stock no mods) <[newline]> 3.you can only place on green```
NxthingbutV0id#1939: Double Dabble
OopsieDoopsie#0412: So I've challenged myself to make as compact double dabble as possible. I'm pretty satisfied with the result
CrispyPin#1149: 2x2x58.5 read/write screen module with 4 pixels <[newline]> (can also have a single 2x2 pixel with 4 bits of colour, making it a bit shorter)
Reese4221#8317: i made a computer! i will release it in a few days after i add a few things and ensure its bug free
sybergoosejr#8256: new AIY board. 8 bit to 2x 16 demux. requires 10 demux cards.
sybergoosejr#8256: AIY computer hardwired to run Fibonacci. (current state on my server)
Aetias#6912: 2 bit tileable instant carry ALU with many possible operations (add, add with carry, subtract, subtract with carry, left/right shift by 1, and, nand, or, nor, xor, xnor, and more). I wanted to have 1 bit per tile, but XOR gates are 2 tiles wide, so I put two adders on top of each other lol
Lim√≥n#7879: 
Lim√≥n#7879: 
Lim√≥n#7879: 
Lim√≥n#7879: compact alu
parallacks#7542: Spent some time to compact my ALU that I'm using for the nand2Tetris project. I'm about to make the cpu so I figured it was a good time. I would say it was time very well spent.
Xasin#9114: >:3 <[newline]> Well, time to try that then
Lim√≥n#7879: Probably because I have settings on max
Xasin#9114: Thanks! <[newline]>  <[newline]> But I meant the shadows that are being cast
Lim√≥n#7879: Ctrl for standoff and if you mean the glow it's because of the bright colors
circuitgamer77#0377: No, but it doesn't really work...   Logic World does not blend colors at long distance.
Rack Smix#3697: is that a mod ?
circuitgamer77#0377: For the second question, use ctrl (or whatever you have bound to [mod]).  Allows fine placing of supported components.
Xasin#9114: Two small questions, if you don't mind :) <[newline]>  <[newline]> 1) How did you get the shader to look this nice! <[newline]> Maybe I missed a setting ^^ <[newline]>  <[newline]> 2) What button do I need to press to get the standoff centered.  <[newline]> Whenever I try to use them they try to align at the border of a circuit board, not in the center of it.
circuitgamer77#0377: A slight modification to add lights to indicate what part of the sequence is active.
circuitgamer77#0377: Modular drum sequencer, just has a bit of trouble with the game not always playing the notes when they are triggered...   Bug.  This one is configured for 4 instruments playing a sequence 4 pulses long, but can be expanded as needed.  Clock runs at 16 ticks per pulse, but that can also be changed.  Best experienced at a high tickrate, assuming the sounds are processed.
commander of the pandas#1576: Instant carry adder, pretty much the same thing as a ripple carry adder but the carry is propagated instantly due to the use of the relays
NxthingbutV0id#1939: What does Ica stand for?
Lim√≥n#7879: 2 Wide Tilable 2 Tick ICA
circuitgamer77#0377: Smallest CPU Challenge
circuitgamer77#0377: Pain...
HomelikeBrick42#1173: ~~rewrite logic world in a 1 bit per address turing machine~~
circuitgamer77#0377: Would that include or exclude memory?
circuitgamer77#0377: Basic Turing machine?  1 bit per address memory?
Broyojo#2667: we should totally make a smallest lw cpu challenge, in terms of cm^3
Xasin#9114: First ... What, half hour of Logic World? <[newline]> Felt appropriate to do this :>
_Mpcs#0525: My first CPU working üòÆ Based on the Ben Eaters series. It can be smaller/faster but i'm happy to see it working finally! (a video of it counting up by 2)https://streamable.com/rxvhla
OopsieDoopsie#0412: https://www.youtube.com/watch?v=kqXmurdtGI8 <:bobby_thinking:692790276938399835>
Artin_#3197: this 64 byte memory sytem <[newline]> (can be expanded to 256 bytes) <[newline]> https://logicworld.net/view/ctn-d7099d6c
OopsieDoopsie#0412: TIL that you need nothing more complicated than 4:16 demux to build 7 segment <:bobby_shocked:692790277076680834> <[newline]> damn it took me 9 years to realise what's hexademical for
Jimmy#8080: rotation calculator
Deleted User#0000: White noise! Welcome back CRT! <:LogicWorld:568323807731908608>
circuitgamer77#0377: Here's an 8 bit point rotation calculator ((x,y) is the point to rotate, and (a,b) is the point to rotate around).  It rotates by 90 degrees in one direction (I need to check which direction is is).  Have not tested it , but the logic is correct.  The only error that should be able to exist still is if I missed a wire somewhere.
Lim√≥n#7879: Its counting down
circuitgamer77#0377: 1 of 7 random number generator (assuming a small amount of delay between value requests).  Button input is value request, switch is a disable signal (it relies on a fast clock, so a way to disable it is a nice convenience).  Also automatically resets itself to a valid state when cloned - it relies on a latch always being set, so that being lost while cloning it could break it.
circuitgamer77#0377: This works for the chip I needed, if I wasn't worried about holding the signal while processing happens...  Unfortunately, I need that holding feature...
DADp#7461: no
CrispyPin#1149: Good news guys, I finally found a use for fine rotating chubby sockets!
Vinyl Boot Maven of Shade#1858: Here's the backbuffer, or at least as much as I've made
Vinyl Boot Maven of Shade#1858: Was working on a backbuffer for this and realized it's a bit much, so I made a screen to see how big it would be.
Chime#3134: Welcome to Thunderdome.  Two wires enter, one wire leaves.
Ecconia#4929: 1.333units
conorpo#1572: supports ADD, SUB, OR, AND, NOR, and SLT. Without Overflow, Carry Out, and "Zero" outputs.
conorpo#1572: 
conorpo#1572: 6 function ALU with instant carry, 1.333 wide (thinnest possible, because of the way XOR's are structured), 32 bits in only 43 cells
sybergoosejr#8256: AIY 3 register/ADD,SUBTRACT/16byte ram setup.
Default Cube#7530: 4-bit ALU (74181 series logic)
GooseFairy#6680: Math Board
sybergoosejr#8256: combined math board.
sybergoosejr#8256: im currently reworking the sub and add board into just 1 ALU board that will have the function of what ever cards you load it with.
sybergoosejr#8256: similar to what i kind of made for AIY. i just built modifier cards and a subtractor board.
Default Cube#7530: 32 bit AND operation (Honestly more pretty than useful)
HomelikeBrick42#1173: me and my brother made a 3 bit 8x8 rgb screen
The_Circuit_Guy2828#5138: nice
Default Cube#7530: 8-bit Binary Shifter with adjustable direction
Artin_#3197: my t flip flop circuit <[newline]> i tried to make it very compact
Vinyl Boot Maven of Shade#1858: 1 bit per 17.21875 blocks, for 8 bit words.
Vinyl Boot Maven of Shade#1858: My most compact memory yet. 1 word per 4x3.625 squares.
Lim√≥n#7879: Logic world 2026
FunCoding‚Ä†·µÄÀ£#1309: I made a city what you guys think about it
Vinyl Boot Maven of Shade#1858: World per tick data transfer signal generator.
Artin_#3197: my amazingly bad 16 byte (can be expanded to 256) storage system <[newline]> https://imgur.com/jsNOdnh
km#1297: Love it
Ecconia#4929: Data collision that bad boy
Daimh#5870: Little canvas drawing thing! :D
circuitgamer77#0377: Pretty much?  Detector and resolver.
sybergoosejr#8256: Collision detector?
circuitgamer77#0377: This is super messy and needs to be compacted/simplified, but this is a circuit that makes sure that if two components try to do something at the same time, they will negotiate who goes first.  This is to fix a problem I was running into where if two circuits tried to do something in the same tick, they wouldn't be able to detect that there were conflicting signals.  I could process signals that were 2 ticks apart,  but not closer.  So I made this.   Requires 1 wire per connected circuit.
sybergoosejr#8256: AIY 1.2 is now out. a lot more you can do with it! https://logicworld.net/view/ctn-bc299a7d
sybergoosejr#8256: testing adder with AIY components.
poopnugget142#3106: Beautiful Ram in 4x4 grid
sybergoosejr#8256: AIY adder board with 1 bit adder card.
Jimmy#8080: scrolling wall oracle
Chime#3134: scrolling wall oracle, what is your wisdom?  ... yeah okay.
CrispyPin#1149: 256 to 8 encoder
Mystyc Cheez#4812: A 256 to 8 encoder. Converts a location in a 256 bit ring counter to an 8 bit number. This is a much faster counter than a traditional counter using flip flops. The downside is that it is a colossal structure that was very difficult for me to think of how to make it.
Grandiose Lights#2727: 8 bit demux (with a side effect of making my computer fan vtol capable). <[newline]> I have improved it‚Äôs speed a few times since this video was recorded. <[newline]> Oh yes it is also modular because we love modular.
VigilanteHobo#1873: My minicomputer, not fully tested and haven't build program memory + clock generator. instructions seem to work fine though.
Dragon Lord#6944: sawng
Vinyl Boot Maven of Shade#1858: My first ever Von Neuman CISC. 8 bit, 56 variable cycle instructions. 8 tick period cycles. Still needs IO interface and instructions, and Multiply and Divide instructions. <[newline]> Leftmost: is Ram 128 bytes. Topmost: instruction decoder. Rightmost: Stack 32 bytes, Register file attached to it's front. <[newline]> Thing with chair: Programmer. On the right of that ALU. Above that, just below register file: Program counter. Just left of Register file: Instruction register and microinstruction counter. The isolated board near center: CPU Barrier
Satan#9850: Anyone remember this song? (unfinished)
DADp#7461: there goes the quick loading times üòß
Jimmy#8080: Mutli-POGGER
circuitgamer77#0377: I feel sorry for my computer...  It has to simulate all of this at high speed eventually.
circuitgamer77#0377: This is one address of the RAM it goes with (there should be a ton of these):
circuitgamer77#0377: This module specifically is the cache itself.
PseudoGoose#2841: > This is intended to allow the computer to read 32 word blocks of memory into the CPU's cache in one shot
RyanT#1426: whats this?
circuitgamer77#0377: Here's another angle:
circuitgamer77#0377: If I made an error anywhere, I won't know until the CPU tries to use that bit of memory.
circuitgamer77#0377: That's all the wires in...  This is chaos.  4 rows of 8 32 bit words input, connecting to 8 4 word distributer rows on top, connecting to 32 1 word registers, which are also connected through a switcher circuit to a second read/write bus.  This is intended to allow the computer to read 32 word blocks of memory into the CPU's cache in one shot, to free up the main RAM for other devices to access (like a GPU or networking processor).  I was originally planning to have it read 128 words at once, and I might still do that later, but I'm scared of how many wires that would require...  This mess of wires is about the size of half of my CPU, without even considering the actual RAM module.  Just the cache...
circuitgamer77#0377: Starting to get some interesting patterns...
circuitgamer77#0377: Well, a quarter of the wires are done...
circuitgamer77#0377: First time I'm running into max wire length problems while building...  This is gigantic!
Michael#8718: The reason to make a writable counter, was so I can "jump" to a given instruction step by writing to it.
Michael#8718: It's possible this could be made to work as normally read enabled, but I was hoping I could use it as is, to drive a multiplier logic board
Michael#8718: I believe this taught me that relays are not always the answer.  I had to carefully work with the timings so that it works for both Clk in, and write enable.  You have to enable read to read the data.  I learned about 20 ways how not to try to make a writable binary counter bit.
Michael#8718: https://ibb.co/LdgR870
Michael#8718: Been working on this for days, I admit.  I think this version works.  A writable binary counter bit.  There's a few components on the rear.
circuitgamer77#0377: It will load if I set the render distance to 30 before loading, it's just going to take a while...
DADp#7461: good luck loading your world now
circuitgamer77#0377: Now I need to design the other half - I need to be able to load this into a cache in one operation, or load from the cache to this.  Lots of wires...
circuitgamer77#0377: Now with addressing:
circuitgamer77#0377: Wait - my render distance was hiding some.  Here's the whole thing:
circuitgamer77#0377: Here's mk1 (32 words per address):
circuitgamer77#0377: Expected stats of the current goal (will be expanded soon): 1028 relays and d latches, 2056 sockets (plus a few), a bunch of boards (don't know the exact value).  And I intend to make this about 4 times bigger (4096 latches) to store 128 words in a single address in RAM.  What I'm currently using as RAM in my CPU will become a cache, and there will be a second cache to store the core program data.
circuitgamer77#0377: Danger: Sockets.  And this is only 1/16 if the end goal.  And that is just one tile of many.  This could be laggy and crash a lot...
101#1688: It lives! (Finally tracked down the last bug in the forwarding logic), now, time to go enjoy my Friday night like a normal human being üòâ
DjSapsan#4530: TV shop
sybergoosejr#8256: syber tv store is open! currently with 2 network types avalible. RTV and Syber TV
Zoey#7836: 8 bit multiplier with 16 bit output. 17 ticks to perform calculation
DjSapsan#4530: <@!282189238638739456> you can have only 4 not gates for the entire display üôÇ
zjobke#1742: and lastly, this is my tilable 7 segment display
zjobke#1742: The bottom layer is the decimal to binary converter (which I will be improving firstly), the layer above that is the bit memory for input A and B, the next layer is the adder with inverter for subtraction, the next layer is the multiplier, and the top layer is the double dabble algorithm.
zjobke#1742: I've been working on loose components since the game came out, thought it'd be nice to connect some of my components to build a simple calculator. Here's my 32 bit calculator, which supports addition, subtraction, and multiplication.
DjSapsan#4530: PC
GooseFairy#6680: A bit of an ugly duckling, but this is my 8 bit ICA ALU. Supports addition, subtraction and bitwise OR, XOR, AND, and bidirectional barrel shifting
Jimmy#8080: 
Jimmy#8080: Friendly reminder: top-level messages in <#901195561980543007> should almost always be an image or video! If you have a comment or question about a build, create a thread for it. For more general discussion, use <#401255675264761868> .
Daimh#5870: Wha tdoes one slice of this look like?
GooseFairy#6680: Made a tiny 1-wide tileable program counter, supports jumping to a given address <[newline]> https://i.gyazo.com/f977bc3ff7ffbec3bb55aedf26ef407b.mp4
circuitgamer77#0377: I need to take a brief break to let my brain reset...  I'm starting to have problems remembering details quickly.  Will continue in half an hour to a couple hours.
circuitgamer77#0377: Starting to get stutters...
circuitgamer77#0377: Just expanded my RAM to 128 words for my next project - simplified lambda calculus engine.
Broyojo#2667: logic world in logic world in logic world in ...
Verlio_H#0201: well depends how slow "super slow" is and how much cpuium and stuff you have
Broyojo#2667: yes but at super slow speed
HomelikeBrick42#1173: you already can make logic world in logic world because logic world is turing complete
circuitgamer77#0377: I think you could do it without mods, it would just take a LOT of space and a very powerful computer to run the top level Logic World.
Broyojo#2667: technically you should be able to make a mod that may be able to let you run logic world in logic world
HomelikeBrick42#1173: run logic world in logic world in logic world in logic world
Broyojo#2667: run logic world in logic world
HomelikeBrick42#1173: remake logic world on a cpu made in logic world
Cody McGuire#0711: https://tenor.com/view/hamster-shocked-afraid-gif-13368273
circuitgamer77#0377: Who'll be the first person to make a virtual machine in a CPU in Logic World?
JPM-Baroque Spaceship#6542: My house at Ryan's
Cody McGuire#0711: Dude the rate you are progressing is insane. Props to yah, keep up the great work. Hopefully I can crack out my first CPU over thanksgiving. If I can make memory big enough, we're going virtual üëÅÔ∏è „Ä∞Ô∏è üëÅÔ∏è
circuitgamer77#0377: And I doubled the amount of RAM :)  My next program needs a big stack :)  This is now 64 words of RAM.
circuitgamer77#0377: Here's the test program in RAM, by the way:
circuitgamer77#0377: (the new slice is the third after the gap on the right)
circuitgamer77#0377: I finished the jump to subroutine circuit!  The new components are one of the big slices and most of the chaos of wires in the bottom of the screenshot.  Now jumping to a subroutine is a bit safer with interrupts and a lot faster (it's in microcode instead of instructions).  It jumps to the address stored in the X register, so to jump you just store the location to jump to in X, and in the instruction set a 3 in address A and set the last flag bit high.  To return from a subroutine, just set a 3 in address A and everything else 0s.
waistlan[SFA, flyingfreak]#3857: an incomplete build I am working on <[newline]> https://youtu.be/tPnHxORAi0k
Satan#9850: https://youtu.be/ix0nV-Ll1Js
circuitgamer77#0377: I'm going to tweak my interrupt microcode to also be able to jump to an arbitrary subroutine...  It's possible to do that without a specific instruction, but it would be faster and neater if I just made an instruction for it.
circuitgamer77#0377: The part I added is the block of microcode instructions closest to me in this screenshot, as well as some sequencing circuitry on the left side.  To return from a subroutine, you just address internal component 3.  Nothing else in the instruction matters (although I should make this check after the conditional instruction check...)
circuitgamer77#0377: And now it can return from a subroutine (interrupts) in one instruction, so the case I mentioned is no longer a problem!  Here's the new test program and the part of the CPU I added:
circuitgamer77#0377: I need to add a return from interrupt instruction...  There's a moment with the current setup where if you trigger the interrupt it doesn't jump back to the previous location, and there's no way to avoid it.  I have a plan for how to implement that instruction, it's just a bit weird...
circuitgamer77#0377: Now both maksable and non-maskable interrupts are working :)  Still need to tweak a piece of the program though...
circuitgamer77#0377: Here's my test program for interrupts - Non-maskable interrupts work, but you have to make sure no interrupt happens while it returns from the interrupt.  This kind of program should be done with a normal, maskable interrupt but I'm missing one component for that test.
Satan#9850: https://youtu.be/b3cTq8zoCy0
HomelikeSquid65#8653: Just a simple pixel picker (for a screen)
circuitgamer77#0377: Here it is with it's expanded RAM and output unit :)
circuitgamer77#0377: If I go in VC for a bit, does anyone want to see it run a program?  I tuned the speed a bit so it runs decently fast.  I might be able to get the clock a touch shorter, but I don't want to risk it.  Current program is a RAM test that reads a value from an address, rotates the bits once, displays them, then copies the rotated version back into RAM.  That's on a loop until I manually stop it.
circuitgamer77#0377: Confirmed conditionals work!  I think that's every major component tested besides the interrupts, but those require a bit more RAM first :)  Here's my Fibonacci program in RAM:
circuitgamer77#0377: It works!   I am very excited :)
circuitgamer77#0377: Time to test Fibonacci!
circuitgamer77#0377: Fixed!
circuitgamer77#0377: I really made an error in my ALU...  I got some inputs scrambled somewhere and I don't know exactly where yet.
circuitgamer77#0377: I just noticed that my current method of jumping actually jumps to the address immediately following the one I give it instead of the one I give it...
circuitgamer77#0377: I don't know that acronym - I'll look it up.
Cody McGuire#0711: does it have a PIC yet?
circuitgamer77#0377: Just noticed that my ALU (or ACU in my case) is connected backwards...  The highest bits are connected to the lowest.
101#1688: Finally got some time to work on the CPU, here's the control unit after several iterations, so far I have a nop and a branch instruction and that's it, more to come üôÉ
circuitgamer77#0377: I've convinced myself - I'm adding it.
circuitgamer77#0377: It wouldn't be that hard to add, I just haven't yet.
circuitgamer77#0377: The hardest part of testing is putting the instructions in RAM, because I currently don't have a way to read or write from RAM manually...
circuitgamer77#0377: All I've tested so far fully is a blank instruction and a halt instruction, but all of the pieces work individually.
Jimmy#8080: It's beautiful!
Daimh#5870: <:monkaGiga:798606965605007451>
circuitgamer77#0377: My 32 bit CPU, now with interrupt handling complete!  None of the interrupt system has been tested yet, but this should hopefully be the full CPU complete!  I still need to expand the RAM, but I'm not too worried about that - I built that to be super easy :)
Jimmy#8080: tileable decoder
Cody McGuire#0711: Slimmer version of my concept tileable bin-to-one hot decoder. Could be useful for some applications but not many as each output adds a few ticks of delay.
Aetias#6912: I made a customizable decoder which tiles in two directions, both in number of inputs and in number of outputs
Jimmy#8080: image uploads
Mystyc Cheez#4812: 
64548#0351: yes
Lim√≥n#7879: The infinite numbers üò≥
DjSapsan#4530: yes, it's a decimal counter )
64548#0351: <@!268849031780761601> Do you see that my system that counts the infinite numbers?
Lim√≥n#7879: Translator should be translate, translator is a person who translates
DjSapsan#4530: me english is nightmare too so no worries
circuitgamer77#0377: I think he's translating from Portuguese, but his stream in vc was so low resolution that that's a bit of a guess.
circuitgamer77#0377: I think that's required for some people...  Not everyone knows English.
DjSapsan#4530: haha don't use google translator please
Lim√≥n#7879: Nuclei
64548#0351: she can tell infinite just extend the nuclei behind her to the side and the display together that when she arrives at number 9 she always resets at the hour haha
64548#0351: I did it now a little hahaha
64548#0351: My numbers accountant goes from 0 to 9999999999999999
circuitgamer77#0377: I normally play on 1000, but I've been slowly adjusting it down as I make more.
Nanoflower#8082: I doubt you're gonna need a render distance of 260 haha <[newline]> You could lower this down by a little notch to save yourself a few frames, if you wish of course
Cody McGuire#0711: 
Cody McGuire#0711: 
Cody McGuire#0711: 
Cody McGuire#0711: Concept tileable binary-to-one hot. With this, there is no need to "program" in each decoder, just stack as large as you'd like.
circuitgamer77#0377: ~40 fps, render distance 260, world contains about 1.5x the number of components as are in the shot.
circuitgamer77#0377: wait - found it
circuitgamer77#0377: How do I check?  It's quite smooth, but I have a pretty good PC.
Nanoflower#8082: how many frames is your game running at right now
circuitgamer77#0377: I'm pretty happy with it :)  It's in no way the fastest design, but I designed it to be as modular and adjustable as possible.   It's quite easy to swap out a register or choose a different internal address for a component, and you can change how the fetch/execute cycle works just by changing the control unit (the closest piece).
Daimh#5870: That looks sick
circuitgamer77#0377: CPU is up and working, minus exception handling.  That takes about doubling the size of the control unit, which I'll work on next.  (this still needs to be tested, but an unconditional halt instruction works correctly)
circuitgamer77#0377: And now that RAM is wired into its control logic in my CPU!  Time to expand :)
circuitgamer77#0377: Modular RAM, 32 bit data, 27 bit address, automatic address assigning, read&write.  (2 segments shown here) (the pair on the right is the ram, the other circuit is a different build)
Vinyl Boot Maven of Shade#1858: So, I have a design question. I'm making an 8bit pc with a little endian system. For addresses I'm using an 8bit segment and 8bit index register. My question is would I have an instruction like loadp, which loads an address for a variable, load the entire 16 bits lsb first like little endian, or segment then index as 2 separate 8 bit numbers?
Daimh#5870: Oh nevermind only index 3 was backwards, the rest works fine :)
Daimh#5870: Oh numbers are backwards <:7ACOSP_lmao:755810746310459432> But you get the point
Daimh#5870: While I dont think it is nearly as impressive as anything here I made my first little "build" which just stores numbers and reads it :) (The build itself is spaghetti heaven lol)
sybergoosejr#8256: <@!350975527324221451> you should add RTV into the TV store
jrnvnjk#1582: And everything is gone forever again
Zoey#7836: Binary to decimal converter
DjSapsan#4530: i need pistons in LW
Curze#4096: That reminds me of the time i made this clock in minecraft, but its a 24h clock  üòÑ
Lim√≥n#7879: tv
Lua Sucks#7243: okie
Ecconia#4929: Here is what my Discord cached.
Lua Sucks#7243: that page doesnt exist
Whippersnatch Pumpkinpatch#2008: It's big in the back lmao
Whippersnatch Pumpkinpatch#2008: Not nearly as big brain as yall's CPUs and computers but I made a clock
jrnvnjk#1582: Computer Hex Programmer (Since my instructionset uses 2 address spaces per instruction) active row in green, red is address part(of inactive), blue is the value part. Capable of programming my memory module
StartForKiller#0001: yeah i know
Saltypretzel#0321: FPGA has sequential logic too
StartForKiller#0001: well, desing a logic unit and a method to change wiring with a rom, and then you will have a fpga
Saltypretzel#0321: Yes FPGA in logic world and you can make anything
Macrohard Onfire#0662: https://logicworld.net/view/ctn-5f6ecd05 <[newline]>  <[newline]> i made a modular langton's ant. here you can download ant try it for yourself
Broyojo#2667: fpga when
DjSapsan#4530: Bored of implementing different circuits for different purposes? Here is the programmable any-function tower. In this case it's a +5 constant. <[newline]> Secret is easy - || it's a regular ROM ||
jrnvnjk#1582: Thanks now I know what to do üòõ
jrnvnjk#1582: Ow i forgot to stroll on youtube now more people can play it for ideas üòõ
Broyojo#2667: thanks!
Satan#9850: I really like your minesweeper video
Satan#9850: I agree, Its not mine though
Broyojo#2667: the tv system is so cool
jrnvnjk#1582: First part of my Computer in the newer version of logic world, the memory module, 16bit values * 256 addresses
Satan#9850: https://youtu.be/dB74iLtYrG8
Geralt von Rewe#2240: My first step to build a music Sampler
64548#0351: 
64548#0351: My Numbers Counter 0 to 9 Automatic or Manual
sybergoosejr#8256: 
Michael#8718: https://ibb.co/5nmjjZ7
Michael#8718: Five bit CPU, with 7 instructions; 32 words of ROM, 16 words of RAM
sybergoosejr#8256: AIY assemble it yourself.
sybergoosejr#8256: my tv version on <@!350975527324221451>  server
Satan#9850: Alright
DADp#7461: will be joinging this later to build economy
Satan#9850: Video of logicity on <@!350975527324221451> 's server. Growing everyday and always beautiful
IndustrialDonut#2459: What is AIY? Also I don't know what that circular looking wire array component is but that looks pretty cool
sybergoosejr#8256: 
sybergoosejr#8256: making more components for my AIY system.  testing bus plugs register boards made out of 1 byte memory boards and controll flow. data bus uses keyed sockets.
RyanT#1426: First fully automatic test of my TV system, and it almost worked. (it was supposed to be a checker board pattern)
RyanT#1426: It's public! the IP is `lw.ryoman.ca`
Satan#9850: How can i join your server?
RyanT#1426: I've wanted to make a TV service in a video game for a while now for some reason, and now I'm finally doing it! presenting: LWTV! Coming to Logicity (the town on my server) Soon ‚Ñ¢Ô∏è, the TVs come in 2 sizes: Big (8 x 6 pixel screen) and small (4 x 3 pixel screen)
Lim√≥n#7879: and gate pro edition
Satan#9850: My first Seven segment display :) <[newline]> https://youtu.be/6-Hwk55t_UY
JPM-Baroque Spaceship#6542: üëÄ nice
Bumpy#3920: make sure to use powerlines when running long wires
Devon#5352: My AND gate in progress, still encountering a weird bug where the output is always on, but as you can see I made sure to use sockets for inputs and outputs so its modular
gnog#2259: ROM module, imported into world from file
64548#0351: hi
101#1688: Big ROM
TK#7605: nice little sunset https://i.gyazo.com/1f60927dfe9a61a7c48d5ff54e455875.mp4
Saltypretzel#0321: i did some tricks to make the sound card a bit more versatile than just normal singers so that it has some adjustable attack and decay
Grandiose Lights#2727: Work in progress 64 bit CPU with only 16 bits being used for the moment because I value my time. <[newline]> The deep pink section to the left is an overwrite-able binary counter, probably the most complex of all the pieces. <[newline]> The purple blob indexes input operations. <[newline]> The bright pink thing to the lower left of the centre is part of a 16 bit multiplexer, place holding for the 64 bit demux.
Vinyl Boot Maven of Shade#1858: New rom design. Would be hell to program, but that's 256 addresses, so with a 8 bit bus = 256 bytes, 32 bit bus = 1024 bytes. Super compact. And it's modular and can be hooked together front to back with a 3rd decoder fed into the side to select each module.
101#1688: Next up, control logic... üò¨
101#1688: Completed 32 bit CPU datapath
circuitgamer77#0377: Components in order from left to right: Register PROGLOCS, Register PROGLOC, Program Counter, Register CTRLFLGS, Register INSTRUCT, Register NMINTADDR, Register INTADDR, Register STKPTR, Register X, Register Y, Register ACA, Register ACB, Arithmetic Comparison Unit, Register LPA, Register LPB, Logic Processing Unit, Register A, Register B.
circuitgamer77#0377: Well, here's all the components completely wired up except for the control unit!  It's very long and skinny, but I kind of like that...  Maybe a way to add multiple cores?
circuitgamer77#0377: This is what my main bus will look like in my CPU...  I overbuilt the flags busses to allow for more efficient microcode, so most of the time only 2 or 3 of the four flag busses will be used, in addition to the main bus on the bottom.  The circuit on the side is the circuit that checks for if that component should be receiving or setting the flags on any of the busses.  The flag busses have an 8 bit section for the internal address, a ten bit section for flags from the control unit, and an 8 bit section for flags to the control unit.
ieee 802.11ac#6337: who needs space efficiency
circuitgamer77#0377: Just a basic 32 bit register, but I like how clean it ended up looking:
circuitgamer77#0377: Not quite a build, but I just finished the design for the fetch-decode-execute cycle of my CPU (including interrupt handling) in a text document:
DjSapsan#4530: RAM
JPM-Baroque Spaceship#6542: The updated Cloud at left, the old Cloud at right
Bumpy#3920: hopefully at some point, I can come to the understanding to recreate the altair 8800 itself.
Bumpy#3920: Here's my latest project: "Kill the bit", it was a game originally on the Altair 8800 and I've recreated it in LW. This was very much a learning experience for me and I gained a lot from it. There is absolutely tons of things I could've done better. I might come back to this someday and implement the different speeds after winning. For now though, its finished.
circuitgamer77#0377: masked write 16 bit register (last 16 bits state which bits to allow writing to)  No read flag because this will be used directly by the control unit.
JPM-Baroque Spaceship#6542: 256 Bytes of RAM, this extremely compact RAM will be used in the update of the SERNET Cloud Services
circuitgamer77#0377: Assuming I did this right, here's a 32 bit register with Read, Write, Clear, Shift Left, Shift Right, Rotate Left, Rotate Right, and Arithmetic Shift Right.  Has not yet been tested.  (EDIT: I missed a circuit for arithmetic shift, but it is now working.
circuitgamer77#0377: Program counter:
circuitgamer77#0377: LPU (logical processing unit).  Can do XOR, AND, OR, and NOT.  NOT is always applied to the output of the other gate, so if you want to invert a single value clear one of the input registers and put the value to invert in the other (or just use the ALU - has the same option but just for input B)
JPM-Baroque Spaceship#6542: The small Silicon Valley now has <@!299379046012420096> company stablished üëÄ
QR_Query#6979: nice
circuitgamer77#0377: What I'm calling a 32 bit ACU (Arithmetic Comparison Unit).  It is 32 adders with the options to invert B and carry in, plus 2 flags to indicate A greater or B greater (equal if both are 0) and a flag to indicate a carry out.
katkosmos#6502: as soon as i finish the thing this module is going into, ill post more screenshots and actually say what the hell im doing lmao
katkosmos#6502: better sneak peak at the thing i posted earlier lol, this is only a single piece of a single piece of the whole thing
circuitgamer77#0377: I think my attempt to make a 2 wide adder with no bugging and a line to invert B is outweighed by the vertical size I ended up with...
commander of the pandas#1576: 
Deleted User#0000: this looks smoove
gnog#2259: 32 registers for risc-v (two registers read/one register write)
Dragon Lord#6944: you haven't even put a single bit in? :0
katkosmos#6502: ill reveal more in the future once i actually get this first bit done lol
katkosmos#6502: extremely vague sneak peek at a thing im working on <:blaze:716897128621932574>
QR_Query#6979: woah
Alea#5422: A
PseudoGoose#2841: Been working on memory modules for my CPU. Will be used for program memory, and maybe RAM. <[newline]>  <[newline]> This is a 16x32 bit module (i.e. 16 words of 32 bits each). Designed with tradeoffs in scalability, performance, and size: <[newline]> - Ground footprint is ideal - 2x3 tiles per bit <[newline]> - Component count is pretty minimal, and this is pretty much the largest power-of-two memory bank that I can make without losing too many FPS while grabbing and cloning. <[newline]> - Socket count is minimized - the internal data and control lines are hardwired, and sockets are only used for external connections (though I might decide to hardwire those too)
101#1688: Today's component, a register file!
QR_Query#6979: diagram for my cpu
dutchminer2011#0450: picture of 3 of them next to each other
dutchminer2011#0450: 5 * 8 * 10 BCD to 7 segment converter
QR_Query#6979: what are you making?
SpencerBeige#8582: I was too lazy to build a full Binary-to-BCD, so I built this shift register version. It's tilable so I could easily expand it to 16-bit, if needed. Only problem is you have to manually clock the data in.
circuitgamer77#0377: I can configure the output to work with any positioning of the point in a fixed point value, but that's at the cost of more than doubling the required components...
circuitgamer77#0377: The big one is the most flexible design, but it's not component reduced and I can't clone it or move it because it's so big...
circuitgamer77#0377: This is my current testing area for multipliers:
circuitgamer77#0377: Any circuits look very cool :)
HomelikeBrick42#1173: vertical circuits look very cool
circuitgamer77#0377: 8 bit fixed-point multiplier, component reduced & negative capable :)  Now for 32 bit...  Could take a while...  (example in image is 0001.1000 * 0001.1000 = 0010.0100)
DjSapsan#4530: 100000 tps for those who interested
DjSapsan#4530: round decimal numbers form Sierpinski triangle in BCD <:bobby_shocked:692790277076680834>
DjSapsan#4530: Extremely smol and optimised 32 bit BCD display ! <[newline]> - 1 BCD unit contains only 16 gates <[newline]> - hard flickering because outputs not synced
Jimmy#8080: Crazypants pog machine
circuitgamer77#0377: On the left is the nicely tiled but non-optimized 4x4 bit multiplier, on the right is a circuit that serves exactly the same purpose but has had the unnecessary components stripped.  Not as nice to build, but a huge component reduction at larger scales.
StartForKiller#0001: wow, really hard wiring
101#1688: Bypass network for my work-in-progress CPU, wiring this thing was a headache and a half... Did eventually manage to get it down to 1 tick though!
DjSapsan#4530: optimised 10 digit 7 segment display next to the big one (both with 4 bit decoder)
circuitgamer77#0377: I need to work out how to reduce the component count on the adders...
circuitgamer77#0377: I wish I could actually move this, but it's so big that the game either crashes or runs at 1/2 fps...
Jimmy#8080: More like pog-tower
circuitgamer77#0377: The location of the decimal point for this multiplier is determined by where you take an output from on the top - currently the output is aligned for 16 bits before and after the decimal point.  This also works nicely for negative numbers encoded with 2's compliment.  The current output is 10.01, which is the result of 1.1 * 1.1 (all values shown in binary).
Leumas#5023: Just bought the game, and I have to say, very good so far. <[newline]>  <[newline]> Built a simple 8bit adder and hexadecimal 7 segment display.
DjSapsan#4530: Omg didn't expect ||classified||
JPM-Baroque Spaceship#6542: my fav movie
CrispyPin#1149: found a monolith, it appears to be sentient
Vinyl Boot Maven of Shade#1858: 6 bpp rgb display
circuitgamer77#0377: This should be a multiplier, if I didn't miss a wire somewhere or some other error.  Inputs are on the side closest to camera and the hidden side to the left, output is currently the sockets on the very top.:
circuitgamer77#0377: Progress has been made (not yet complete):
Deleted User#0000: Bus-Tower
Ecconia#4929: Brown slot?
Bumpy#3920: I tried to make a slot machine
Nik#1011: decoder
Curze#4096: But now i only have the ‚ÄùVram‚Äù part that its cycling through, now i just need to make the rest xD
Curze#4096: Yes, so i would have a display library. <[newline]> Like requesting it to write an A, then it would execute that instruction in several clock cycles
HomelikeBrick42#1173: so its drawing pixels instead of characters?
Curze#4096: At the moment yeah, but the characters are drawn like a normal display would update, so with a scan line going through all positions updating them. <[newline]>  <[newline]> I‚Äôve done the usual hard coded characters, but wanted to ‚Äùchallenge‚Äù myself this time.
HomelikeBrick42#1173: what is that actually doing? <[newline]> redrawing some text?
QR_Query#6979: heres the memory for my control lines in my cpu. is that called microcode?
QR_Query#6979: jesus
Curze#4096: Not much, but its mine üòÑ
TK#7605: I'm making another version that can handle background scrolling, since top layer is going to be handles seperately in a sprite handler which will be able to place down to the pixel anyway so no purpose for being able to shift the sprite layer might as well just tell it to render in a different spot
TK#7605: <@!369257250109259776> 7 + transparent
HomelikeBrick42#1173: how many colors?
Dcentrics#0001: Single cell(3bpp), Shifter at the back, 6 images worth of vram in the middle, 2 layers of transparency (pink)
Dcentrics#0001: green box is on top of the checker background on the test 4x4 screen
Dcentrics#0001: https://i.gyazo.com/cc530a2fabe0c6b03abb6b6e7f786385.mp4
Dcentrics#0001: Functional gpu with image shifting and transparency! built with <@!250024565286240257> https://i.gyazo.com/e2d2c1f8ea5d04c7890257de7238dee7.jpg https://i.gyazo.com/3bf368d7293a712c6bac74f34d75bcbf.jpg
katkosmos#6502: Taking inspiration, I did the whole comic, but like actually """""functional""""" logic based on my own interpretations:
conorpo#1572: 
conorpo#1572: MIPS control unit, (still need 1 or 2 more outputs but almost done)
Loumos#8852: Note: there was one bug in the system but i fixed it so the link now should have a download with it fixed
Loumos#8852: 4096 bits of ram. not the most efficient but fun build. Download -> https://drive.google.com/file/d/16cGQ7VCq4iKY_l7rLGiJBReTHPZ2f5-2/view?usp=sharing
Vinyl Boot Maven of Shade#1858: Old ALU with ripple carry on left, new ALU with 2 cascaded carry look aheads on the right.
Pinpoint Townes#4560: 256Byte RAM module
CrispyPin#1149: 8x32x8.5 6 bit decoder (output can be up to 18bit, not hooked up rn
sybergoosejr#8256: back hope this answers it.
HomelikeBrick42#1173: i know
ieee 802.11ac#6337: never, i meant in the build
HomelikeBrick42#1173: passing signals through walls üôÉ
ieee 802.11ac#6337: what purpose do the through pegs serve
sybergoosejr#8256: nor demux card for AIY boards.
HomelikeBrick42#1173: there is a difference of about a few billion bytes
circuitgamer77#0377: Just each card has a MUCH smaller capacity :)
HomelikeBrick42#1173: they almost look like ram cards that you would put in a real computer
circuitgamer77#0377: Any large repeating circuit looks cool...  here's 16 4 byte words with 24 bit addresses:
sybergoosejr#8256: back https://logicworld.net/view/ctn-3ffd56c9
sybergoosejr#8256: nor gate memory card for my AIY boards. no AND gates or d latches!
circuitgamer77#0377: One 32 bit RAM register w/ 24 bit address selector (I'll be using 32 bit addresses, but the top 8 bits will define banks so I don't have to build all 8.5 billion registers)
sybergoosejr#8256: thanks i fixed üòÑ
sybergoosejr#8256: https://logicworld.net/view/ctn-ce8dcf51
ieee 802.11ac#6337: assembly yt iourself?
sybergoosejr#8256: AIY (assemble it yourself) version of my memory boards. also included 2 versions of my demux and byte boards for just building it (copy paste) and blanks to make your own compatible!
101#1688: I like, reminds me of autorom üòõ PS: jimmy can we have blotters back, pretty please
RyanT#1426: side view
RyanT#1426: 7 x 5 tileable character display (Also tiles vertically), has A-Z & 0-9, and [SPACE] (the order of the characters is a bit weird, but that's how I was able to get it this compact)
megamaz#1020: Was thinking about doing that, thanks for confirming. <[newline]>  <[newline]>  And 1t delayers are the same as buffers. Use those instead.
101#1688: Look ma, no relays!
CrispyPin#1149: upgraded my ROM design (old is the smaller one) so it's instant. to keep it as dense i had to have double slices of 4 tiles each
circuitgamer77#0377: Shift register (2 wide + fast) (8 bit w/ & w/o IO + 32 bit w/o):
circuitgamer77#0377: Next up is a shift register.
circuitgamer77#0377: Logical operation module, intended as an extension of an ALU or as a seperate component.  Inversion is already covered by an ALU, so is not included here.  (could be achieved with this by XORing the value with all 1s)  Includes OR, XOR, and AND.
circuitgamer77#0377: Perfect :)
CrispyPin#1149: made a norxondor gorgonax, xand gort and norx gate
circuitgamer77#0377: Yes.  also, Does not have subtraction mode built in to allow for 1's compliment and 2's compliment, or just carry in for chained calculation on bigger numbers.
blane1257#8086: instant carry?
circuitgamer77#0377: 8 bit basic ALU (addition, subtraction, and comparison) (with & without IO) and 32 bit variation:
blane1257#8086: program counter nonsense
circuitgamer77#0377: now to work on an ALU...
circuitgamer77#0377: and 32 bit :)
circuitgamer77#0377: minus IO:
circuitgamer77#0377: 8 bit but expandable.
circuitgamer77#0377: program counter mk2 - very fast and reasonably compact (for me)
PseudoGoose#2841: wait.... I removed the switch and the bus is still powered... there is some kind of feedback loop in here... jimmyyyyy üò© <[newline]> edit: nvm, the feedback loop was a steady state caused by the ALU being enabled, not a bug
PseudoGoose#2841: Been distracted by other things recently, but I have made a little progress on my RISC-V core. Barrel shifter is almost complete (still need to add output enable and sign extension), and I also added hex displays for the bus values.
OopsieDoopsie#0412: <@!604079048758394900> i recommend you placing some 1t delayers to prevent that staggering :)
Darth feir#7467: expandable serial display still working out the kinks
megamaz#1020: 16-bit hex display! :)
sybergoosejr#8256: by adding a relay to my 16 byte memory board i made it possible to use an expander card to convert the 4 bit addressing and add 2 more address bits taking the total ram storage to 64 bytes (256 bit) it also uses the same demux connector as the ram. <[newline]>  <[newline]> included are 2 test boards to check and try the ram boards. one for single board use and one for the interconnect. <[newline]>  <[newline]> https://logicworld.net/view/ctn-a86c70d4
Dragon Lord#6944: ~~you could also add increment and decrement essentially for free if you want~~ ;)
SpencerBeige#8582: 4-wide tilable ICA ALU. Has all logic functions (and, nand, or, nor, xor, xnor, not) and add + subtract <[newline]>  <[newline]> oh and also increment and decrement lol
SpencerBeige#8582: 
RyanT#1426: 256 bytes of memory (not hooked up, but It can be)
blane1257#8086: 16x4 word 32bit delay line memory.. 64 words or 256 bytes equivalent (and totally modular, infinitely expandable)
CrispyPin#1149: wasn't planning to, it's in a world with a fuck ton of other stuff, also it's not done as i want to add RAM
DADp#7461: are you going to upload this?
CrispyPin#1149: https://youtu.be/sp53ji3QNLY
Zoey#7836: 1024 Byte scalable SSD
101#1688: 32 bit left + right shifter/rotator
Michael#8718: 4 bit CPU.  Took me days to get a writable PC working to implement branch, I learned 20 ways to NOT do it.
Michael#8718: https://ibb.co/PYp6jLN
CrispyPin#1149: 4 bit tileable dual instant read register (this time backflow protected lmao)
StartForKiller#0001: current cpu state
StartForKiller#0001: Microcode control unit finished üòÑ
DeadlyRAPTR#1916: everyone's making these compact builds and then you see my skyscraper 256B ram
PseudoGoose#2841: 32-bit semi-modular barrel shifter (but not really, it only does left-shift) <[newline]> in this case, "semi-modular" means that it has one template module stacked several times, and there is a small amount of manual multiwiring that is different for each stage
conorpo#1572: 
conorpo#1572: ICA v2, still 6 functions, but with 3 less logic gates (thanks <@!338001692131983370>)
blane1257#8086: right yeah <[newline]>  <[newline]> mine has a lot less functions, doesnt even have input inverters.. i would have added all that but i built this ALU for a specific arch that only uses a couple ALU functions
conorpo#1572: <@!338001692131983370> yeah, quite alot of the space is fast buffers for the OR function, aswell as the "zero" output and then the mux is already in the picture so thats why it looks so big
blane1257#8086: my 32-bit ICA ALU with add, nand, and xor functions
conorpo#1572: not the word I would use but thanks üòÜ
Deleted User#0000: looks clean!
conorpo#1572: 
conorpo#1572: 
conorpo#1572: 32-bit ICA, 6 functions on ALU (AND, OR, add, sub, SLT, NOR)
Jimmy#8080: 32 bits!
101#1688: Whelp, I decided I couldn't stomach a 16 bit ISA and having to write lots of two operand assembly, so I'm going 32 bit! Wish me luck üò¨ <[newline]>  <[newline]> P.S. Image is a fast but questionable adder being tested against a slow but reliable one
StartForKiller#0001: this makes the demonstration of the workings, you can see the input address of the rom
StartForKiller#0001: now with my decisiom rom i can create for example loops on microcodes
StartForKiller#0001: microcode for my cpu decision logic üòÑ
bejoscha#0284: Yes
HomelikeBrick42#1173: you can connect thin sockets to the large ones?
bejoscha#0284: How do you like this glitchy monstrosity? üòÜ  (Following the book...)
Infini#5724: omg yes
Grandiose Lights#2727: <:tink:897654520388124712> 1x 8 bit memory module. Writable, allocated and modular. All in a 277 cubic unit space including the excess circuit boards. <[newline]> It is stackable up to 16 bytes without any other components.
HomelikeSquid65#8653: 
HomelikeSquid65#8653: i used glitches to build a very small register
Kesuaheli 2#5868: Not sure if this channel is exactly correct, but its LW and something I made ... so here: <[newline]> I've started to make a library for **Autodesk EAGLE**. <[newline]> First I just wanted to make the logic gates as schematic to for an easier overview of a circuit. <[newline]> After I've created the first AND-gate, I decided to make a footprint too (for no reason, lol). <[newline]> And now I even have a 3D-Model for each part I have made so far (the ones shown below): AND (2, 3 & 4-input), Buffer (normal and fast), NOT, and D-Latch. <[newline]>  <[newline]> *More pictures in thread.*
Saltypretzel#0321: hmmm how do i record the audio and send it
Saltypretzel#0321: please excuse wiring but ASR (attack-sustain-release, no delay yet) envelope generator thing. credit for buzz for the counters
_Mpcs#0525: My first project in the game was an electronic dice üòÑ  https://streamable.com/v3fv47
Stenodyon#8192: I now have a basic monitor program that allows me to read and modify memory <:bobby_dab:692790273490550855> I don't think I'll have enough memory space for assembly unfortunately
JPM-Baroque Spaceship#6542: The SERNET 1 Router in the Network Center Office!
Jimmy#8080: Curvy CLA
Jimmy#8080: conference room
HomelikeBrick42#1173: and also as a side effect of the pixel selection you can select blocks of pixels at once <[newline]> it will be useful for clearing the screen all at once
HomelikeBrick42#1173: 
HomelikeBrick42#1173: me and <@!771584465356455946> have made a 8x8 screen with save and load from any pixel
HomelikeBrick42#1173: a small 16 bit register with save and load functions
SpencerBeige#8582: Thanks üëç I believe three ticks
HomelikeBrick42#1173: you could use `server "simulation.rate 1"` to slow down the tick rate to 1 tick per second <[newline]> and then count the seconds <[newline]> i dont know of a more scientific way of doing it
SpencerBeige#8582: idk how to measure tick speed, but this is a pretty-fast 8-bit CLA adder
katkosmos#6502: more cursed objects
HomelikeBrick42#1173: thanks <[newline]> he already answered in <#401255675264761868>  https://discord.com/channels/401255675264761866/401255675264761868/905954350369746984
Kesuaheli 2#5868: Looks like a 4 bit full adder with carry in, carry out, and a switch to generate twos compliment for one input. Which means it can add and substract two 4 bit inputs.
Saltypretzel#0321: 
Saltypretzel#0321: yes
katkosmos#6502: <@!371851806067654657> and I made more cursed objects
GooseFairy#6680: t
katkosmos#6502: made a decently compact tileable ring counter (4x3 footprint)
RyanT#1426: 16 bit registers for my CPU
CrispyPin#1149: 16 bit cpu
HomelikeBrick42#1173: what is it?
CrispyPin#1149: 16 bit cpu, still need to add ram and IO but it can do fibonacci
Vinyl Boot Maven of Shade#1858: 32x8bit memory module, with interface attached. Vector3 addressing. Can be easily copied and pasted sideways and auto connects with sockets, second floor can be copied upward and attached by simply wiring through pins.
Deleted User#0000: Cool! Imagine we would have a homebrewclub, with people talking nerdy to each other and presenting logic world modules.
JPM-Baroque Spaceship#6542: Everyone is welcome :)
Deleted User#0000: Maybe we make a next Homebrewclub in Logic World!
Deleted User#0000: When ist the next meeting? Do i get an invite? üòâ
conorpo#1572: Also supports word and byte access (can read and write any specific byte or entire 4 byte words)
conorpo#1572: 1x2.33x5 Memory Cell, Fully Expandable in all directions
JPM-Baroque Spaceship#6542: a photo of the Conference Room of the Network Center Office
QR_Query#6979: idk why but logic world is screwing with me when I try to do 192 fytes (120bytes)
101#1688: No way what?
QR_Query#6979: No way
parallacks#7542: Im an idiot
OopsieDoopsie#0412: damn sockets are OP
DjSapsan#4530: Almost like microscope photo of a chip
DADp#7461: (politley)
DADp#7461: what thy fuck
CrispyPin#1149: 
DjSapsan#4530: I'm always using the minimum possible amount of boards. My problem is elements number
101#1688: I managed 4096 bits (256x16) without significant issues. Back in the tung days, having large numbers of boards was a problem, so this time I was careful to use as few boards as possible. I think my minimum copy/paste-able block is on a board of around 50x16 tiles (8x16 bits). You could maybe try putting more cells on each board?
QR_Query#6979: This is it for now! 192 Fytes! (120 bytes)
QR_Query#6979: yeah i think thats what Ill do <[newline]> Especially if placing a whole row of these is now taking several minutes instead of seconds
CrispyPin#1149: you can add more when buiding and loading is more optimised
QR_Query#6979: probably not, but itd be cool
CrispyPin#1149: i already made that and it's twice as long at 64 tiles
CrispyPin#1149: do you really need that much memory
QR_Query#6979: That world is corrupted too. <[newline]> so now im trying again
QR_Query#6979: THE 1024FYTES ARE COMING ALONG!! (640bytes)
QR_Query#6979: Nevermind! This crashed and corrupted the world
Fr0z3n#0102: h (This runs a 7 segment using 4 inputs, and can save the displayed number)
OopsieDoopsie#0412: yes.
QR_Query#6979: 5bit 32 * 32 addresses RAM <[newline]> not wired up yet
DADp#7461: shhhh, i mightve had timming issues that i was too lazy to fix
Darth feir#7467: you can get it to 1 tic per bit + 1 starting bit ^_^
DADp#7461: modular binary over one wire (ignore the mess of wires)
Eclipse#5234: current project is a slightly altered 7-segment display to display a 4-bit hex value from a binary input
Nik#1011: learning is the fun part, you have an advantage over the others who've already learned how to build these things üòã
Eclipse#5234: got miles to go before i get there, just gotta make all the little bits to assemble into these monstrosities i guess, also will help once i get my "warehouse" of premade components set up
Eclipse#5234: jesus y'all doing those massive builds and i've barely managed a 7-segment display and still dunno at all how to make stuff with D-latches
DjSapsan#4530: Oh yea i also wanted to build an automatic binary tester. To test ALU/memory/CPU. I wanted to build it in minecraft days, because it is super buggy and broken. But it's also can be useful in LW. It could check basic wiring mistakes, logic correctness, ripple effects and measure speed
101#1688: Also, a test rig for the adder I designed the other day:
101#1688: Today's component, a register file (I'm sure y'all can see where this is going üôÉ )
Dragon Lord#6944: What good is display memory if you can't read it? Don't you want to be able to read the screen? üòè
parallacks#7542: 4-bit display.
parallacks#7542: 256 bytes of RAM, 16 bit registers. Still need to compact the addressing part but the world actually still loads fairly quickly which I'm happy with
DjSapsan#4530: 
DjSapsan#4530: well this is my version of full 4 bit display. Compact and high-performance
Lim√≥n#7879: Network Center Offices
Verlio_H#0201: wom
CrispyPin#1149: 16b bit-addressable write only memory for my 4x4 pixel screen (demux sold separately)
Infini#5724: server ip?
Stefan#5422: Send that to the modders
CrispyPin#1149: scuffed nixie tube proof of concept
Nik#1011: smol scren
JPM-Baroque Spaceship#6542: Well this is more of a building... <[newline]>  <[newline]> The Network Center Offices! (In Whisper's Server) <[newline]> It has a conference room, its own SERNET, and places with info about IP, Filetypes, Protocols...etc
DjSapsan#4530: smol <[newline]> || with glitch ||
Darth feir#7467: Nixie tubes when ^_^
TK#7605: https://i.gyazo.com/421b1b3112c2933efdca49bcfb337a86.png  4x4x4 insta carry (no glitch) (stackable 4 wide, has a little bit that hangs over but the next bit has a space for it) https://i.gyazo.com/cd462fac65d7b6feacea762f6b2b3f4f.jpg
DjSapsan#4530: python
Jimmy#8080: arithmetic engine?
Jimmy#8080: BCD
DjSapsan#4530: I'm experimenting with "old-school" wire displays. This one has only 2 cheat wires. Inputs are behind front panels. <[newline]> In general this approach can allow to show any shape symbols.
DjSapsan#4530: wiregram
cheese3660#8641: I should build something like this myself, especially as I already have a RAM mod
DADp#7461: üï∫üï∫üï∫
Ecconia#4929: Its innovative. Gonna copy that as soon as I need to import binary data!
DADp#7461: mmmm time to make it crazy
cheese3660#8641: Dang, I didnt think of that <:02Facepalm:789621432207671358>
DADp#7461: ah they use keys, smrat
DADp#7461: nope, i did it some time ago in <#901659878869844048>
cheese3660#8641: Dang someone beat me to it
Stenodyon#8192: I got tired of assembling and inputting binary by hand so I made a circuit and a python program that lets me input data quickly
CrispyPin#1149: tried making something similar, 8x8 and i hooked it up to 64 panel switches
Broyojo#2667: hexagonal cellular automata
Stefan#5422: Because dont question the LW comunity
CrispyPin#1149: hexagonal Cellular automata with ruleset 2/2/3 (showing swimmer/glider and oscillator)
Deleted User#0000: Nice work!
TK#7605: https://i.gyazo.com/179410d98be7c9b95647625546b1e5b1.jpg ya this is one cell, the control lines are a little complicated though they're shown in the pic but some need to be on a monostable (needs a pulse) while some dont. the final intention is for this just to be a layer inside of a bigger project
Deleted User#0000: with copy&pasta?
TK#7605: its just 16x16 right now, you could make it as big as you wanted
Deleted User#0000: how much pixel you got atm? and can you upgrade your range?
Deleted User#0000: oh ok
TK#7605: 3 bits of color information per pixel (7 colors + black), I'm pretty sure I can get rid of the slight lag it has right now when shifting and make it seemless im just too lazy to copy paste it all again in sections because i'll crash the server im on very ez lol
Deleted User#0000: Great!
TK#7605: https://i.gyazo.com/4450694364afe0fb78859335cd6dc7f0.jpg
Deleted User#0000: perfect
TK#7605: Sure
Deleted User#0000: Cool, can you show me the back side? And how much colordepth?
TK#7605: https://i.gyazo.com/5a4c85e4f047d537f59cdc889b0970b6.mp4
Caderikor#6717: oops my bad din't know it was in builds üòÑ
101#1688: Not sure builds is the right place to be asking that
TK#7605: https://i.gyazo.com/486c5602c019cd4aaceafd3b66637f75.png 4.5x4x4 (insta carry) no glitch
Deleted User#0000: Cool, maybe build an adapter to get a extra wire?
Riku#9814: (Side note, I wish you could connect a wire between 2 touching pegs)
Riku#9814: Finally, an 8 bit register. After a bit of help with the design, I was able to make it!
OopsieDoopsie#0412: n+1 counter and 8:256 demux (probably that demux is way bigger than it should be lul)
Saltypretzel#0321: a lot of wire placing.... about more than 100
Saltypretzel#0321: hopefully i can implement very rudimentary ADSR
Saltypretzel#0321: sound card WIP Credit to Buzz for the sound decoders
Grandiose Lights#2727: Working on an  arithmetic engine confined to a 16x16x16 space. <[newline]> arhhhh forgot to include buffers- everything feeds back into itself.
101#1688: A scaled up and compacted ladner fischer adder (6 ticks, synchronized):
Eclipse#5234: still being really low tech and messy with the logic tho
Eclipse#5234: 7 segment display that can display numbers from 0 to 7 based on a 3-bit input
cheese3660#8641: 6502 pog
katkosmos#6502: Progress update on my 6502: finished the timing generation logic and some of the pre-PLA decode logic; I've started dragging the necessary signals up towers to be able to do the decoding. Current plan is to do the decoding high up and run the control lines down since I *think* it'll be the easiest way of wiring them up.
blane1257#8086: alu shenanigans
parallacks#7542: 16 bytes of ram with built in address decoder 22X40X8 when the interface is stripped off.
blane1257#8086: nice
dutchminer2011#0450: invert a, invert b, OR, flood carry and CIN, so you can do any Boolean operation, add and subtract
hintz.jakob#3558: expandable binary to BCD converter using a couple of adders
blane1257#8086: what functions ya got?
Moldytzu#4226: 16 bytes of RAM
dutchminer2011#0450: 1 high vertically stackable ALU
pfg#4865: grid thing
DjSapsan#4530: register
Eclipse#5234: made a weird display thing where you press the switches for the X and Y coords and the corresponding pixel lights up
katkosmos#6502: Made some upgrades to my 6502's front panel thing. Now shows the status register and flags
CrispyPin#1149: fully stackable instant dual-read register 6x4xN (4 bit module) (front wires missing shhh)
Moldytzu#4226: compact 2 to 4 binary decoder
katkosmos#6502: Wasn't really made to be compact lol, but I made a 3-bit counter with a secondary decoded output (so both a 3-bit binary output + an 8-line decoded output). Supports clearing and setting of the counter value, and also features an optional reset point, meaning you can limit it to numbers below 7 if you needed.
Moldytzu#4226: 8-bit Adder
bejoscha#0284: Ha! For once I now understand the shape-choice of the XOR and Fast buffer. Nice use!
Jimmy#8080: by god, its a pong
pfg#4865: I made a pong
Jimmy#8080: Ezurths WIP computer
Jimmy#8080: tiny tileable adder
Jimmy#8080: CPU functions
Jimmy#8080: logic cards
Jimmy#8080: division subprocessor
Ezurth#0001: 32 bit computer (21-ish hours in and only like 25 to 30% done)
Ezurth#0001: digital clock i made (4-ish hour build)
Michael#8718: https://ibb.co/tBR8Z1s
Michael#8718: Slightly working 4-bit CPU with 16 words of ROM and 16 words of RAM.  My first CPU, so I suspect the design isn't very great.  I had to do a lot of work to make it work
101#1688: Just looked that up, can't access the paper but it seems to be some sort of sparse parallel prefix adder. I've actually never built one of those ü§î
Saltypretzel#0321: Someone make a lynch-swartzlander spanning tree carry lookahead adder
101#1688: My first adder in LW, a four bit ladner fischer adder üòã
Zephi#4594: https://cdn.discordapp.com/attachments/864853960980693012/904841998710755369/8mb.video-ite-wc4BcgWa.mp4
Attikitty#2900: This is the first build I made that makes my game fail to load half the time, and it was made for my second computer in logic world. It's 32 bit, with 256 bytes being shown. 2x4x7 for every 2 bits of RAM. Stackable front to back, and I'm only showing 2 stacks because anymore and my game will not load. (The decoder was highly inspired by <@!249215681093042186> 's decoder)
DjSapsan#4530: https://youtu.be/2oEbBSMTxhA
Stenodyon#8192: The ROM is getting bigger and bigger üëÄ I'm getting closer and closer to bootstrapping assembly on my CPU
cheese3660#8641: X address bits by Y data bits RAM testing circuit, X and Y <= 16 bits
DjSapsan#4530: HDD
Ecconia#4929: Grass
circuitgamer77#0377: Mk1 hard drive, WIP.  Will be much more compact in the future, and will be more compact than ram at larger scales.
TK#7605: (well, diagonal has to be done in 2 moves but it still can do it)
TK#7605: https://gyazo.com/b7000ddcd47e9309ce8e43d1da5f6aa3 can move an image any direction, 3 bit RGB color
circuitgamer77#0377: We have achieved grass!
Darth feir#7467: 
Darth feir#7467: 16x16 rgbx6 2x2 pixels
parallacks#7542: Raaaammmm
blane1257#8086: wow.. thats like, not kuch bigger than my 15x32bit (so 60 byte equivalent) register file <[newline]> though, to be fair, that thing has 3 seperate output lines all with and gates for enable, so
MrWhimble#6061: 
MrWhimble#6061: 256Bytes of addressable RAM with separate input/output buses, and address bus. Includes a read, write, and clock lines. Going to use it for a SAP-2-like computer.
WackyStick#6969: most rgb-pixel based displays compensate by using brighter blue subpixels or sometimes having multiple blue subpixels, although this is less common for modern tech as it means each pixel takes up more room
WackyStick#6969: human eyes are most sensitive to colors in the orange to green range, meaning that shades of blue get overpowered when next to shades of green as blue is opposite green on the color spectrum
Dragon Lord#6944: or at least to make it brighter if not larger... i remember one of the colors usually gets special treatment because it gets overpowered a lot
blane1257#8086: i thought it was typically green, maybe thats only in cameras tho
RyanT#1426: huh
Dragon Lord#6944: that is a standard practice in displays i think
circuitgamer77#0377: I made blue bigger because at a distance it was being overpowered by red and green
RyanT#1426: why is blue bigger? shouldn't it be green? also, I don't think LW mixes display colours
circuitgamer77#0377: full 8 bit per RGB (24 total) programmable display:
blane1257#8086: for a bit i was making a BCD calculator that uses a single digit BCD adder but multiplexes it over time to calculate an arbitrary number of digits one-at-a-time
Darth feir#7467: havnt built one yet but have been thinking about it
Dragon Lord#6944: has anyone build a serial (as opposed to fixed bit width) cpu/alu yet?
blane1257#8086: but also, you can put that entire monostable circuit outside the register.. since you can feed all the registers the same clock, just ensure that the clock is always only 1 tick before it goes to the registers and then you dont have to worry about it
blane1257#8086: you can use an and gate instead of that D latch to turn the clock signal into a single-tick pulse, if i understand what youre doing correctly <[newline]>  <[newline]> it would only go high while clock is high and also not high, which is never, but because of propogation delay theres a single tick on the rising edge where the output of the not is still on so it does go high
parallacks#7542: Trying to make as compact a register as I can before moving onto making RAM and register file. This is as good as I've gotten it. I feel like there's still room for improvement but I've hit a wall. I made one smaller one by removing a D latch but that make the output pulse  if the Write line goes low while the clock is high.
RyanT#1426: parkour
Stenodyon#8192: Please use threads for discussion :x
Verlio_H#0201: llvm is one way to become suicidal
101#1688: tried to port LLVM once, it did not go well. Porting compilers is hard üôÉ
101#1688: I've toyed with the idea from time to time of coming up with my own C-esque toy programming language that I could target custom CPUs, might try and do that at some point üôÇ
Verlio_H#0201: yeah it is not but if you have some sort of external assembler and maybe even a compiler for a higher level language it is not impossible
101#1688: I actually wrote some components of an RTOS kernel when I was at university. You'd definitely need something better than machine code. And on the hardware side you'd need a way to implement locks and interrupts. It's definitely not trivial.
WackyStick#6969: you could probably do something super basic but nothing close to representing semi-modern computing
GalaxP#2638: because I want to do something like this but I don't know whether logic world can handle it
Verlio_H#0201: depends what counts
GalaxP#2638: is that even possible within the scopes of logic world?
WackyStick#6969: just make and attach a cpu and write an os
101#1688: Now I need to find a way to test it...
101#1688: First attempt at a full bank of memory + decoders (512B organized as 256 16 bit words)
RyanT#1426: Made a simple parkour course, anyone wanna try it?
oddron#8955: Tiny 4bit to 7Segment
Lisa#4756: 3 ticks to resolve any address <[newline]> 1 tick between the for read/write line to have effect inside the RAM, 2 ticks to be able to see it.
blane1257#8086: wow, thats.. tiny
Devon#5352: not much, but a neat lil 4bit -> 7Segment hex display circuit *~~The wires are chaos~~*
melonik#8905: 2 person ctrl z glitch
BananaBerry#6140: How did you just glitch the pieces into themselves?
melonik#8905: https://discord.com/channels/401255675264761866/901195561980543007/903955451819995158
Lisa#4756: 
Lisa#4756: 256B RAM in grid pattern
CrispyPin#1149: you only need one relay for instant carry
BananaBerry#6140: It was an interesting puzzle to make the smallest tileable full adder with 0 tick carrying. I managed to make it fit in a 5x6 board using 2 xor, 3 relays, 2 fast buffers, 8 mounts, and some very specific wiring. I'm pretty sure this is the smallest it can get with current materials
Stenodyon#8192: I'm building a collection of basic functions for my CPU
CrispyPin#1149: WIP 16-bit computer based on an 8x8 tile grid
circuitgamer77#0377: Will make a modular version in the future for arbitrarily larger inputs and displays
circuitgamer77#0377: First time making the input pretty...
circuitgamer77#0377: Disables display while processing an input, and has an output to indicate if it is busy.  Also has an enable input, to turn on/off the display when needed
circuitgamer77#0377: Self-contained 8 bit binary to 3 digit decimal 17 segment display converter, with the display:
katkosmos#6502: View of the actual circuitry I have thus far:
katkosmos#6502: Very slowly making progress lol, all of the internal buses and registers are done, I just have instruction decoding, control lines, interrupt handling, etc. left to do
sybergoosejr#8256: populated with logic cards and powered off.
sybergoosejr#8256: 64 bit memory board unpopulated
RyanT#1426: CPU Update: I now have a program counter
Zycrasion#3181: my half brain could produce a 7 segment display with a half finished decoder that im sure could somehow be optimised ( this is a call for help, its that tower ;-; )
RyanT#1426: I've got 2 modules of my CPU finished
circuitgamer77#0377: Base conversion subprocessor - give it a value and a base, and it will give each digit sequentially in reverse order (so if the result is 109 it will give the digits 9 then 0 then 1), with the next digit being calculated when the user sends that control signal.  It can also be reset at any time.
VigilanteHobo#1873: New ALU slice design that supports stuff I need
RyanT#1426: ALU Module for my computer
circuitgamer77#0377: Good news: my division subprocessor works with the new update :)
Dcentrics#0001: I feel that
DjSapsan#4530: i can't build anything else. This is build with sweat, blood, 100 crashes and few hours of loading in total
DjSapsan#4530: HDD 16384 byte of memory
sybergoosejr#8256: syber memory motherboard
katkosmos#6502: Made this with a little bit of help during the last step (getting the gates onto the board) from <@!427964757492891649>
sybergoosejr#8256: developed gate logic boards for the same motherboard as my relay logic. and the 2 sets can be mixed and matched in anyway with only differences in timings.
katkosmos#6502: Nice! Can't wait to see it finished
Dcentrics#0001: The leaning tower of sprite handling (WIP) 3bbp, will update on progress. It's already caused 1 lol. building with <@!250024565286240257>
katkosmos#6502: Cursed Objects
Verlio_H#0201: double smoke stacks
katkosmos#6502: cursed dual d latch
sybergoosejr#8256: 8 bits of memory and dmux board on a motherboard.
sybergoosejr#8256: found a bug on the back side when i started to do multiple modules. the data line was not isolated when not selected. added another relay and rerouted power. ( my boards need power and can also have a nearly pure off state)  490 units per bit!
sybergoosejr#8256: (front RS latch)
sybergoosejr#8256: made my first relay based memory bit. (back) also powered off.
GD#7249: you have to be fcking kidding me
DjSapsan#4530: <@!138380569573720065> omg this is insane
RyanT#1426: now I wanna make a bigger TV, cause 16 x 12 is a pretty low resolution
Mechwarrior_11#7971: Damn dude, mine was 50 tiles long lol
TBS-Frain_Breeze#0771: holy shit that's insane, I wasn't expecting builds this big this early after launch. it's fast too, what's the tickrate here?
RyanT#1426: just curious, how many tiles long is this? mine is almost 28 tiles long
Stenodyon#8192: I built a keyboard and hooked it to my CPU! I wrote a small program that polls the keyboard serial interface and forwards keycodes to the terminal
RyanT#1426: It took me quite some time, but I DID IT! a 6 bpp (64 colours) 2x2 tileable quadplex module display!!!!! I think I'm done with building display modules for now
Saltypretzel#0321: yes best adder
katkosmos#6502: <@!371851806067654657> and I made this lol, 8-bit ICA
Captain Cody#1940: The CUBE - 512bytes
melonik#8905: ok ^-^
Dcentrics#0001: no reason i was just curious
melonik#8905: no that is a socket clipped inside of 2 relays  inside of an and gate inside of an xor gate inside of another socket inside of an buffer <[newline]> why?
Macrohard Onfire#0662: qr code
Mechwarrior_11#7971: <:sp_stoicmike:746543591010336829>
Pegacraffft#1193: What if <:thonk:598604478413013002>
Mechwarrior_11#7971: This better not be rickroll
Pegacraffft#1193: 
cheese3660#8641: Do 9 /hj
Mechwarrior_11#7971: U tryin to 1up me? üßê /j
RyanT#1426: heres the question: should I do 6bpp?
RyanT#1426: It's now an absolute clusterfuck of wires, but it now 5 bpp (32 colours)
hintz.jakob#3558: 
hintz.jakob#3558: compact design for 256 bytes of ram (8bit address line, 8bit data line, 2bit for read/write)
Dcentrics#0001: is that a socket clipped inside of a relay, which is clipped inside of an xor lol
pilonpl#4015: 7 segment display
DjSapsan#4530: i decided to switch to different design (work in progress) because it's very hard to use switches and hard to make fast/slow notes
cheese3660#8641: I know there were wrong notes, it just wasn't too important to me as i was kinda tired, <[newline]> Also its a pretty obvious design to implement
DjSapsan#4530: very cool, but how is this possible we made exactly the same design lol <:bobby:628326527817220106> . <[newline]> btw i hear some notes are wrong but it's not bad anyway
RyanT#1426: 4 bpp 2x2 quadplex display module
DjSapsan#4530: build
cheese3660#8641: Noodle Processing Unit doing the fibonacci sequence (Tickrate is set higher)
CrispyPin#1149: I managed to compact it further, it's now 5.167x4xN (in this case N=16) <[newline]> still fully tileable and can be extended to any number of bits (there is a lower limit at around 6, not sure exactly)
melonik#8905: sorry too late
Jimmy#8080: Please use threads for extended discussion in <#901195561980543007>!
melonik#8905: no i was doing it with someone else
CrispyPin#1149: oh i thought you used the world compactor, someone made a program that moves every component in a world to the same location
melonik#8905: because ctrl z is saved on player not in server so if someone places for example and gate and then destroy it and someone else place xor gate there and the first person presses ctrl z it will clip together
zhiayang#0738: interesting
melonik#8905: ctrl z glitch with 2 players
Pegacraffft#1193: I can imagine how annoying it was, dont worry
zhiayang#0738: how did you even get them to clip like that?
melonik#8905: i dont think you know how annoing it was to make the adder
Pegacraffft#1193: <:thonk:598604478413013002>
melonik#8905: not me tho
Pegacraffft#1193: I wanna see that XD Go to work <:KEKW:667488497128570931>
melonik#8905: ok GLHF
CrispyPin#1149: then make it serial
melonik#8905: i dont think that is possible just because you would need much more inputs and outputs
Pegacraffft#1193: I wanna see a computer built in that space
melonik#8905: you can put any component inside 4*2 space so yea you can put there anything and a lot of stuff
Pegacraffft#1193: I bet you could cram even more stuff in one block xD
melonik#8905: and its smoll
Pegacraffft#1193: Ah i see ^^
melonik#8905: its instant carry adder(ICA) so it adds
Dragon Lord#6944: 4 bpp display (tileable vertically and horizontally)
Pegacraffft#1193: What does it do?
TK#7605: https://i.gyazo.com/30cdab8c8a33c260434656e9a303bad8.jpg can shift up down left right while keeping color information (3 bits per pixel)
melonik#8905: in my mind the smallest ICA
pilonpl#4015: an adder
Michael#8718: https://ibb.co/9TpvnrD
Michael#8718: My first 3D memory circuit
TK#7605: 5 wide stackable up and sideways
TK#7605: all thats left now is up and down shift
TK#7605: https://i.gyazo.com/ccf49a5341ef1c672cfe5f121900a2ce.png 3 bit per pixel bi directional shift
musashi#0210: 10/10
Saltypretzel#0321: its so bad its funny, seamless display 1 by 1. Rate my wiring lol
Saltypretzel#0321: haha look at this thing i made
cheese3660#8641: Got bored and made this, there are a few errors though <[newline]> https://www.youtube.com/watch?v=akDnMeoqawY
RyanT#1426: TV thingy built using this next to it's control codes
Dcentrics#0001: 18x4x3 image transparency cell, 3 bit color with 000 being transparent https://i.gyazo.com/59931db2e3eb8ae8a7c811d2ae3ee8f8.jpg https://i.gyazo.com/773c12b80ccd824de277d79de3c6515f.jpg https://i.gyazo.com/1f850e6521a78b44ca477d26435c18be.jpg
Mechwarrior_11#7971: oh lol I didn't even realize it wasn't mp4 üòÖ  <[newline]> Thanks!
Jimmy#8080: Yeah unfortunately Discord doesn't display mkvs in-line. You have to convert to mp4 (or record in mp4 in the first place). <[newline]> Here's that video converted to mp4. Looks awesome btw!
Mechwarrior_11#7971: aww it went up as a download :(
Mechwarrior_11#7971: my display in action :D
Phrozen#6318: so far i'm really enjoying this game üëç
Phrozen#6318: thanks, will do. i'll get used to the mechanics soon enough
Lisa#4756: Challenge: make it smaller. I find it a nice challenge to try to make my stuff as small or as fast as possible.
Phrozen#6318: First build ever: 4 bit binary decoder
blane1257#8086: my register file (without decoders) in case youre interested, its the only component ive made yet
Lisa#4756: Dragging large sections seems to be reaaaally bad. <[newline]> I'm pasting 16 bytes of RAM at a time rn, takes about 30 seconds to paste, and FPS drops to 1 while dragging.
blane1257#8086: nice! im about to build a 32 bit cpu :p i hope the game doesnt slow down too much lol, its a pretty simple architecture though so we'll see <[newline]>  <[newline]> the register file is 32x15 bit (address 0 is 0 just like yours)
Pegacraffft#1193: AAAA why <:pain:634434331045265428>
CrispyPin#1149: I made my first CPU! It is 7-bit and has 7 registers (bc reg 0 is hardwired to 0). This means the total register capacity is 6.25 bytes
LFFB#5600: i did the same thing but only 1 bit and then stacked 8 of them on top of each other, it an interesting idea tho
Lisa#4756: Infinitely stackable RBSRAM (Really Bad Static Random Access Memory).  <[newline]> Bodged proof of concept, it is arranged in a grid.
Lisa#4756: 
Mechwarrior_11#7971: Fully stackable 2x2 pixels using 6-input displays (64 colors)
Verlio_H#0201: avoid car
Captain Cody#1940: one register
Captain Cody#1940: 2KB ram
Pegacraffft#1193: I built a demux, that is able to program itself, because im lazy
melonik#8905: i dont need to explain it <[newline]> everyone knows what it is <[newline]>  <[newline]> (if not its the game with lights you flip one and all the lights around it will also flip)
Deleted User#0000: ok but
andreramos42#3268: My car game I'm working on üòÜ I called it "Avoid Car" and you can control the car with two keys for left and right to avoid the red dots falling from the top
Stenodyon#8192: Here is the manual for it
Stenodyon#8192: I have completed my CPU! It is available on the hub here: <https://logicworld.net/view/ctn-f427b564>
VigilanteHobo#1873: We do a little arithmetic
Lisa#4756: Aaaand, I pressed one key, the entire thing got deleted somehow, and the game crashed. Lol <[newline]> Anyway, the rest of the build is just spamming buffers or and gates above that (and gates used as smaller buffer)
Lisa#4756: Bottom layer:
Lisa#4756: Top layer of the floor of a new decoder design:
Dcentrics#0001: Enjoy the light show of our 1/8th scale screen
alion02#1973: new display for my rule 110 thingy! https://discord.com/channels/401255675264761866/901195561980543007/903351175649304597 https://cdn.discordapp.com/attachments/903351175649304597/903689305359261756/2021-10-2918-58-22_2560x1440.png
Lisa#4756: I'm using AND gates with all inputs connected, instead of the buffer, because the buffer is too tall, so it screws things up
Lisa#4756: 4X16 decoder (v1) <[newline]> I'm working on another version that has the inputs more spaced out, but the outputs are closer together
Kesuaheli 2#5868: Circuit Board Tree
Bumpy#3920: I am not very good at making cool logic stuffs, but that isn't stopping me from thoroughly enjoying the game üôÇ .
Bumpy#3920: 
musashi#0210: wire clipping lol
Biggycheese69420#4947: 
cheese3660#8641: Noodle Processing Unit mostly complete
JoshuaSpeedy#3545: wire art
blane1257#8086: yeah its all good
Biggycheese69420#4947: I'm planning on redoing all of the control lines I just wanted to show off my control room to be honest.
blane1257#8086: spaghetti paradise
Biggycheese69420#4947: from a bird's-eye view
Control#8680: i got so many rooms all over the place
Biggycheese69420#4947: 16-bit CPU control room.
blane1257#8086: oof lol
Hugin#2596: expectations vs reality  <[newline]> https://cdn.discordapp.com/attachments/852992846520123392/903651149331177512/unknown.png <[newline]> https://cdn.discordapp.com/attachments/852992846520123392/903651949583433818/unknown.png
blane1257#8086: oh wow, data shows up really nicely in this thing
blane1257#8086: *hopefully..* <[newline]>  <[newline]> wiring it up was a pain, i had to make a lot of manual connections between copies, so its entirely possible that i missed a connection somewhere lol
captncraig#8603: luckily nobody has to go in and do maintenance in there after it's built.
captncraig#8603: gnarly weave
blane1257#8086: close-up
captncraig#8603: here with a ROM snapped on:
blane1257#8086: ok i lied, i decided to make at least the register file before i have to leave lol
captncraig#8603: what do you think of my memory address decoder? 3 wide tilable design
DeadlyRAPTR#1916: My new 20x40 monitor with a test circuit (running with a 150 tick clock, 30ticks on 120 off) at 10,000 ticks per second. It can run with less then a 30-120 delay but I havent changed it after testing. Sorry for awful video, needed it to work with dc limits
101#1688: Tis looking good! <[newline]> The best memory designs use sockets so that you can snap them together to make memories of any size you like. That would be a good next step if you‚Äôre looking for your next project üôÇ <[newline]> Also props for DIY-ing it instead of just looking it up üòâ
PseudoGoose#2841: buffers
QR_Query#6979: Its my first ever as well. im really proud of it... even though its next to useless
Bumpy#3920: just found an interesting bug. gotta record a video of this
101#1688: Love me some random access memory memory üôÇ
QR_Query#6979: https://steamuserimages-a.akamaihd.net/ugc/1801996354313442598/E8728BF4F11B18307A0033AC49B959015E1F9098/?imw=5000&imh=5000&ima=fit&impolicy=Letterbox&imcolor=%23000000&letterbox=false <[newline]> How its going - **5bit RAM MEMORY! 32 addresses with exclusive read or write logic!** (My first attempt shut up please)
Bumpy#3920: *insert joke about not having source installed*
QR_Query#6979: https://steamuserimages-a.akamaihd.net/ugc/1801996354305390770/1F078A1885632B178E098B3D35085DB05BEE27A5/?imw=5000&imh=5000&ima=fit&impolicy=Letterbox&imcolor=%23000000&letterbox=false <[newline]> How it started
101#1688: Ooh, very nice. I‚Äôll be stealing that üôÇ Could do with buffers on the noninverting lines though, it‚Äôs likely to produce 1 tick transient pulses otherwise üòâ
101#1688: Wait, that‚Äôs illegal!
Bumpy#3920: Yeah ive seen that stuff, Its amazing
DjSapsan#4530: https://www.youtube.com/watch?v=XJRVqzoQUG0&ab_channel=ArtInsider
Bumpy#3920: 
Stefan#5422: 
bejoscha#0284: I also feel like I have a mountain to learn. Still having fun with newbie builds üòä Msybe we need a Newbie-builds channel ü§î In any case, learning by doing is fun. More fun than copying other high level builds.
trucksarenoisy#4659: Display with keyboard
blane1257#8086: i think this diagram is slightly outdated actually but its the only one i could find on my phone :p
blane1257#8086: thinking of implementing my arch based on RiSC-16.. <[newline]>  <[newline]> im leaving town for the weekend but ill probably start work once i get back
Darth feir#7467: 2x2 pixel color display
Ecconia#4929: ICA?
pilonpl#4015: same
trucksarenoisy#4659: yeh, i came here so i can learn to do better logic
Dragon Lord#6944: don't come here to feel dumb, come here to learn and have fun :)
trucksarenoisy#4659: i guess i come here to feel dumb
QR_Query#6979: OMG
PseudoGoose#2841: For the register decoders, I came up with a cool modular design that uses 6 different modules (one for each bit of the 5 bit register address, plus one "driver" board).
PseudoGoose#2841: RISC-V dataloop is coming together <:bobby:628326527817220106>
Jimmy#8080: 1-wide register
Slimepunk#3355: each bit is one tile wide so it tiles as big as you might want
Slimepunk#3355: made a register that uses buttons to toggle bits on instead of switches so it can read in memory and its not write only
Reese4221#8317: reading / writing to a cell
FinnyBc#1852: spaghetti cpu running its first program
Captain Cody#1940: 8bit Register, 9x6x3
trainrex#9212: 64x4 byte ram for my initial cpu program memory. Each cell is 10x10 and returns 4 bytes
Dragon Lord#6944: woah... i need to try using this for my next build!
Dragon Lord#6944: RyansDisplay
Jimmy#8080: Wow, amazing!
CrispyPin#1149: damn thats creative
DjSapsan#4530: side view
DjSapsan#4530: Proof of concept. Vanilla hologram display where pixels are 1/3 size of regular lamps
parallacks#7542: Currently going through the nand2tetris in this game. Just finished wiring up the ALU from project 02. Still have to test everything but the couple tests I have done are promising. Not compacted at all, I'm going more for understanding over compact for now.
DeadlyRAPTR#1916: In a 40x20 monitor
DeadlyRAPTR#1916: Fully modular 2x2 (2x2 display pieces for 1 'pixel') Display unit with 4 colours
Dcentrics#0001: Here's some static we made for a test lol
Dcentrics#0001: here's the vram we're using in our build (3bpp)
Dcentrics#0001: eyyy nice, always cool to see people working on screens
RyanT#1426: compact 2 bpp display panel (control logic comming soon)
DjSapsan#4530: <@!306183061270298625> this is RAM
GuessWho#7332: Yo, I made my first hdd
Jimmy#8080: smol alu
Jimmy#8080: Directional thingy
GooseFairy#6680: 5x8x4 synced ALU
Deleted User#0000: intelligent central ass (machine)
GooseFairy#6680: 
GooseFairy#6680: 4x5x3 synced ICA
GooseFairy#6680: 2x6x4 ICA
Deleted User#0000: :] its my first build
CrispyPin#1149: 4 ways of having sockets go both ways for a tileable 2 wide circuit
Captain Cody#1940: 8x8bit Registers using modular components
alion02#1973: 32 tileable rule 110 cells with reset and set hooked up to 16 rows of displays running at 4 ticks per second
CrispyPin#1149: 2x6x4 instant carry adder
Dragon Lord#6944: 4x3x3 = 48 units cubed per bit
melonik#8905: my first big singlplayer build
PseudoGoose#2841: Memory in 2D is _massive_ ... What an absolute unit of a register file
PseudoGoose#2841: 32-bit instant-carry ALU, including bus connector, that I plan to use for my RISC-V CPU
mitolegy#5916: i see
Kesuaheli 2#5868: The density of your memory. It's 48 **cubic units per bit** or ~0.021 **bits per cubic unit**.
sybergoosejr#8256: switch is for power. in theory with the exception of the inverters you can shut it completely off where all wires are 0 state.
sybergoosejr#8256: my relay module to act like a real relay with normally open and normally closed. bottom left is the relay module. bottom right is a DPDT relay and the top is an RS latch using the relay modules i made.
mitolegy#5916: im sorry but ????
Dragon Lord#6944: So ~48u^3/bit?
mitolegy#5916: each cell is around 3x4x4
Stenodyon#8192: memory
DeadlyRAPTR#1916: My 8bit alu with addition, subtraction, and, nand, xor, xnor, or, nor, 4bit multiplication and 8bit division. Then it also had comparative stuff like =, < and >
Dragon Lord#6944: What's the density?
mitolegy#5916: ive made a (in my opinion) quite compact 256 byte memory module. hopefully I'll have a CPU to hook to it soon enough.
mitolegy#5916: mmmmmmm love me blinking busses
Stenodyon#8192: my CPU writing to terminal through serial :3
JoshuaSpeedy#3545: what to build in wireworld?
CrispyPin#1149: what should i build in wireworld?
Leo3065#5297: Now do the music üòâ
Dragon Lord#6944: Sorry, I misremembered. 2 xors and 2 and gates, not 2 xors, a not, and an and. <[newline]> My b
Riku#9814: Ah yes, the start of my 8 bit computer. I basically came up with this clock design off the top of my head. The switch turns the clock on and off and the button lets you manually pulse the clock. The clock is just an inverter and a delay component basically. \:)
Zephi#4594: tried to make GOL, failed horribly <[newline]> https://cdn.discordapp.com/attachments/864853960980693012/903213435473498112/2021-10-2804-27-16_1920x1080.jpg
Darth feir#7467: got a ip transceiver running 32 bit in 33 ticks ^_^
gotenks917#3427: now 240 bytes of ram with 3 tick read and write
gotenks917#3427: 225 bytes of ram almost done
musashi#0210: ALU
Michael#8718: Hopefully not too much off topic, but this is where I learned how ALUs that do more than just add work.  Complete with visualization - http://www.righto.com/2017/03/inside-vintage-74181-alu-chip-how-it.html
Vekenti#0001: Trying to remember the circuits from my minecraft redstone days.. I got tired of working around redstone logic so its nice to have a ***good looking 3D logic simulator***
Michael#8718: nice, Vekanti.
Vekenti#0001: ALU can do add, subtract, left & right shift, and zero compare
Vekenti#0001: https://i.imgur.com/yEuRMuH.jpeg Basic ALU, 4 registers + 1 Immediate register and the circuits to control the registers. CPU is getting there lol
Michael#8718: sorry, Jimmy
musashi#0210: ok last noob post <[newline]>  <[newline]> same structure, different operations
Verlio_H#0201: ok
Jimmy#8080: I mean, or don't, but in that case please give constructive feedback about why you dislike the threads
Jimmy#8080: Ok I'm increasing slow mode to 1 minute, use the damn threads people
Michael#8718: First I heard of that video
Broyojo#2667: oh wow
PseudoGoose#2841: (guys there is a thread geez)
Michael#8718: I saw that Dave's Garage guy do it, using Task Manager
PseudoGoose#2841: Real time
Broyojo#2667: is this running in real time or sped up?
Michael#8718: Anyway, I don't get the meme.  Guess I am too old to understand the things kids do
Broyojo#2667: damn that is amazing Goose
Michael#8718: Or is it called Good Apple?
cheese3660#8641: its bad apple
PseudoGoose#2841: Idk, it's kind of a meme that you try and play Bad Apple on everything possible, especially underpowered stuff
Michael#8718: I have to ask, why is everyone doing Bad Apple based stuff?  What's special about Bad Apple?
musashi#0210: WHICH ONE ARE YOU REPLACING <:bobby_sob:692807893023588363>
Jimmy#8080: More like Good Apple
Dragon Lord#6944: you should upload it to secure your 'lw first' lol
PseudoGoose#2841: I can grab some shots of older prototypes
PseudoGoose#2841: It is. Though I forgot to take screenshots before closing the world ü§™
Dragon Lord#6944: is that vanilla?
PseudoGoose#2841: (copied video description here, because it isn't shown on desktop) <[newline]> This video was created entirely using vanilla Logic World components, with the help of a custom world generator: https://github.com/agausmann/LogicWorld-BadApple <[newline]>  <[newline]> The generated video is 24x18 at 15fps (though the framerate gets worse over time, due to clientside lag). The world contains 275,000 components and 345,000 wires, taking around 90 minutes to load on my machine in Logic World version 0.90.
PseudoGoose#2841: https://youtu.be/R5hdmBmmn0g
Dragon Lord#6944: as a fun challenge, it's possible to do a full adder with 2 xors, an inverter, and an and gate ;)
Dragon Lord#6944: yep!
musashi#0210: idk if this makes sense to someone who knows about this stuff
Darth feir#7467: i agree
Dragon Lord#6944: yee :)
musashi#0210: i could spend all day just making really simple circuits, learning about this is so fun in this game lol
musashi#0210: i just kinda... twisted it
Dragon Lord#6944: ~~you could also move the inverter to be off of the board and have it not have the offset for higher density~~ ;)
musashi#0210: the two block space was bugging me
Dragon Lord#6944: ooo, offset to increase density... nice
musashi#0210: mm
musashi#0210: <:bobby:628326527817220106>
musashi#0210: the reaction from jimmy shows me im improving
Michael#8718: My four word memory video.  I hacked the row decoder a lot, I simply hardcoded some gates.  I have no where to go but up - https://www.youtube.com/watch?v=zLSGIlIXnRA&list=PLBJP7W0Si5s-n3ebPOJOzhCYWLWjpajc7&index=7
Michael#8718: I did one of those, and a video, mine wasn't as clean looking.  I like the "edge" design, makes it easy to run the data lines I can see
Michael#8718: Clean looking subtractor
musashi#0210: 8 bit subtractor
CrispyPin#1149: 9x4x5.1667 dual-read byte module (30% smaller volume per byte compared to the 1 bit version)
Dragon Lord#6944: Out of curiosity, how many people did I get with this?
Ecconia#4929: <@!499587666497634314> it is in.
Infini#5724: What server is this in?
Jimmy#8080: Cute lil decoder
JoshuaSpeedy#3545: 16 Segment Display
Stenodyon#8192: 16-segment display for my computer
Yxlop#5105: that is a decoder yes, i like your routing
berry#1313: pretty sure this is called an encoder idk, but I think it's a pretty tiny and neat design
DanielGJ44#4557: Threads: *exist* <[newline]> <#901195561980543007> channel:
pilonpl#4015: What does the controller do? (Sorry for noob question)
Puzzlebark#3421: next thing i need to do is compact my adders
Puzzlebark#3421: setting up the segment controllers was supremely satisfying, got them to fit into 7x7 boards
DanielGJ44#4557: Increasing the delay will just inconvenience people trying to post build pictures individually, so it only really punishes the people who intend to use the channel properly
Stenodyon#8192: And regardless of slowmode delay, it's the rule of this channel to put discussions in threads
CrispyPin#1149: ah ok
Stenodyon#8192: Only Jimmy is strong enough to have the power to change slowmode delay and channel topic
CrispyPin#1149: put that in the topic maybe
Miska#7569: make longer time slow mode
IsCoffeeTho#0001: makes sense
Stenodyon#8192: Heyo! Please use threads for discussions in this channel :)
Miska#7569: im young or dumb or both
Miska#7569: ?
Miska#7569: where are the rest 248 adresses
Puzzlebark#3421: what are you confused about? it's a 256 byte memory and "dense" is in terms of space taken up per byte (presumably)
Miska#7569: what does this mean
Miska#7569: what
Puzzlebark#3421: i believe when they say dense they mean space, not capacity <[newline]> and the capacity is just what it says on the tin
Miska#7569: then how is this 256 bytes
Puzzlebark#3421: yes
Miska#7569: so is it 256 byte then
Puzzlebark#3421: ..well, yeah but you get what i mean x)
Miska#7569: 8 bits is 1 letter not a word
Puzzlebark#3421: so each address has 1 word that consists of 8 bits
Puzzlebark#3421: i think they meant, each word of memory is 8 bits
Miska#7569: is it 256 byte then?
Miska#7569: what
Puzzlebark#3421: yeah it's correct
Miska#7569: so is this right?
Puzzlebark#3421: some real awful stuff going on behind the scenes but oh well
Puzzlebark#3421: mhm
Miska#7569: im new
Miska#7569: Isn't a 256 byte ram that has 256 adresses and each adress holds 8 bits?
Puzzlebark#3421: got the hex display going, good stuff
Hugin#2596: Combination Lock <[newline]> https://cdn.discordapp.com/attachments/852992846520123392/902981241626836992/unknown.png <[newline]> https://cdn.discordapp.com/attachments/852992846520123392/902981436779405392/unknown.png
JPM-Baroque Spaceship#6542: (lets move to <#401255675264761868>)
circuitgamer77#0377: Is it on the new protocol now?
circuitgamer77#0377: I don't know what I would use it for, but it could be nice for testing :)
JPM-Baroque Spaceship#6542: if you want I can build u one
circuitgamer77#0377: Do I have a tower yet?  I can make my own if I need to (I'm going to make a server plot eventually), but it could be nice in the meantime...
pilonpl#4015: 
pilonpl#4015: this game is so satisfying
pilonpl#4015: finally
JPM-Baroque Spaceship#6542: Our small cloud storages: (Right now 8 bytes for user)
CrispyPin#1149: 2x3x5.5 dual-read ram
Hugin#2596: 128 memory <[newline]> ***lame, big and slow*** <[newline]> I made it to test modules for 2kb version <[newline]> will make and post 2kb version prolly today or tomorrow
Puzzlebark#3421: the horribly space-optimized 8 bit adder, now featuring two's complement subtraction
Puzzlebark#3421: 
Puzzlebark#3421: 
Puzzlebark#3421: 
CrispyPin#1149: https://www.youtube.com/watch?v=ioDqbKRXckw dedicated rule 110 module (not programmable like the last one)
bejoscha#0284: Having fun with modular building of basic elements...
Control#8680: Lol
DjSapsan#4530: what is your interface for?
Stenodyon#8192: Doing a tour live will be unlikely as I don't have a mic but I could make a video, and in any case I'm going to write a manual for it and upload the world once it's done
Control#8680: Can you do a tour of your CPU for me later?
Control#8680: Pog
Stenodyon#8192: Serial interface for my CPU
xvid.avi#0465: yoo my gross rat's nest wip calculator in the distance
Jimmy#8080: Wow! Mesmerizing wire patterns!
JC Denton#9567: An ALU
JC Denton#9567: Huge üòÜ
JC Denton#9567: 
Captain Cody#1940: 
Captain Cody#1940: My first build: 8bit to 7segment
pilonpl#4015: 
CrispyPin#1149: I'm trying to make a memory module for it but it's hard. I can't fit a d-latch or inverter in that space, so i gotta use xor gates and and gates only
Control#8680: pog
CrispyPin#1149: this thing but 2x2
Jimmy#8080: 
Jimmy#8080: I'm gonna try an experiment. I notice a lot of discussion happening here in <#901195561980543007> , but I think the channel would be better if it had minimal discussion and was mostly pretty pictures and text describing those pretty pictures. <[newline]> So, I've enabled slow mode in this channel. Please only post builds to this channel for now, and if you want to discuss somebody's build then create a thread for it. We'll see how this works, if it sucks and we all hate it then I'll revert the change :)
DjSapsan#4530: i'm not planning to create guides. Maybe I can explain something if you have questions
QR_Query#6979: woah.. thats cool! do u have a good guide on one of those or
DjSapsan#4530: <@!814345506078588970> just a counter. It loops from 0 to 255 to count current address.
Dragon Lord#6944: 1-31 tick output pulse
Dragon Lord#6944: variable length pulse extender (acts as one tick delay if inputs come in while the delayer is in cooldown, but not an issue for things like music players)
oxi#0420: i think so
Kesuaheli 2#5868: 
Kesuaheli 2#5868: **- - - __8-Bit Register__ - - -** <[newline]> ‚Ä¢ no wire crossing feature <[newline]> ‚Ä¢ multi-layer-PCB-technology <[newline]> ‚Ä¢ panel lights to show saved byte <[newline]> ‚Ä¢ debug input to enable panel lights <[newline]> ‚Ä¢ tri-state output <[newline]> ‚Ä¢ single circuit board <[newline]> ‚Ä¢ size: l\*w\*h = 17\*10\*5 *(for 8 bit variant)* <[newline]> ‚Ä¢ easy expandable (¬±2 tiles in length per bit) <[newline]> ‚Ä¢ simple stackable design
QR_Query#6979: whats in the box
Dragon Lord#6944: idea: binary search tree style network: signals are repeated through binary switches, and if a signal reaches a destination port, all subsequent bits are considered data lol
DjSapsan#4530: it will keep few bytes to write or few neighbour bytes to read
Buzz#6223: that's super cool
DjSapsan#4530: haha yes, that's why my next step is cache
Buzz#6223: or at least it is if you can read it that fast, otherwise you gotta wait for the data to come around again ;P
Buzz#6223: O_O
DjSapsan#4530: first is super density and second is read/write stream 1 byte / tick
Buzz#6223: hella compact
Buzz#6223: thats super cool though woah :o
DjSapsan#4530: yep, but it has many pros
Buzz#6223: oh god is i just a huge delay line
Buzz#6223: hell yeh B)
DjSapsan#4530: <@!427964757492891649> nice but now you can use HDD for moooar memory
Buzz#6223: attached is 128 bytes of ram
Buzz#6223: it's not done yet, here's a picture of my gross rat's nest CPU running a program that increments A and loops
DjSapsan#4530: **the fastest and the most dense HDD ever.** <[newline]> 256 byte memory. 1 tick rotation. 256 ticks full cycle. Lowest possible latency. I composed a special AND gate with 8 inputs to reduce latency <[newline]> https://youtu.be/XCmkKwNS7eY
Stenodyon#8192: I think I'm just a few wires away from being able to compute fibonacci
ardhati#9461: now it can actually run instructions
ardhati#9461: hey, very good first steps for a cpu though
Stenodyon#8192: It doesn't do anything useful but it means my cpu can now call procedures and return from them
ardhati#9461: when executed to be specific
ardhati#9461: what does it do?
Stenodyon#8192: A program that my CPU can now execute
Darth feir#7467: so the 16 bit one will have a another board that you can keep adding on come on 64 bit in 65 tics
Darth feir#7467: it has both and im setting up a 16 bit and extension module
Darth feir#7467: yes
JPM-Baroque Spaceship#6542: its all in one board
JPM-Baroque Spaceship#6542: the "standard" transmitter and receiver doesnt plug with any board
circuitgamer77#0377: Does it plug into another board w/ sockets, or standalone?
cheese3660#8641: Ooooo, also 9 ticks per byte, is 1 tick per bit + start bit?
oxi#0420: <@299379046012420096> already designed a sernet receiver and transmitter with 9 ticks per byte which is pretty cool
musashi#0210: 16 bit adder to a 16 tile display (quite a bit of wire clipping)
circuitgamer77#0377: I'll be working on that (maybe) :)  Fun challenge :)
cheese3660#8641: I want to see 1 tick per bit sernet
JPM-Baroque Spaceship#6542: 4 ticks
cheese3660#8641: I.e ticks for bit
cheese3660#8641: Whats the speed?
cheese3660#8641: Nice
oxi#0420: Also im going to make a device to do this protocol automatically, rather than the user having to manually send each packet
oxi#0420: Heres a video of the server, theres still a couple bugs and sometimes it doesnt send back 100% the full data but thats a timing issue and im going to fix it tomorrow, or in v0.02
oxi#0420: oh yes lol
cheese3660#8641: Oh gosh
Dragon Lord#6944: now we just need to make a hardware implementation of rsa using diffie-hellman key exchange over your network lol
DjSapsan#4530: highest IP in the local network
oxi#0420: huh?
Dragon Lord#6944: cool project tho lol
Dragon Lord#6944: what the hell?
cheese3660#8641: The point is to not have a clock line iirc
DjSapsan#4530: <@!413655783297777675> cloud IP is broadcasting IP haha
oxi#0420: wait ill record a video of the system
oxi#0420: each tower will share the same data lines as they only allow reading or writing if the IP address matches the one assigned to it
JoshuaSpeedy#3545: Or idk, I'm just stupid
JoshuaSpeedy#3545: If your gonna make multiple towers
JoshuaSpeedy#3545: To keep everything synched
JoshuaSpeedy#3545: Maybe alongside the data cables, you could also have a clock line
JPM-Baroque Spaceship#6542: thanks
oxi#0420: thanks :D
JoshuaSpeedy#3545: Such a cool project
oxi#0420: 
JPM-Baroque Spaceship#6542: lmao
oxi#0420: that bugged lmao
oxi#0420: 
oxi#0420: 
oxi#0420: Me and <@!383662151170261014> have created a Cloud Storage Server! Each client (IP) gets 8 bytes of storage currently (only 1 tower is made right now) and you can store and load data over our transmitter and reciever systems using a protocol!
cheese3660#8641: Oh yeah...
cheese3660#8641: Then thats what it will support mayhaps
Verlio_H#0201: yes
cheese3660#8641: Are you talking about URCL-OS, because I dont know much about that
cheese3660#8641: What?
Verlio_H#0201: you know what 16 bit cpu with urcl support means right
Stenodyon#8192: Crap I forgot this channel is only for screenshots and videos, not for discussion <[newline]> bad mod, baaad
Dragon Lord#6944: whole section that is just descriptions of machine code and assembly instructions
Stenodyon#8192: Thank you!
Dragon Lord#6944: 'the avr mivrocontroller and embedded systems' by mazidi, naimi and naimi
cheese3660#8641: Yee! ~~although the ram will be modded again, prolly with C# to make 32768 words of memory or something because i do not want to do that vanilla~~
Stenodyon#8192: I don't particularly enjoy coming up with machine code, I never know what instructions I should put and how to make decoding easier for myself
Stenodyon#8192: I'm interested
Stenodyon#8192: Nice! Can't wait to see that
Dragon Lord#6944: i have a good textbook for it if you need a specific detail lol
Stenodyon#8192: I should take a look at avr then
Stenodyon#8192: aaah I understand
Dragon Lord#6944: if you enjoy making machine code (i know i do) then you can ignore it lol
Dragon Lord#6944: so you don't have to work on something you don't enjoy as much
Dragon Lord#6944: i'm just saying that if you're more interested in hardware than making machine code, then you could go with that
cheese3660#8641: I'll prolly go von neumann with the 16 bit cpu imma make tho
Stenodyon#8192: I've programmed avr but I'm not familiar with the machine code. What do you mean by "functionning computer" and "machine code standard" and specifically why are these concepts opposed ?
cheese3660#8641: Yeah early on i decided to go harvard
Stenodyon#8192: Ah I see, I'm building a von neumann cpu so I'm bound by the data bus width
cheese3660#8641: Because my alu takes 3 register instructions
Dragon Lord#6944: are you familiar with avr assebmly/machine code? it fits in that many words if your goal is to make a functioning computer and not a machine code standard.
cheese3660#8641: I use 22 bits per instruction, so I have enough space for opcode and 2 immediates or 3 registers or an immediate and 2 register
Stenodyon#8192: I have several instructions that need 3 registers specified, and one even takes an ALU opcode on top of that, I'm trying to keep instructions under 3 bytes and as much as possible under 2 so I don't have *that* much wiggle room
oddron#8955: Is this ready for general use?
CrispyPin#1149: jimmy asked if i had considered making 1d ones and said why not
JoshuaSpeedy#3545: Minds literally in synch
cheese3660#8641: Only 3 bits?
CrispyPin#1149: lmao i had not seen that
JoshuaSpeedy#3545: I replied to it
JoshuaSpeedy#3545: <#401255675264761868>
circuitgamer77#0377: I'm planning to record several videos of Logic World :)  I want to build a ton first, and wait for a couple major bugs to be fixed so they don't end up in the video.
JoshuaSpeedy#3545: At this point it could become like a YouTube series
CrispyPin#1149: wait you mentioned that one?
JoshuaSpeedy#3545: I like how anytime I've mentioned a cellular automata you were immediately on top of it
Stenodyon#8192: I only have 8 registers, I wouldn't have enough instruction space to address 16 lol
IsCoffeeTho#0001: LWCV bro <[newline]> https://github.com/IsCoffeeTho/LWCommunityVersion
cheese3660#8641: 8
Stenodyon#8192: Noice, 8 bit or 16 bit registers ?
cheese3660#8641: It also has 256 bytes of ram but thats with modded components
cheese3660#8641: My cpu has 16 bytes in refisters in about the same space
cheese3660#8641: Cool
Stenodyon#8192: 16 bytes
cheese3660#8641: How much ram?
cheese3660#8641: Nice
Stenodyon#8192: Small ROM and RAM I built to test my CPU
CrispyPin#1149: i will probably make a non-programmable version of rule 110
CrispyPin#1149: https://en.wikipedia.org/wiki/Elementary_cellular_automaton#Images_for_rules_0-99
DjSapsan#4530: Wolfram is proud of you!
CrispyPin#1149: 
CrispyPin#1149: üò≥
Verlio_H#0201: rule 34
CrispyPin#1149: rule 110 (or any other rule)
CrispyPin#1149: https://youtu.be/c6h1PvJi_Os
JPM-Baroque Spaceship#6542: 81.152.33.229
cheese3660#8641: What server?
FinnyBc#1852: <:chefskiss:600065479910096925>
oxi#0420: me and <@!383662151170261014> have now made a transmitter and reciever that uses an IP Address to select who should recieve the data. We are now working on an ethernet service around the server that includes a cloud storage server, with packet protocols for sending multiple bits of information like a return address. Also, <@!299379046012420096> has made a compacted version of the transmitter and reciever system that is faster! Down to 9 tics for 8 bits
Macrohard Onfire#0662: so if you do the undo bug and then move the whole board somewhere else, do the wires get deleted again or does it only check with outside components?
Pleezon#8867: <:cooldude:804444083786874901> world-parsing & editing
cheese3660#8641: Undo bug?
Pleezon#8867: Just a casual absolute fucking mess
Macrohard Onfire#0662: ALU we made. It features all logic combinations(LOG) and also works with negative numbers (==, !=, >, <, >=, <=) that can be used in conditional statements, adder/subtractor (ADD) and bit shift left(BSL) and bit shift right(BSR) that shift number A by B many bits. it's 16 bit but all components are modular so one could make it in any size they want. this is shown from the front side back so left and right shifts look reversed
Dragon Lord#6944: You might want to check out my animation tool. It has a modular note tool on the back of the right panel. I'm not sure if it would help, but it allows you to set notes not only to different delays, but also different lengths. :)
FinnyBc#1852: 32768 bits <@!859806257774723102> where is this ram mod
Jakob#0654: nice
DjSapsan#4530: it's insanely hard to make music in this way. Often notes are blended together and it's impossible to change wired delayers. I will try to play music from memory on higher tickrate speeds
DjSapsan#4530: Darude Sandstorm in LW
Lim√≥n#7879: Someone made a ram mod that drastically reduces the amount of wires
Vekenti#0001: thicc boy
Jakob#0654: it has 4096 bits of storage
Jakob#0654: this ram almost crashed the server no cap
JPM-Baroque Spaceship#6542: Well Ethernet, it has one wire
JPM-Baroque Spaceship#6542: Internet for the server
cheese3660#8641: SERNET?
oxi#0420: I cant remember the person who was asking for a standard but i guess this kind of counts as one
oxi#0420: np! me and jpm have expanded the transmitter and reciever to send an 8-bit address and then 8 bits of data.
JPM-Baroque Spaceship#6542: SERNET tranmitter and two recievers with their own IP (Thanks r3nn!)
Red_3D#3062: I love the look of the leftmost one, but if looks aren't the first priority I'd go with the one in the middle.
alion02#1973: c o m p r e s s
Stenodyon#8192: <:think:762087260912746526> They all look cool
JC Denton#9567: Which one would look the coolest in my computer?
JC Denton#9567: 
JoshuaSpeedy#3545: Someone need to make a to-spec motherboard
JC Denton#9567: what if I built a 16-bit computer like that
JC Denton#9567: smaller one next to it
JC Denton#9567: Why did I even make this üòÇ
JC Denton#9567: 
Vekenti#0001: Yup
RyanT#1426: Jimmy is fine with mods that add complex components, just not in vanilla
Vekenti#0001: That's the whole point of mods though
RyanT#1426: He doesn't want to add anything unnecessary complex, because it will make the game less fun in his opinion
Vekenti#0001: https://i.imgur.com/OcLK73Z.jpeg Here's my RCA... Trying to figure out how to make a mux with gates <:cryingcat:643876357364776964>  I'm used to being spoiled in logisim where I just have convince of a pre built mux chip üòÜ
Control#8680: did he say anything about 3 input xors?
RyanT#1426: I remember him saying its because AND is simpler (AND requires 3 inverters, XOR requires 5)
Control#8680: just change it, jimmy
Control#8680: ah
Control#8680: why is the AND gate smaller
Control#8680: you know what i mean
Control#8680: i meant like
Whisper#7076: That's McBussin my guy
alion02#1973: damn you, absolutely monstrous buffers!
Control#8680: well that would work
Control#8680: i mean
alion02#1973: it's a bit chonky but yeah
alion02#1973: (1 tick latency 3-way XOR)
alion02#1973: you mean, one of these?
Gositi#4985: I will check it out
Gositi#4985: huh ok. well I suppose that makes sense
Control#8680: even better IF WE HAD 3 INPUT XORS ahhhh
Control#8680: really good
Control#8680: less space, less time
Control#8680: instead of adding the "rows" dadda tree multipliers add up the columns using full adders
pilonpl#4015: 
Gositi#4985: ?
Control#8680: thou must learn of the the dadda tree multipliers
JC Denton#9567: I wonder if this happens always if you try to make a ripple carry adder as a square
Gositi#4985: Closeup on one of the 4-bit adder boards.
Gositi#4985: another angle
Gositi#4985: Inverter (and peg + circuit board of course!) only 4*4 bit binary multiplier.
Yxlop#5105: i love this kind of thing its just incredibly hard to debug so i have to avoid it
JC Denton#9567: Everybody makes something neat looking and my ripple carry adder looks like this üòÇ
JC Denton#9567: 
CrispyPin#1149: the red and green parts are just for testing
CrispyPin#1149: made a memory module that plugs in the back and stores all 16 bits
CrispyPin#1149: thanks
CrispyPin#1149: cloesup
Nik#1011: nice display
Nik#1011: :(
CrispyPin#1149: nope :(
Nik#1011: oh, you can't do that in the other direction?
CrispyPin#1149: but then the front board is the root board
Nik#1011: you can put mounts on the front board tho, in between the panel displays
CrispyPin#1149: it is impossible to connect them if you have the entire front board full
Nik#1011: why aren't you using panel displays?
Nik#1011: huh, neat!
Broyojo#2667: oh no very sussy display
CrispyPin#1149: just put 2 next to each other
CrispyPin#1149: thats the neat part
musashi#0210: <:bobby_ok:692790276623958087>
musashi#0210: make it 32 bit
Control#8680: sus
CrispyPin#1149: tileable 16 bit monochrome display
Nik#1011: agree. those busses are gorgeous
Nik#1011: grid colors definitely on-brand hehe
Dragon Lord#6944: straight BUSSIN' on gah
CrispyPin#1149: 
JoshuaSpeedy#3545: Good job
CrispyPin#1149: i made that today
CrispyPin#1149: i did
JoshuaSpeedy#3545: I thought you said you were gonna go to sleep?
CrispyPin#1149: ty
Shamus03#0617: See <#588822987331993602> - it's the predecessor to logic world, and basically only has NOT gates and switches
Stenodyon#8192: holy shit that is cool
CrispyPin#1149: https://www.youtube.com/watch?v=rrRQ4JtXd30 WireWorld @30tps
Control#8680: you are taking us all to school then ig
Lim√≥n#7879: The grid colors are nice
Stenodyon#8192: Thank you :3
CrispyPin#1149: that's some sexy cable management
Stenodyon#8192: ALL the busses!!
DjSapsan#4530: Wait it's your wires with the shift
Darth feir#7467: less than a second update ^_^ clock second display over one wire
Topology Turtle#2609: Or rather, where can I go to learn about it ü§£
Topology Turtle#2609: What is TUNG?
Jakob#0654: GPU that can draw pixels and rectangles and has serial connection to 16x16 3 bits per pixel monitor
Darth feir#7467: 10 tic transfer still need to fix one thing tho
Darth feir#7467: im not good at vidio taking
Slimepunk#3355: <:bobby:628326527817220106>
Slimepunk#3355: built an 8x8 drawing screen in multiplayer
Darth feir#7467: woow i now how to copy... this thing is neat its hard to make the receiver look neat and orderly
Chime#3134: (256 bytes, I seem to make big ugly rams but they're getting smaller!)
Chime#3134: address 0xff, the high nibble's select line shifts all the way down to the end, and the low nibble's 0b1111 all the way down
Chime#3134: weird thing I'm doing to spread 4bits to 16 (decoder) and then each step shifts one bit by having its output slightly misaligned
Chime#3134: very primitive bus, and the spacing is a legacy of a different design, but it's gotten me here.  wherever here is!
Jimmy#8080: That is so clever, I love it!
Chime#3134: they work... might be more performant to use something else but I haven't checked
Chime#3134: Right; I wanted keys for alignment and polarity/gender
Jimmy#8080: What are the unconnected pegs and sockets on the ends for? Is that to ensure proper alignment?
PLYSHKA#6201: Designing nice system so others would  use it as great base for their implementations
Chime#3134: "I almost know what I'm doing!"
PLYSHKA#6201: Pretty much the same feeling in programming
Riku#9814: Omg I left my mario world music attempt in there üòÜ Oh well
Riku#9814: I'm super proud of this even though it doesn't seem like much \:D
Riku#9814: https://logicworld.net/view/ctn-53171dfc
Chime#3134: the joy of designing reusable interface standards so you can drop new versions of subsystems in with no trouble üòÑ
Jimmy#8080: big improvements are coming
Dragon Lord#6944: nice
FinnyBc#1852: it needs 4 ticks to get a consistent write. (write pulse 4 ticks after address update)
FinnyBc#1852: it can run at around 1000 tps without the server complaining but i get like 10 fps
Dragon Lord#6944: ah
Saltypretzel#0321: The controls are ok for me it‚Äôs just it is quite slow and sometimes the objects randomly rotate and flicker
FinnyBc#1852: i swapped the last relay for an and gate mb
FinnyBc#1852: 
Dragon Lord#6944: yeah, i'd like to see something like how space engineers allows placement paired with the alt key method that you're already using. that would be perfect, but i'm fine with what you have for now :)
Saltypretzel#0321: Jimmy please fix
Saltypretzel#0321: Also logic world has some serious placement problems for large objects which is an impediment for large things lol
Dragon Lord#6944: not bad...
Dragon Lord#6944: so 3-5 ticks?
FinnyBc#1852: the longest path in the address would be: inverter, and gate, and gate, relay, relay
Dragon Lord#6944: that's fair i guess...
Saltypretzel#0321: I think doing inverse is better, units per bit
Dragon Lord#6944: wires and pegs are also instant, ofc
Dragon Lord#6944: except relays, which take one tick to enable, but transmit instantly and diodes which are instant
FinnyBc#1852: does eack item take 1 tick?
Dragon Lord#6944: max amount of time to read or write data to a register
Dragon Lord#6944: for read and write
Dragon Lord#6944: worst case time
Dragon Lord#6944: wct read/write?
FinnyBc#1852: i think i could make the address decoder 4 units shorter if i really tried. bringing it up to 0.047b/u^3
Dragon Lord#6944: niiiiice
FinnyBc#1852: 88x110x84 813,120 cubic units. 32768 bits. 0.0402 bits per cubic unit
Verlio_H#0201: 1b is .3m right
Dragon Lord#6944: i think my best density so far has been ~.03b/u^3, but i just kind of slapped the bus on it. I could compact it down to ~.04 by reorienting the bus.
Broyojo#2667: we can measure memory density then
Broyojo#2667: which is like that square size I guess
Dragon Lord#6944: ^^
Broyojo#2667: if a unit is 10cm
Broyojo#2667: b/u^3
Broyojo#2667: yes
Dragon Lord#6944: b/u
Dragon Lord#6944: ooo, good standard
Broyojo#2667: what is bits per cubic unit approximately?
FinnyBc#1852: 1024 x 32bit ram. 4kb
GooseFairy#6680: some parts extend a 1/3 block out from the 5x4 base
alion02#1973: boards are .5 thick
alion02#1973: how did ya get a .33 in there?
GooseFairy#6680: tileable
GooseFairy#6680: 5.33 x 4 x 3.33 instant carry adder
circuitgamer77#0377: just added an error line, currently only goes high when the iteration counter that tracks the quotient overflows, which most likely indicates a divide-by-zero error.
circuitgamer77#0377: I've been sticking to one world when I can, but my original world is unusable at the moment so I started a second one.
musashi#0210: <@!548699973672370222> do you have just one world for every one of your builds, or are you making a separate one every time? i want to play with everything you make
circuitgamer77#0377: Produces errors due to relay bug, but here's a (pretty much) final version of the 8 bit division coprocessor.
Dragon Lord#6944: 16x16 animation tool <[newline]> https://logicworld.net/view/ctn-5035023a
trainrex#9212: 8 byte stack
Shamus03#0617: TUNG, but in LW
Saltypretzel#0321: but its very packed and confusing to navigate inside
Saltypretzel#0321: Well there are a few pegs jammed inside here or there.
oddron#8955: Wow, that is tiny! How much of the volume between circuit boards is used? All 30 voxels (5 x 3 x 2) ?
Saltypretzel#0321: 
Verlio_H#0201: tung flashbacks
Shamus03#0617: can be reset with an at-least-2-tick pulse to both d-enable and the not gate
Control#8680: sheeeeeeeesh
Shamus03#0617: 3x3 tileable counter module, send a 1 tick pulse to the d-latch input
Chime#3134: The builds I've seen other people doing generally don't seem to use sockets, and I suspect they don't scale well computationally, but for organization they are so nice and I JUST LOVE SOCKETS OKAY ‚ù§Ô∏è
Chime#3134: I do find that most of my time is spent lining up large cable buses, even with tilable bus transit lanes, but I forsee adding some mods to fix that :3
Chime#3134: main blockers: lack of stacks (i.e. copying 1-scrolllllll), crasher on grabbing multiselected linked sockets, and probably not terribly efficient
Chime#3134: the console can do passive monitoring or bus driving for 8bit data and 16bit address
Chime#3134: there are switches and an xor address comparitor on the left there for setting the bank address that that module should "listen" on
Chime#3134: meshes extend to 16 in each direction, making a full 256 byte page (3x3 shown because muh stacks!!)
Chime#3134: the 10x13 ram modules tile in two dimensions with row/column/bank selectors as well as read/write/clock, and will share bus lines in their mesh appropriately
Chime#3134: tilable byte-addresable ram and controller and console
Chime#3134: 
Chime#3134: 
Control#8680: crazy
Topology Turtle#2609: 
Topology Turtle#2609: Alright I think I've reached a maximum for which I am willing to take this idea of using only inverters, 32 bit adder. Was a fun project, and looks like a crazy city powergrid or something
Control#8680: because the AND and XOR are mutually exclusive
Control#8680: yup
oddron#8955: The relays work correctly for your circuit?
Control#8680: here's mine
Saltypretzel#0321: (Also there is a peg sticking out, but that doesn‚Äôt affect tilability)
Saltypretzel#0321: Sure, once I get home
oddron#8955: Can you show us a side view of your adder circuit?
Saltypretzel#0321: Also tileable
Saltypretzel#0321: 2 adders fits in 5 by 5
Saltypretzel#0321: https://media.discordapp.net/attachments/751679335781498931/902309790355718184/unknown.png even smaller 2 instant carry adders. It should be like 80% packing ratio of compoenents in volume I think.
Jimmy#8080: Awesome progress!! I really love the vertical busses with the Through Pegs, those look so good!
Reese4221#8317: clicky
Reese4221#8317: 
Jimmy#8080: Oh man that is so like brutalist and sharp. I love this building style
Gen#1234: Just started out today, on my way to build my first 256 byte memory. Working so far: 8bit storage pod, addressing through 2/3 bit coordinates. Now i just have to combine the both together. All done by myself without any research lol
CrispyPin#1149: the rules are pretty easy to simplify if you can count the neighbors <[newline]> where `N1`, `N2`, `N3`, `N4` = the digits in # of neighbors (in binary, `N1` is LSB) <[newline]> `state = (state OR N1) AND N2 AND ~N3`
ardhati#9461: with wires and from the looks of it its a pretty small build so thats impressive
ardhati#9461: cuz u gotta do all the rules conway established
ardhati#9461: well, yeah it wouldnt be but thats still impressive as hell
CrispyPin#1149: but thanks
CrispyPin#1149: i mean it's nowhere near as complex as a cpu
ardhati#9461: thats insane
ardhati#9461: how do people even do conways game of life
CrispyPin#1149: https://www.youtube.com/watch?v=5gEc37G-3XE
a tiny cactus#1776: <:KEKPOG:695858422398189570>
Topology Turtle#2609: 
Topology Turtle#2609: I had some fun making an 8 bit adder with using any of the built in logic gates, just inverters üòÑ
RyanT#1426: ok
Hugin#2596: Will see tomorrow, now I am physically not able to
RyanT#1426: ok, also do you wanna join my server?
Jimmy#8080: The drift rate is around 1 second per day I believe. In a future update I'm going to be correcting the drift based on the system clock :)
ardhati#9461: that lights up when your correct
ardhati#9461: obviously it wouldnt be a functional door, more or less just a display
ardhati#9461: to get a pass
ardhati#9461: like pressing buttons in a certain order
ardhati#9461: im in the mood to make a button lock
Jimmy#8080: Please don't use <#901195561980543007> for long conversations. If you need an additional text channel for chatting let me know. cc <@!147791454054383618>
Hugin#2596: That's still 7 hours of sleep,5 hours for other stuff and it was saturday <[newline]> Ain't that much could have been 18 if I could and tried
Hugin#2596: Well actually 100% = 1 so it's 2022+yes xD
ardhati#9461: damn in 1 day?
Hugin#2596: I only had one day + 1-2h and still got over 14
pepperell#2291: This is basically the best tech demo that's ever existed. Can't wait to see what comes next!
Darth feir#7467: i know how you feel
JoshuaSpeedy#3545: Oof
CrispyPin#1149: nope
JoshuaSpeedy#3545: Didn't you have closed beta?
pepperell#2291: Gonna pipe this into my 8 bit ram and hook it to my massive 7 seg display so I can display non stop inspirational messages to myself whenever I look in that direction
pepperell#2291: D:
pepperell#2291: 13.8 really
CrispyPin#1149: only 12?
pepperell#2291: you're right I can't stop
IsCoffeeTho#0001: keep goin üëÄ
IsCoffeeTho#0001: momentum
pepperell#2291: In the last two days I've spent like 12 hours in this. need.......... to...stop..
JoshuaSpeedy#3545: Really cool
pepperell#2291: Need to add a clock counter and a reset and then it'll actually BE a multiplier
IsCoffeeTho#0001: sick dude üëç
pepperell#2291: Just built a clocked 8 bit adder with feedback. So, its basically a multiplier that never stops.
IsCoffeeTho#0001: dude POG on the gof
CrispyPin#1149: will make a big demo for youtube soon
IsCoffeeTho#0001: as soon as you do, we will be here to support you <:cTIPhappy:876670847065133126>
CrispyPin#1149: <@!285922783878184971>
pilonpl#4015: I haven't bought the game yet XD
pepperell#2291: These builds are insane! good work everybody
IsCoffeeTho#0001: true but i dont think demux is needed for ram addressing
PseudoGoose#2841: then you have a 2 in 1 mux and demux because of relays being bidirectional
PseudoGoose#2841: or use the decoder to drive a bunch of relays
IsCoffeeTho#0001: oh?
PseudoGoose#2841: hmm... you could make a 6 bit decoder, and AND each output with the signal input that you are trying to demux
IsCoffeeTho#0001: what builds have you been workin on so far?
CrispyPin#1149: got wrap-around working
IsCoffeeTho#0001: never think that
pilonpl#4015: I think i am too dumb for this game
IsCoffeeTho#0001: its a bit time consuming but def worth it
DjSapsan#4530: i wanted to do something like this amazing
IsCoffeeTho#0001: without compromising height
IsCoffeeTho#0001: anyone know a way to make smaller multiplexers? <[newline]>  <[newline]> this is for 6 bit addressing
circuitgamer77#0377: Can divide any 8 bit number by any other 8 bit number, giving quotient and remainder back.
circuitgamer77#0377: Division coprocessor:
Laefye#2763: https://youtu.be/ON8TPS0IAAA Sound card :3
RyanT#1426: anyone wanna take part in the town thingy?
RyanT#1426: this is kinda silly, but it might be cool
CrispyPin#1149: https://youtu.be/bqlqNc2bFvY
Macrohard Onfire#0662: it's a slovenian flag on a 16 x 16 3 bit monitor and it was drawn with a graphics card that can draw rectangles. it's made for a computer that me, <@!374569309533372416> and <@!446017193659072532> are building
Darth feir#7467: <@!174192174546550784> ive thought about doing a 8 bit counter and subtract by 9 for the second number but as you were running into wud for the 20 up...for 4 bit it works tho you only can count to 15 thought about doing a x10 divider but its easer to have a 4 bit with a carry. plus division = hard. and have thought about setting up a 8 bit demux to 3 displays and set up all 256 possibilities then i threw that out ... i mean dont you want the demux to be bigger than the display   .. and a picture for reference
Darth feir#7467: So its a 4bit programable counter to demux to display and has a carry . You set up 2 modules one over the other. a early model is uploaded ill upload the new one when i have the addressable controller working.
‚ñà‚ñà#7569: I got 7 seg up
‚ñà‚ñà#7569: I get brainfart trying to convert 8bit BCD to multiple display output
‚ñà‚ñà#7569: What format do you use to output numbers with multiple digits?
pepperell#2291: I love the telephone poles
gnog#2259: Just a Double Dabble connected to itself with shift
gnog#2259: Serial BIN to BCD encoder
Dazegambler#9584: basic 8 bit adder now time to move to more complicated things
pepperell#2291: Fully tileable
pepperell#2291: sync write and async read
pepperell#2291: Not nearly as compact as the others but here's four 8-bit read/write registers on a common address and data bus
Riku#9814: I found this world on the hub website. I was able to figure it out and make this smiley face
hintz.jakob#3558: 8bit, one wide tileable alu with A,B,Y registers and 8 cache registers
Stefan#5422: Thats looks nice
Slimepunk#3355: 
Mollex#9983: I finally did a 3x7 seg display with bcd conversion <:bobby_in_love:698430534187089920>
CrispyPin#1149: but it seems easier to just send several bits
CrispyPin#1149: well actually you could maybe re-use the signal module i have and send state serially
CrispyPin#1149: no only those with one bit state
JoshuaSpeedy#3545: Would It work with wire world?
CrispyPin#1149: the different coloured modules are connected with sockets
CrispyPin#1149: the design of this is modular so i could design a new core logic for it and simulate a different set of rules
Darth feir#7467: i say that bc in mc i always had a hard time keeping them consistent
Darth feir#7467: side note. it is nice ive timed it on my phone for the last 2 hours and it is still accurate to the seccond. was not expecting it tho hoped for it 10/10 devs
Stefan#5422: very cool
Control#8680: yup
Stefan#5422: well the gray cirucuit is just a mux
Control#8680: but that would mess stuff up
Control#8680: i thought you should use nor gates instead of AND gates, since you can have 256 inputs instead of 4
Control#8680: nvm logic world is weird
Stefan#5422: yes?
Control#8680: btw
Control#8680: smart
Control#8680: i see
Stefan#5422: ie just expand like this
Stefan#5422: 
Control#8680: i see
Stefan#5422: the darker cyan one if for selecting 1 cell <[newline]> the light cyan can be expandet to fit however many bits you need <[newline]> and the gray is for addressing the memory cell (can also be expended as needed)
Control#8680: and dont you run out of addresses?
Control#8680: how does it work?
Stefan#5422: I have not seen anybody build it like this yet wondering why
Laefye#2763: https://www.youtube.com/watch?v=t_kwLFkgklk <[newline]>  <[newline]> That's enough music for today
Control#8680: cool
Stefan#5422: Modular memory
Control#8680: done
Control#8680: you can also use those as digits and get O(n^(8/7)) adders with constant time etc
Control#8680: and youre done
Control#8680: and then you only need incrementers
Control#8680: and then do a CLA on the carry-outs of the digit CLA's (as the ANDs) and the AND of XORs (as the XOR)
Control#8680: and then find the propegate signal, by bitwise xoring the digits and ANDing all of those xors
Control#8680: do the CLA on each of those
Control#8680: my version is:  <[newline]> you split the number into cbrt(n) sized digits
Control#8680: that's your standard CLA
Control#8680: (since only XOR or AND can be on, not both)
Control#8680: but delete all gates that cant be on
Control#8680: and then put that into a ROM
Control#8680: so basically, you do the XOR/AND at the start
sos carbonarre#3314: <:bobby_joy:692808284331049040>
sos carbonarre#3314: then minecraft video or something
Control#8680: CLA's calculate all carries at once
sos carbonarre#3314: im not familiar with simualtor abuse
Control#8680: i dont think so
sos carbonarre#3314: do you have any paper to learn about cla?
sos carbonarre#3314: i have 16bit one rn but idk how hard would it be to expand it to 32bit
Control#8680: i figured out a system
Control#8680: my 64 bit CLA (which was about six times as fast), was smaller
sos carbonarre#3314: you cant really expand it easilly can you?
Control#8680: and fun fact
Control#8680: i made 64 bit brent kung in Scrap mechanic :P
sos carbonarre#3314: It doesnt scale up well
sos carbonarre#3314: I wanna make 32bit adder but koge stone sugs
Control#8680: but i can recover it later today
Control#8680: in my corrupted world
Control#8680: yeah
sos carbonarre#3314: Do u have implementation of it
sos carbonarre#3314: Not cycless doe <:bobby_sob:692807893023588363>
Control#8680: lol
Control#8680: i already complained, cuz it's too op
Control#8680: yup
sos carbonarre#3314: Oh yea then its constant
sos carbonarre#3314: Wait so each of those enable/disables are independent of each other?
sos carbonarre#3314: Hm
Control#8680: but calculating enable/disable is just bitwise xor
sos carbonarre#3314: Since the enable/disable is still 1 cycle
sos carbonarre#3314: relays arent really instant i think
Control#8680: 1) CLA in any sim in O(1), and i optimized it to be O(n^1.333) space <[newline]> 2) relays make instant diodes makes O(n) space, O(1) time addition
Control#8680: there is
sos carbonarre#3314: for arbitrary sized bits
sos carbonarre#3314: <@226691820225036289> you got any idea if there is O(1) addition in logic world?
CrispyPin#1149: well this is my second iteration, first one was 5x5
CrispyPin#1149: aha
Control#8680: corrupted
Control#8680: i made a 16x24 GoL
CrispyPin#1149: what pain
sos carbonarre#3314: i remember something about fourier transform based multiplication which maybe could have analogue for division
Control#8680: you remind me of my pain
CrispyPin#1149: game of life module can now count neighbors
Control#8680: nah
sos carbonarre#3314: like ur doing thesis?
sos carbonarre#3314: Is that phd style paper
Control#8680: "sublinear division algorithm" is my research
Control#8680: O(n)
Control#8680: that's still
sos carbonarre#3314: And iirc in long division the results depend on eachother
Control#8680: yes
Control#8680: well
sos carbonarre#3314: cuz if you assume N additions that need to occur which is the case with regular ass long division then O(1) adder gives you O(n)
Control#8680: addition is normally assumed to be O(log(n)) time, but even with O(1) adders i couldnt find good division
sos carbonarre#3314: like say should the divider algorithm assume certain adder
Control#8680: im counting parallel time
Control#8680: that totally depends
sos carbonarre#3314: do subcircuits contribute to the total bigO in your case?
Control#8680: (Galois Field of 2^n)
Control#8680: just work in GF(2^n)
sos carbonarre#3314: back to on division
Control#8680: ...
Control#8680: there is one thing i could do
Control#8680: well
sos carbonarre#3314: True doe
sos carbonarre#3314: imagine that the faster divider needs 3 times the die area, i can fit 3 slow dividers in that area and allow divisions to be scheduled out of order
Control#8680: mathematical beauty
sos carbonarre#3314: more complex algorithms require more die area, and what does faster division give you at all compared to slow divisor?
sos carbonarre#3314: well division is ass cuz
Control#8680: lmao
Control#8680: omega(n)
Control#8680: what
Control#8680: eh
Control#8680: i still wasnt able to find an asymptotic o(n) division algorithm
Control#8680: but
Control#8680: i agree
sos carbonarre#3314: So constant multiplies contribute by a lot to total runtime
Control#8680: and for recursive stuff, you can just use the fastest for small and then recurse up with the other algorithm, once its worth it
Control#8680: O(log(n)), you know that doubling the inputs will add a constant time to it
sos carbonarre#3314: maybe 128 for cryptographic extensions
sos carbonarre#3314: Cuz O assumes limit till infinity where in hardware we have what, 64?
Control#8680: yeah ik, but it gives a rough estimate
sos carbonarre#3314: yes but again O notation sucks for hardware
Control#8680: ahh
Control#8680: it's still freaking O(n)
Control#8680: but in parallel
Control#8680: they found a good algorithm in terms of operations
Control#8680: well
sos carbonarre#3314: And power
sos carbonarre#3314: cuz they take huge die
Control#8680: in terms of operations
sos carbonarre#3314: division in modern hardware is usually 5-10 slower than multiplier and there arent many execution ports for them at all
Control#8680: Burnikel and Ziegler found an O(n log^2(n)) division algorithm
Control#8680: ok
Control#8680: lol
sos carbonarre#3314: Whatever
sos carbonarre#3314: i was talking about something else
sos carbonarre#3314: wut
Control#8680: have you read the paper?
Control#8680: ??!!
Control#8680: it's faster than normal division where you shift and subtract
sos carbonarre#3314: its similar
sos carbonarre#3314: Yea more or less
Control#8680: it's something else
Control#8680: not binary search
sos carbonarre#3314: Yea
Control#8680: Burnikel Ziegler division
Control#8680: nononono
Control#8680: guess what
sos carbonarre#3314: Binary search basically
Control#8680: with O(n log^2 n) operations
sos carbonarre#3314: yes
Control#8680: there is the divide and conquer division
sos carbonarre#3314: division is brutal
Control#8680: O(n) is the best i found anywhere
Control#8680: but division
Control#8680: you can do 42 bit multiplication in 9 ticks + 1 addition
sos carbonarre#3314: You can comeup with nice algorithm for division but implementation will still be problematic
sos carbonarre#3314: still endsup being twice the stage delay
sos carbonarre#3314: but stone adder is logn wheres brent is 2logn+1
sos carbonarre#3314: Both are O(logn)
sos carbonarre#3314: Say take stone adder and brent adder
Control#8680: in logic world the constant is amazing
sos carbonarre#3314: problem with O notation for hardware algorithm is that they dont ignore constants and constants are often the bottleneck
Control#8680: the bits above one another, if you apply a full adder, you transform 3 vertical into 2 horizontal
Control#8680: if you think about a lattice multiplication
Control#8680: and have logarithmic depth
Control#8680: they are tree based, but use 1 bit (with carry in) multipliers
sos carbonarre#3314: yes
Control#8680: have you heard of dadda tree multipliers
Control#8680: yes, but
sos carbonarre#3314: Tree based multipliers relly on fast N bit adders
Control#8680: in parallel
Control#8680: what if i tell you, you can multiply in log(n)*(full adder time)
Control#8680: listen
Control#8680: nonono
sos carbonarre#3314: You dont measure it like that
Control#8680: 2 ticks is constant
Control#8680: yes they are
sos carbonarre#3314: I mean
Control#8680: ?
sos carbonarre#3314: no
Control#8680: full adders are constant time, right?
sos carbonarre#3314: which themself are logn
Control#8680: not quite
sos carbonarre#3314: multiplication relies on adders
Control#8680: parallel
Control#8680: you can multiply in parallel in O(log(n)) time for example
sos carbonarre#3314: i think nlogn is best u can get
sos carbonarre#3314: then dont think there is
Control#8680: n means bitcount
sos carbonarre#3314: Where N means what
sos carbonarre#3314: dynamic needs capacitors and stuff
sos carbonarre#3314: i mean in LW only static
Control#8680: how do you do that, fast?
Control#8680: yall got types?
sos carbonarre#3314: Yes but change dlatch to whatever memory type u want
Slimepunk#3355: i dont know
Control#8680: isnt memory just... mux + Dlatches + demux?
Slimepunk#3355: i barely managed to fit it in that space <[newline]> it got so tight once i added the address control
TBS-Frain_Breeze#0771: that 4-bit memory looks cool
Slimepunk#3355: 
Control#8680: (Note: small o)
Control#8680: Also; yall got o(n) division anywhere?
Control#8680: Lol
Control#8680: oh i meant mod the game
DjSapsan#4530: <@!226691820225036289> divide
Control#8680: How 2 mod hmm
Darth feir#7467: now im adding a controller to it ^_^
Laefye#2763: https://www.youtube.com/watch?v=rrKMU5fpuHc <[newline]> <:thenking:446109302369812490>
Ecconia#4929: Oh you can üòã *shows list of bugs*
Jimmy#8080: nor can we üòÑ
IsCoffeeTho#0001: i can't wait for mods to be supported
Jimmy#8080: RAMtastic
IsCoffeeTho#0001: 8bit Addressable RAM
IsCoffeeTho#0001: with the power of modding i present to you
Darth feir#7467: 
Darth feir#7467: been updating my clock
circuitgamer77#0377: 17 segment display w/ memory module (can write to, clear, and enable the display)
gotenks917#3427: 225 bytes of memory now complete with addressing and I/O
Slimepunk#3355: small screen hex display
circuitgamer77#0377: Just changed it to be the ascii values for the numbers...
circuitgamer77#0377: 
circuitgamer77#0377: This can take in values 00000000 through 00001001 and display the corresponding decimal digit, still need to add modules for letters and special characters...
circuitgamer77#0377: A system that takes in a stream of characters and pushes it to the display would be fairly easy, but to format periods more nicely would be a pain...  Doable, but a pain.
circuitgamer77#0377: :)
katkosmos#6502: yeah the middle configuration definitely looks better there
circuitgamer77#0377: Thank you :)  Here's a much better comparison:
katkosmos#6502: but for an actual answer, im slightly partial to right just because of familiarity with 7segs, but i think left makes more sense in the context of 16segs
katkosmos#6502: you didnt say exclusive or, so yes <:blaze:716897128621932574>
JPM-Baroque Spaceship#6542: left
circuitgamer77#0377: Not the best comparison because it's one sided, but better than nothing.
circuitgamer77#0377: Another comparison: left or right?
circuitgamer77#0377: You could do a very low accuracy simulation with an 8 bit computer and somewhere around a couple kilobytes of memory, it just would take forever and lose a lot of precision.
Jimmy#8080: Lol that would be amazing
katkosmos#6502: inb4 somone simulates a quantum computer using the current components in LW
katkosmos#6502: Haha, one could only hope
Jimmy#8080: Maybe by the time we get around to this feature, quantum computing will be so mainstream that most PCs have a quantum card, and we can just use that ;)
katkosmos#6502: I can imagine it'd be pretty performance intensive, simulating quantum computers with classical computers is gonna be slow lol. Hyped for if it ever does happen, tho!
Jimmy#8080: like a skyscraper of memory
Jimmy#8080: It's magnificent, I love how vertical it is
gotenks917#3427: this teeny tiny amount of storage is actually 225 bytes
gotenks917#3427: we build a small amount of storage, its called we build a small amount of storage
Jimmy#8080: (unironically, we might do this)
Jimmy#8080: maybe post-1.0
JPM-Baroque Spaceship#6542: ~~quantum components when~~
Cake#4115: Just say it's powered by quantum computing
circuitgamer77#0377: I can fix it with and gates, but that adds delay...
circuitgamer77#0377: Oh no, fatal error!  I forgot to add buffers to the lines, and now if my 1 enables, so does the 0!
circuitgamer77#0377: There, now there's a disable line :)
circuitgamer77#0377: Missed a screenshot:
circuitgamer77#0377: At the moment there's no disable line...  Have to add that.
circuitgamer77#0377: 
circuitgamer77#0377: Here's the 17 segment display with one decoder module attached - the decoder takes an 8 bit number in and, if it matches the number on the 8 bit internal configuration switches, outputs a 17 bit value to the display based on the other 17 internal switches.  Copy further back to add more characters.
cheese3660#8641: 16x8 register file with dual read, now with added decoders
Jimmy#8080: I recommend coloring those little boards you've mounted the pegs on
Munashe#3730: Even though it's nothing much compared to what people have been making
Munashe#3730: I really started to want colored wires and pegs working on this
Munashe#3730: 
Nik#1011: I know it's not the same but you can put those un-colored pegs on colored boards
oddron#8955: That way we can still identify the color of the wire even if it's off
oddron#8955: Off = black with a long, thin colored stripe along the length of the wire; On = entire wire is colored?
Dazegambler#9584: just like how you can change the on color for lights
musashi#0210: how would you tell if they were on then
oddron#8955: I second this. Color-coded wires would be extremely helpful
Dazegambler#9584: i need my color coded wires lol
Dazegambler#9584: also feature request:colorable pegs and wires
oddron#8955: Feature request üôÇ
Jimmy#8080: Correct
oddron#8955: I just checked. The *panel* display can be resized, but the *non-panel* display cannot be resized?
Dazegambler#9584: oh i'll do it thanks
Jimmy#8080: <@300793915471036417> Go into your save file, peep the `ExtraData` folder, there's a text file in there that defines the ground color/pattern
Dazegambler#9584: also i really chose i horrible ground color i know but well cant undo it
Dazegambler#9584: progress on the 8 bit adder now i'm on the point of spaghetti where if i look away for one second i already dont know what something connects to lmao
Jimmy#8080: case in point
Jimmy#8080: hahahaha
musashi#0210: LABELS CAN BE RESIZED?
oddron#8955: That would be an excellent idea
Jimmy#8080: Folks also seem to miss that mounts, labels, panel buttons and flags can be resized üòÑ
Jimmy#8080: I'm planning to add a little icon on the hotbar icons that indicates a component can be resized
Jimmy#8080: It's right there in the action wheel!
oddron#8955: Feature request: Make the existence of this capability more obvious in the help window
Jimmy#8080: Keep in mind that you can resize the panel displays, folks always seem to miss that haha
circuitgamer77#0377: Thanks!
circuitgamer77#0377: That's the harder one to build, so I guess I have a fun challenge :)
musashi#0210: left
Nik#1011: very nice :D
Nik#1011: probably 17 I'd say
circuitgamer77#0377: Would it be a 16 segment display or a 17 segment display?  I added the decimal point...
circuitgamer77#0377: The only difference is the spacing.
circuitgamer77#0377: All segments are chaos, but here:
Jimmy#8080: might be easier to compare if all segments were lit up
circuitgamer77#0377: What's better, left or right?
Broyojo#2667: oh lol
Saltypretzel#0321: there are thousands of connectors
Saltypretzel#0321: that would be terribly painful haha
Broyojo#2667: idk
Broyojo#2667: hook each bit to a pixel
Broyojo#2667: maybe a big binary counter
Broyojo#2667: you could make a display thing. maybe display some cool pattern
Saltypretzel#0321: yeah
Broyojo#2667: fitting 4 d-latches would be hard
Saltypretzel#0321: I don't know what to do with it because its so large
Broyojo#2667: oh ok
Saltypretzel#0321: nono its just the panel
Broyojo#2667: so you have 4 bits of memory for each cell?
Broyojo#2667: oh wow
Saltypretzel#0321: but all 16 colors yes all 4 inputs available
Saltypretzel#0321: like no circuitry is there
Saltypretzel#0321: nono its just the lamps
Broyojo#2667: can you show all 16 colors or just one?
Broyojo#2667: 16 color is very compact for that size
Broyojo#2667: oh wow, that is quite small actually
Saltypretzel#0321: it is very large lol
Saltypretzel#0321: 2 by 2, 16 color
Broyojo#2667: how big are the pixels?
PseudoGoose#2841: Understandable, it looks great!
Dazegambler#9584: one reason i wish we could change the color of wires
Dazegambler#9584: i do not like not having straight wires lol
Broyojo#2667: I like all the labels and the organized wires
musashi#0210: its a bit complicated, but its right
Broyojo#2667: that looks right
Dazegambler#9584: so uh i'm still learning the basics how well did i do with this full adder?
Saltypretzel#0321: or is the better option to forfeit
Saltypretzel#0321: massive display.... uhh how shall i go about connecting inputs and stuff lmao
Zoey#7836: Design is modular and can easily be expanded to a larger address size
Zoey#7836: 
Zoey#7836: Compact 256 Byte RAM
cheese3660#8641: When tiled in both directions 16 registers by 8 bits
cheese3660#8641: Tileable dual read register
Shamus03#0617: This one requires a 3-to-8 decoder for the columns and a 5-to-32 decoder for rows.  Different dimensions would work, you'd just need different decoders.
Shamus03#0617: Fully tileable so you could add more addresses.  Same concept would also work for a larger word size.
Shamus03#0617: 256 address programmable ROM
cheese3660#8641: operations are in order <[newline]> ``` <[newline]> Operations and the code for them <[newline]> 00: ADD <[newline]> 01: ADC <[newline]> 02: SUB <[newline]> 03: SBC <[newline]> 04: NOT <[newline]> 05: NOR <[newline]> 06: AND <[newline]> 07: XOR <[newline]> 08: OR <[newline]> 09: LSH <[newline]> 0A: LSHO (Left shift, overflow in) <[newline]> 0B: RSH <[newline]> 0C: RSHU (Right shift, underflow in) <[newline]> 0D: ASH (Sign extended right shift) <[newline]> 0E: NAND <[newline]> 0F: XNOR <[newline]> ```
cheese3660#8641: Finally, full ALU
VigilanteHobo#1873: built on a server
VigilanteHobo#1873: runs fib
VigilanteHobo#1873: 8 Bit word/bus <[newline]> Harvard architecture <[newline]> Accumulating design <[newline]> 8 Registers <[newline]> 32 Bytes of RAM (expandable to 256) <[newline]> 16 Lines of ROM (expandable to 256) <[newline]> Conditional branching <[newline]> Memory indirect addressing <[newline]> 8 Instructions <[newline]> 4 Addressing modes
bren#6672: First attempt at a full Harvard-style computer. Running Fibonacci as we speak <:bobby_ok:692790276623958087>
musashi#0210: its worth every cent and more
cheese3660#8641: And in progress control logic
Jimmy#8080: It was all worth it, every single day I slaved away on this project
Jimmy#8080: Holy shit. This channel is amazing. Thank you so much everybody for posting your builds here. I am literally crying as I scroll through this endless feed of people creating wonderful machines in my game.
cheese3660#8641: 8 bit ALU W/O control logic yet (Supports 16 operations)
CrispyPin#1149: you cant use sockets the same way on 2x2, so youd need to design 2x2 cell blocks
CrispyPin#1149: ( i will probably end up trying 3x3 eventually, maybe even 2x2 )
CrispyPin#1149: its already so compact
CrispyPin#1149: the suffering
CrispyPin#1149: please
Broyojo#2667: we need 2x2 game of life next
Broyojo#2667: pog
CrispyPin#1149: it needs final adder layer to add the 2 3-bit numbers
CrispyPin#1149: WIP Game of life 4x4 (this time counting neighbors with adders instead of counting pulses)
sos carbonarre#3314: <@!151293812675706880> btw turns out kogge stone is bit more tricky than regular ahead carry adder which you did
sos carbonarre#3314: finally finished my 16bit Kogge Stone Adder <:thonking:432741465844875264>
hintz.jakob#3558: a design for 256bytes of ram
Ecconia#4929: I thought <@!374638730054729730> how to build binary to decimal converters. <[newline]> Now debugging his calculator is super easy~ <[newline]> Look how happy he looks now üòä
Broyojo#2667: so good for debugging and visual delight
Broyojo#2667: panels are great to make
Chime#3134: and I love front panels :3
Chime#3134: same, 16bit address (red), 8bit data (green), control (blue), dense keyed connector
cheese3660#8641: Ooo like 6502
Stenodyon#8192: Yes, 8 bit data bus and 16 bit address bus
C4io#2688: It's 8bits?
Stenodyon#8192: thanks üòÑ
cheese3660#8641: Also nice board colors
cheese3660#8641: Nicr
Stenodyon#8192: I have most of my CPU built, now I need to build the control logic
hintz.jakob#3558: hmm, maybe havent yet found a way to make a one wide tileable design with an xor gate
Chime#3134: I am loving these dense connectors
Munashe#3730: (maybe)
Munashe#3730: *realizes he interwove his read and write lines*
Munashe#3730: 
RyanT#1426: road tiles
Infini#5724: does that really store data or is it just a chain of delayers kind of like old-school powder toy batteries
hintz.jakob#3558: wait yeah, why did i do that
cheese3660#8641: Its 2 wide tho is it not?
asquared31415#0311: surely a builtin xor would be smaller?
hintz.jakob#3558: they do, idk if theres an easier way to make them but i just made them out of two inverters and two and gates
cheese3660#8641: Maybe the inverters help
oddron#8955: I can see red and green gates (AND and D-Latch?) but I don't see any XOR gates. Where are they hiding? How does this perform addition?
Saltypretzel#0321: ~~make it once then forget about it~~
asquared31415#0311: but if you understand the implementation and make things modular it works
asquared31415#0311: much
oddron#8955: Isn't it harder to follow what's happening after compacting?
mitolegy#5916: wonder how small we can actually make CPUs in logic world
cheese3660#8641: Gosh I need to learn compacting skills
hintz.jakob#3558: simple 8bit, one wide tileable, alu with in and output memory
oddron#8955: I didn't realize the display pixels could be configured
Macrohard Onfire#0662: Imagine building a random colored pixel with 512 different colors, just for it to light up in the default yellow color
Saltypretzel#0321: tilable
Saltypretzel#0321: Two instant carry adders confined in a small space
·êò·ó©·í™GŒ£·ó™üúï·ëé·êí#2226: Programmable finite-tape Turing machine (3 symbols, 3 states), running wolfram's rule 110 cellular automaton. The tape is on the right, the state tables are on the left. The tape and state tables can be expanded indefinitely by copy-pasting them next to each other.
mitolegy#5916: 8-bit demultiplexer. with enable too so theoretically you could hook 256 of these bad boys together to create a 16-bit one for memory applications
musashi#0210: good luck
cheese3660#8641: And painful
cheese3660#8641: That sounds amazing
katkosmos#6502: well you're in luck because I'm currently working on recreating the 6502 lol
ieee 802.11ac#6337: imagine if we managed to somehow implement a 6502 os into logic world with that as the boot logo
katkosmos#6502: not logic based in the slightest but
DustyAngel47#7299: okay 7seg done
Chime#3134: backward pins and pegs for keyed connectors maybe?
DustyAngel47#7299: working on a 7seg display
MiniStumpy#5653: A 4-Bit ALU made by me in singleplayer. Functions: NOOP, OR, NOR, AND, NAND, XOR, XNOR, NOT, ADD, SUB
JPM-Baroque Spaceship#6542: 1 Kibibit of Ram (1024 bits, 128 adresses)
DustyAngel47#7299: fantastic decoder
tatertacoma#1234: With what I like to call "BUSB" or Big Universal Serial Bus
tatertacoma#1234: I think ive bitten off more than I can chew... (Just the very beginning of a computer)
Munashe#3730: My first little selectable memory
Munashe#3730: 
DjSapsan#4530: 256 byte 1 tick HDD (work in progress)
musashi#0210: i want to tidy it up a bit after work, make it more organized
pepperell#8025: I love all these vertical stacked designs. Need to try that
pepperell#8025: <@!478769019873132548> Awesome! Looks real good
musashi#0210: 8 bit adder
musashi#0210: ive literally never felt smarter
AKShredder8#2904: Full Subtractor used for the 8-bit Subtractor
AKShredder8#2904: 8-bit Subtractor
aj#7872: exciting eh?
aj#7872: while everyone was busy building awesome terminals and aders I made a random colored pixel
IsCoffeeTho#0001: gj <:iscoffGJ:803096972134973450>
IsCoffeeTho#0001: a show of size doesn't matter
Puzzlebark#3421: 
Puzzlebark#3421: 8-bit adder ;;
RyanT#1426: 4 digit BCD Adder and Subtractor
Mollex#9983: and this is the basic for the 3 7 segment u store the 3 digit of lets say 352 in 3 different 4 bit group
Mollex#9983: but its hard to do the first step im currently looking for info online about this BCD conversion
Mollex#9983: for example lets use 4 bit for storing the digits---> our number is 26 -> u need to store in the first 4 bit the number 0010 and in the second the digit 6 0110 and after u use 2 7 seg
cos#8062: 2 bit counter (expandable)
Mollex#9983: u need to store every digits in lets say 8 bit
Mollex#9983: u need a BCD conversion before i think
Mollex#9983: hard
GuessWho#7332: yeah I need  1010 as 10
Mollex#9983: if u want lets say 10 as 10 and not as A its hard
Mollex#9983: if u want to use the hex conversion of the number its easy
GuessWho#7332: i mean compact
GuessWho#7332: does anyone have easy solution to that
Mollex#9983: oh to 2 7 seg
GuessWho#7332: It was supposed to decode 4 bit binary to 2 7-segment
cos#8062: (tileable)
cos#8062: 4 bit ica
cos#8062: 
Mollex#9983: what is this?
GuessWho#7332: btw this doesn't work
GuessWho#7332: i forgor
GuessWho#7332: Oh yeah, K-maps exist
musashi#0210: dope
gnog#2259: <@!478769019873132548> i've just uploaded the terminal to creation hub!
pepperell#8025: you too man Good luck
Mollex#9983: gonna look for something hf mate
Mollex#9983: anyway i need a lot more information right now kinda new to this
Mollex#9983: i think with BCD before the segment u can avoid the kmap
Mollex#9983: ahahah
Mollex#9983: eh
pepperell#8025: ok a lot more kmaps
Mollex#9983: 8 variables with 21 output?
pepperell#8025: Really just a different set of kmaps
Mollex#9983: thats hard i was reading something thismorning about it
Mollex#9983: eh yea
Mollex#9983: i read u need to do the BCD decoder
pepperell#8025: The next step is a BCD decoder so you can get decimal digits from binary input...
Mollex#9983: yea i thought was harder in hex but its the opposite u dont need to split the number
pepperell#8025: Oh yeah hex made it easy üòÑ
pepperell#8025: 0000 will go to one digit, and 1011 goes to the other
Mollex#9983: oh right cuz u used hex
Mollex#9983: but if u lets say input 00001011 as first number
pepperell#8025: Bit 7-4 and then Bit 3-0
pepperell#8025: so for a 8 bit number, just think of it as two 4-bit decoders
pepperell#8025: 4 bit input on the center bottom, 7 bit output on the left bottom
Mollex#9983: i did the kmap too
pepperell#8025: Just used basic karnaugh map to get the 4-to-7 logic, and I didn't bother simplifying it from there.
pepperell#8025: Each 7 segment display has its own 4 bit decoder. So I have 7 decoders in the background there
Mollex#9983: i just did the classic 0 to 9 7 segment deconder and i cant expand to multi decoders for higher numbers
Mollex#9983: <@!901845920608567296> can u give me a screenshot of how the 3x7 segment decoder  convert the 8 bit number in hex? im trying to build it but im kinda stucked
pepperell#8025: the 7 segment decoder is horrible but that's ok. Unlimited resources makes everything ok?
pepperell#8025: Addicted.
pepperell#8025: 8 bit adder!
musashi#0210: first spike got to 70%
The Pringle Box#1813: 100%
Broyojo#2667: 69%
musashi#0210: would anyone like to guess my cpu usage after turning this on
oxi#0420: ah no its just my bad internet
oxi#0420: <@!499587666497634314> is server down?
gnog#2259: i guess it will be useful
gnog#2259: just need to polish it and make easy to use
gnog#2259: I will upload it
musashi#0210: when will it become common for people to upload their builds, i want to go **play with it**
gnog#2259: no it doesn't work here
nalili#7058: example on a small model
nalili#7058: go rotate 180¬∞ this
gnog#2259: *true*
musashi#0210: oh jesus christ
Macrohard Onfire#0662: Nice
gnog#2259: 24x4 Terminal
Whisper#7076: 
Whisper#7076: Come join us
Whisper#7076: 
nalili#7058: Before / after optimisation be like :
ŒõŒüŒ¶ŒôŒú#4660: 
ŒõŒüŒ¶ŒôŒú#4660: our clock with <@!381478305540341761>
Ecconia#4929: Wait, we got protests on our server üò±
CrispyPin#1149: what cursed method did you use to make that
GuessWho#7332: convert it to a small integrated one?
GuessWho#7332: can you somehow make full sized circuit compact
Whisper#7076: 2x4
Whisper#7076: LADIES AND GENTLEMEN
Whisper#7076: FULL ADDER
Whisper#7076: 
Whisper#7076: Get on our level
Whisper#7076: 
JPM-Baroque Spaceship#6542: 3x10 full adder
oxi#0420: if u join the server come to my plot and u can see it
oxi#0420: i built it in <@!499587666497634314>
Darth feir#7467: id love to see that so see how it works
oxi#0420: my 1-line transmission system now does 8-bit
Dragon Lord#6944: oh, you
Dragon Lord#6944: wah? what's this?
Dragon Lord#6944: another afk protest smh
Darth feir#7467: np lmk what you think
Jimmy#8080: Thank u!!
Darth feir#7467: <@!154964593397989376>its uploaded
Jimmy#8080: I like messy worlds :D leave it in
Darth feir#7467: <@!154964593397989376>will do want me to leave the other stuff or clean up a bit ie other projects
Whisper#7076: Yea no worries
Whisper#7076: Oh you are probably McSleeping over there because of time
Jimmy#8080: I'm so fuckin tired man I'll check it out for a few minutes but it's my bedtime very soon üò¥
Whisper#7076: Yo hop in vc if you want we are doing some funky things ig
Whisper#7076: lmaoo
Jimmy#8080: I think he just forgot he was in VC and left his computer on while he went away for the weekend lmao
Whisper#7076: Also what kinda bot is Michael
Jimmy#8080: will be fixed in 0.90.1
Jimmy#8080: Lol yeah undo/redo is a little unpolished, needs some work
Whisper#7076: That causes trouble
Whisper#7076: Also the client can place modded blocks that the server doesn't have
Jimmy#8080: ah
Whisper#7076: What ever is ther
Whisper#7076: When you Ctrl Z, it puts stuff back
Whisper#7076: Nope
Whisper#7076: 
Jimmy#8080: oh is it the glitch where you lag the server so you can place stuff inside other stuff?
Whisper#7076: 2 people can do it
Whisper#7076: Nope
Jimmy#8080: ...did you set every component in the world to (0, 0, 0)
Whisper#7076: We found out how to make things smoll
Jimmy#8080: uh oh
DADp#7461: jimmy did you see what i did
Jimmy#8080: Looks great btw
Jimmy#8080: Yo, can you upload this to the hub? I actually need a clock to test a feature
DADp#7461: oh god
Whisper#7076: 
Darth feir#7467: 
Darth feir#7467: and back
Darth feir#7467: been having fun building a clock
CowTipper#0001: Transfers a byte in serial
Dragon Lord#6944: ah, batch processing... interesting concept...
oddron#8955: As well as these modular 8-bit XOR and 8-bit AND circuits
oddron#8955: Parts include cursed interconnect
oddron#8955: Front view
oddron#8955: 8-bit adder
Doctor Stupid#9197: someone dragon lord i think made something next to it like a big wonder woman W thats cooler though
Doctor Stupid#9197: its on <@!151293812675706880>'s server if you want to go poke it. i can't get back on sadly. https://discord.com/channels/401255675264761866/901245210485461012/901701933847445504
Jimmy#8080: this is so mesmerizing, especially with the soundtrack
tatertacoma#1234: Oh, sorry, forgot to switch.
Jimmy#8080: Also please use <#901199821212352573> for questions, let's keep <#901195561980543007> about builds :)
Jimmy#8080: Not presently possible. We'd like to make it happen though. For now you can upload it again with "v2" in the title
Darth feir#7467: works the same i use and gates
tatertacoma#1234: How do you update worlds in the hub? (Can you?)
Slimepunk#3355: here i go
tatertacoma#1234: In that world ^
tatertacoma#1234: https://logic.world/ctn-4fd12b9e
tatertacoma#1234: Bobby Race
Slimepunk#3355: figured out way to make my display using D latches that stay are always switched on instead of relays <[newline]> the signal can't flow back towards D latch outputs that are off
Nik#1011: also happened to me today lol, played with my friend pat for 6 hours on accident. thought it was like 3
katkosmos#6502: ive already spent 22.3 hours in-game, def didnt feel like that long tho lol
Jimmy#8080: People keep saying that about LW and it makes me grin every time üòÑ
Saltypretzel#0321: i didnt realize a few hours went by that fast lol
Saltypretzel#0321: first i won by 2 or 3 squares then kat made another
Saltypretzel#0321: very intense competition lol
katkosmos#6502: i spent a couple hours on it. was it worth it? probably not, but it's neat lol
Jimmy#8080: it's so small and cute
Saltypretzel#0321: yeah we had a competition kat won by a few tiles
Attikitty#2900: oh ok
katkosmos#6502: Instant Carry Adder
Attikitty#2900: ica?
katkosmos#6502: Designed an extremely compact tileable ICA. Measures (counting pegs sticking out as 0.5 of a block) 3 x 3.5 x 5 blocks
JPM-Baroque Spaceship#6542: MK3 (the anterior was MK2), 8bit RAM, stackable in the sides, includes 8bit adresses (u have to manually set them)
JPM-Baroque Spaceship#6542: my compact 8bit RAM, stackable up (doesnt include adress)
circuitgamer77#0377: Bug means it's incomplete, but I think it looks neat and it works :)
Dragon Lord#6944: 1 byte memory (tileable) with easily accessible enable line
circuitgamer77#0377: Left is address decoder, right is 3 byte per pixel fast memory.
circuitgamer77#0377: I patched up my v1 image cache :)
sos carbonarre#3314: then kogge stone adder is the best probably or ladner fisher, the second being easier to wire up but suffering from fanout not existant in logic world
sos carbonarre#3314: Ok well that might be the problem
sos carbonarre#3314: I mean the switching has
sos carbonarre#3314: they shouldnt hm
Slimepunk#3355: i compared 1 directly to an and gate
Slimepunk#3355: relays have delay
sos carbonarre#3314: The speed has to do with gate propegation delay, if you can replace every gate with relays u probably can achieve even faster execution
Dragon Lord#6944: Freedom of assembly works! ~~he disconnected lol~~
ieee 802.11ac#6337: mogus protest
Dragon Lord#6944: 
musashi#0210: https://streamable.com/klrugo i feel like a genius
musashi#0210: bruh wrong clip
Doctor Stupid#9197: wait wasn't something about digital logic in this game
ardhati#9461: that makes monkey brain me pleasured to see
ardhati#9461: nah but seriously thats so cool
ardhati#9461: what am i supposed to watch?
ardhati#9461: guys, idk what to watch at
musashi#0210: if you waaaatch... the evidence-!
ardhati#9461: if you watch the evidence
Doctor Stupid#9197: started making a disco room but the spiral stuff was distracting
oddron#8955: <@!154964593397989376> Multiwire placing seems to work perfectly for this particular use case, once I figured out how to use it
ardhati#9461: ITS in the books
ardhati#9461: or far future
ardhati#9461: maybe near future
ardhati#9461: at some point
ardhati#9461: someones going to make bad apple in logic world
ardhati#9461: i know this is bound to FUCKING happen but..
Doctor Stupid#9197: the copy paste didnt pick up all the wiring and i wasnt going to do that for the 5th time
Doctor Stupid#9197: i was originally going to make it a series of these like a tunnel to fly through but :effort:
Doctor Stupid#9197: better view of the 3d geometry
Doctor Stupid#9197: there we go i think
Jimmy#8080: I love geometry
Jimmy#8080: That's rad as hell though
Jimmy#8080: Yeah discord only supports mp4
ieee 802.11ac#6337: cool
Doctor Stupid#9197: hmm not the right format
JoshuaSpeedy#3545: Peek is a good gif recorder
ardhati#9461: oh my god
ardhati#9461: is that
ardhati#9461: what in gods name
Jimmy#8080: I also like obs for short clips
Jimmy#8080: it's beautiful <@!661295280410460161>
ieee 802.11ac#6337: just use obs /j
Doctor Stupid#9197: how does one record short clips easily these days? i dont know what it is i made exactly but it looks neater in motion
Funky Egg#5652: also the green board is co,pletely useless but im not bothered to change it
Funky Egg#5652: any ideas for what i should do next
Funky Egg#5652: sorry for the bad quality im currently hotspoting myself
Funky Egg#5652: bad 16bit ram that im happy with
Saltypretzel#0321: so basically devices dont have to agree on a clock rate to send data over one wire
Saltypretzel#0321: I made a device that can send data across 1 wire with an arbitrarily slow/unstable clock. the fastest rate it goes is with a clock of 3 ticks
Funky Egg#5652: It started off really bad but it became good in the end
Funky Egg#5652: Just added the final touch to my 16 bit ram
C4io#2688: 16 bits serial divider
oddron#8955: I have started to experiment with sockets on little boards attached sideways to other boards. I just bought the game earlier today and I am slowly figuring out how to work with the board building mechanics
Funky Egg#5652: Lemme redesign
Funky Egg#5652: Shit
cos#8062: where read
Funky Egg#5652: Compact 1 byte of ram
Funky Egg#5652: Also
Funky Egg#5652: Is there anyway to get them then
Jimmy#8080: Yeah, I'm not satisfied with the current implementation of Through Sockets, they're very awkward to use with the board building mechanics. So they're hidden for now
ieee 802.11ac#6337: turns out there's a hidden socket type
oxi#0420: (also maybe using this for basic networking between computers would be cool, like a text editor or something)
oxi#0420: 4-bit to 1-bit encoder and decoder, im planning on expanding this to 8-bit then adding a display and some text options. (sorry about quality, had to compress for discord)
DjSapsan#4530: compacted version of the 16 bit binary counter
DjSapsan#4530: the fastest and smallest binary counter. It's spread on the gif, compacting currently
Dredonkey#8601: this is classic derp decoder I made earlier (didnt even realize you could increase pins on and gate). I am really impressed with all the compressed builds you guys are making
Dredonkey#8601: maybe ill try doing that
alion02#1973: it should be relatively easy to reconstruct anyway
Dredonkey#8601: you could upload a zip file to a file sharing service
Dredonkey#8601: rip
alion02#1973: for now i can't create an account tho so that's a bit of a problem
alion02#1973: i mean, i suppose i could just upload it along with the other things
alion02#1973: so it's gonna be a bit difficult
Dredonkey#8601: ah ok
alion02#1973: i have one world for everything i'm messing about with
Dredonkey#8601: or are you going to upload it later?
Dredonkey#8601: could I get a download?
alion02#1973: every instance swaps the lowest two, every other instance also swaps the 2nd lowest pair, every fourth swaps the 3rd lowest, every eight the 4th lowest, etc.
alion02#1973: works by means of swapping select pairs of wires
alion02#1973: 
alion02#1973: close-ups
alion02#1973: **latency can be reduced to 1 tick if an inverse signal is provided; otherwise uses an inverter attachment (shown in the video)*
alion02#1973: compressed, tileable, easily-expandable, 2-tick* latency demuxer (8-bit variant, 3 bits shown)
ŒõŒüŒ¶ŒôŒú#4660: the begining of our counter with <@!381478305540341761>
Attikitty#2900: ?
Attikitty#2900: hack alu minus the conditional jump checking cause i'm planning on having that elsewhere
Funky Egg#5652: Oh
DADp#7461: :(
DADp#7461: from the and gate
DADp#7461: the lil nub
Funky Egg#5652: Why is it 6x3x2
DADp#7461: (techically 6x3x2 but we do not talk about that)
DADp#7461: 5x3x2 full adder, gl replicating
Funky Egg#5652: Can you link me to one for single player
cos#8062: look in <#901158328405729371> and pick your favorite method
Funky Egg#5652: How do you make it
oddron#8955: And then run Logic World on that computer üòÑ
oxi#0420: build idea: computer running on game of life in logic world
cos#8062: just ontop of eachother
cos#8062: xor gate and an and gate
Jimmy#8080: this is so fucking awesome holy shit
ieee 802.11ac#6337: ask cos
Funky Egg#5652: How do you do that
ieee 802.11ac#6337: an and gate bugged into an xor gate
Funky Egg#5652: What gate is that
Radiant#3222: For 0th bit use this
Radiant#3222: 1 bit cascading comparator for yall <[newline]> AB - bit 0 and 1 <[newline]> D - Equal <[newline]> E - Less Than <[newline]> Y - Less Than <[newline]> X - Equal <[newline]> W - Greater Than
RyanT#1426: BCD 1 digit adder
Slimepunk#3355: built a full adder chain and carry lookahead adders to compare the speed of the each type <[newline]> setting the simulation speed lower i can see the lookahead adder is much faster
CrispyPin#1149: https://www.youtube.com/watch?v=HjmX80Z1VeM
cos#8062: i found another one
cos#8062: <@!151293812675706880>
CrispyPin#1149: Game of Life is now completely done. <[newline]> 5x5 footprint, recorded with 1000tps
Attikitty#2900: this is the one i copied btw.
Attikitty#2900: i tried to copy your design to see how it works, but isn't it 3 ticks between start and end?
Stenodyon#8192: I compacted my asynchronous FIFO
MiniStumpy#5653: I played a part of "Cyber Attack" by me on this.
ieee 802.11ac#6337: 8 bit adder
RyanT#1426: how did u do that lol?
cos#8062: couch
ieee 802.11ac#6337: 6*3 half adder
MiniStumpy#5653: 
FalsePattern#7777: 
FalsePattern#7777: 32 bit ALU, based on the 16 bit `hack CPU`, the nand2tetris project's cpu
cos#8062: half adder
DjSapsan#4530: Oscilloscope. <[newline]> Has 4 speed modes.
ieee 802.11ac#6337: 2*8 full adder
Kahyxen#0001: does anybody have a compact decoder?
RyanT#1426: lets try this again, this is a 3-bit, tileable Instant Carry counter! the output is the input + the value of the carry in socket, with a carry out socket on the other side
Gositi#4985: I know it is hilairosly large BTW
Gositi#4985: Example multiplication
Gositi#4985: Multiplier.
cos#8062: expandable
cos#8062: sync counter
FalsePattern#7777: all-angle video
FalsePattern#7777: carry between two 2-bit blocks is propagated using interlocking sockets on the bottom
FalsePattern#7777: single wide, stackable ripple carry adder <[newline]> two bits are conjoined to make it possible to build using XOR gates
Kahyxen#0001: 9bit Pixel module <[newline]> 3x14.5x3 <[newline]>  <[newline]> The data lines are a little messy and will require remapping on the input
Kahyxen#0001: 
Kahyxen#0001: Compact 8bit word RAM module design <[newline]> 4x11x4 for 8 bits <[newline]> 4x(n+3)x4 for n bits <[newline]>  <[newline]> I know that there are a bunch of RAM designs, but figure I would give it a try
Kahyxen#0001: 
Kahyxen#0001: 
Kahyxen#0001: 
Kahyxen#0001: 
CrispyPin#1149: Game of Life works but it wont let me place them next to each other reliably so making a big grid is really difficult
RyanT#1426: I made 5 bits work!!
asquared31415#0311: but I don't see it
asquared31415#0311: it claimed it did
asquared31415#0311: I may or may not have uploaded it to the creation hub
asquared31415#0311: 
asquared31415#0311: brings me down to 30fps though
Broyojo#2667: pog
asquared31415#0311: 
Broyojo#2667: yes you can place small components like pegs or sockets close next to each other by pressing ctrl
asquared31415#0311: YES IT RUNS
asquared31415#0311: 
asquared31415#0311: a lot of space is from the wiring
asquared31415#0311: I might be able to get this down to 6x6 or 5x5 then
asquared31415#0311: ooooo
RyanT#1426: or whatever your `MOD` key is set to
RyanT#1426: you just press control while placing the sockets
asquared31415#0311: also wow that's really cool
asquared31415#0311: no how did you make the multiple sockets next to each other
RyanT#1426: how did I make those? a lot of frustration and getting things to fit, also I'm trying to make a 5 bit version of it
asquared31415#0311: HOW
asquared31415#0311: THATS A MULTISOCKET
asquared31415#0311: YEA
RyanT#1426: small 3 and 4 bit tileable display pixels
Macrohard Onfire#0662: I use socets for almost anything, especially when it's modular
Orionater#6345: Possibly. I haven't used them at all. Still getting a hang of the game.
asquared31415#0311: have I been using sockets suboptimally this whole time
asquared31415#0311: what's that at the bottom that looks like a bunch of sockets really close?
Macrohard Onfire#0662: Pog
asquared31415#0311: much better than my huge 9x9
asquared31415#0311: ooooo
CrispyPin#1149: my 5x5 game of life (not completely tested yet)
asquared31415#0311: Maybe I have to slow it down
asquared31415#0311: it's not me being dumb!
asquared31415#0311: something is broken
asquared31415#0311: AHA
Orionater#6345: The one I made couldn't do that. ü§£  Well it just can't convert all the decimal digits. It can only go from 0 to 6.
asquared31415#0311: hard to tell
asquared31415#0311: idk
asquared31415#0311: or something's wrong with the implementation
asquared31415#0311: and I keep messing up the pulsar
asquared31415#0311: it is so bad to program
CrispyPin#1149: god damnit you beat me to it
LolzDEV#3402: modular 8-bit cpu with 2 registers and addition/subtraction module (the main bus is ugly, I know)
Slimepunk#3355: made a smaller version of the display i made yesterday with added negative and decimal point feature
asquared31415#0311: 17x17 game of life (back)
Stenodyon#8192: One-way serial data transmission (through that one wire in the middle lol) with 8-byte asynchronous FIFOs at each end
MiniStumpy#5653: So I made this adder with 2 registers, took me like what? 4 hours? xD
nalili#7058: How to count in base 10 or more (yes yes, its big)
Leo3065#5297: Sync Counter (first build) (spaghetti) <[newline]> Maybe will try make it modular
oxi#0420: modular overflow counter finished
LolzDEV#3402: 8-bit register (first build)
Minivan#5300: yea
alion02#1973: also doing all sorts of other fuckery to get it as small as it is
Minivan#5300: ohh smart
alion02#1973: yes
Minivan#5300: oh are you mixing socket and fat socket in order to fit then in 2 wide?
alion02#1973: this is what i have btw https://discord.com/channels/401255675264761866/901195561980543007/901278060572209212
Minivan#5300: yeah you cant fit 2 sockets in a 2 tile space
alion02#1973: aha! interesting
Minivan#5300: see here
Minivan#5300: the carry line is tileable through the socket that goes up/down
circuitgamer77#0377: Unfortunately, this version is actually too small for the system I want to use it in.  It needs to connect to a 4 tile wide system, and this is 3 tiles wide.
circuitgamer77#0377: My version of a 2d tileable decoder:
alion02#1973: i don't see a carry line
alion02#1973: how is it tileable?
Minivan#5300: other side
Minivan#5300: 2 blocks wide, tileable, 2 tick latency, instant carry adder (inspired by <@!249215681093042186> )
oxi#0420: overflow counter
CrispyPin#1149: hold control
Hugin#2596: how do you place 3 thin pieces on one square?
alion02#1973: and, similarly, a 1-tick NAND
alion02#1973: 1-tick XNOR gate
ŒõŒüŒ¶ŒôŒú#4660: np
Darth feir#7467: ty
ŒõŒüŒ¶ŒôŒú#4660: press "¬≤" and type "noclip"
ŒõŒüŒ¶ŒôŒú#4660: yes it is
Darth feir#7467: there's no clip mode ^_^
asquared31415#0311: at least there's noclip mode
asquared31415#0311: I feel that right now, something isn't working right and I compacted this so much
asquared31415#0311: haha yeaaaa
Darth feir#7467: the testing is the best part then you have spaghetti
CodeMaker_4#5396: yeah, but the move function makes it fairly easy to compactify curcuits after development/testing
Compilatron#6231: Good for compacting your circuits, although it obfuscates it a fair bit
CodeMaker_4#5396: ah I see smart
Compilatron#6231: Using some bread board shenanigans, you can stack curcuit boards
Darth feir#7467: 
Dragon Lord#6944: no
CodeMaker_4#5396: wait you can place logic gates on top of logic gates?
Compilatron#6231: It's a matter of time before we get 1x1x1 adders
Darth feir#7467: reminds me of a refined proper redstone
Saint Bepis#9299: 
Saint Bepis#9299: 2x3x4. At least the wiring is quite simple to see now!
Saint Bepis#9299: ~~At a volume of 27 Blocks per bit, I propose this as being the current limit? <[newline]>  <[newline]> a 3x3 footprint is tricky to cross over the 4 lines, Data In, Data Out, Read Bank and Write Bank, as well as having room for the DFF. It might be possible if you do 4 bits in a 6x6x3 (or smaller) space though. <[newline]>  <[newline]> 4x4 is impossible to make less than 2 blocks tall = 32 volume <[newline]>  <[newline]> 5x2x2.5 is impossible because to overlap the Data and Register Select lines requires a minimum of a 3x3 footprint (due to the length of  socket pins) <[newline]>  <[newline]> Although it's maybee possible for someone to design a 2x3x4 one. Goodluck!~~
alion02#1973: one-relay method has 3 ticks of delay, this has 2
oxi#0420: simple 7-segment display
nalili#7058: yes xD
Saint Bepis#9299: I guess you saw that HAHA
Saint Bepis#9299: Ah right, thank you!
nalili#7058: to avoid formatting, add " \ " before * <@!166511825569972224>
Saint Bepis#9299: 2x3x4.5, 1 bit fully tile-able memory cell
Saint Bepis#9299: 
CrispyPin#1149: 2x4x3 ish tileable counter
asquared31415#0311: yea that's neat
asquared31415#0311: Oh I see how it works
ŒõŒüŒ¶ŒôŒú#4660: yeah im building with electronic logic
asquared31415#0311: a lot of use of buffers, interesting
ŒõŒüŒ¶ŒôŒú#4660: my number displayer work (but thats ugly i know)
asquared31415#0311: 8 inputs
asquared31415#0311: finally figured it out, it counts the number of on bits in the input
Dragon Lord#6944: 8 byte tileable up to 256 bytes without external control data by me :)
Ecconia#4929: By <@!143177692802580480> üòõ <[newline]> Minecraft in LogicWorld confirmed.
Hugin#2596: chess ai??? üò≥
Whisper#7076: 
MiniStumpy#5653: because I can play on servers
MiniStumpy#5653: AMOGUS (By <@!282378798023049216> )
Hugin#2596: Got it working.Thank you!
Saint Bepis#9299: Here is a working one üôÇ spoiler if you wanna do it yourself
Saint Bepis#9299: 
Hugin#2596: will try, thx
Saint Bepis#9299: and the rightmost peg is your count input
Saint Bepis#9299: Red is your new "toggle" for each T Flip Flop <[newline]> Blue is powered by the value of the T Flip Flop
Saint Bepis#9299: 
Saint Bepis#9299: You'd wanna use relay's to control the carry
Hugin#2596: I made this simple counter/clock however it is sort of ripple carry so it has quite a bit of delay, any ideas how to improve it?
Saint Bepis#9299: wow I spent the past hour trying to make a memory cell without a buffer and I didn't think about the read line being powered by the value of the D-Latch
circuitgamer77#0377: I'm trying to make everything modular, so I can just plug this in as a part of RAM later.
circuitgamer77#0377: 8 and 32 bit registers, with and without IO boards.
circuitgamer77#0377: I will make a 32 bit version, but I don't know how to get the wires to copy with the components...
circuitgamer77#0377: 
circuitgamer77#0377: Nice and compact 1 byte high speed register :)
Ecconia#4929: General reminder in LogicWorld you optimize for component count and not volume üòà <[newline]> (Given you do any optimization, just don't and complain)
Ecconia#4929: It is not wrong, maybe you do not want to increment by 1, then it's all good. <[newline]> However if you are incrementing by 1, you could get rid of the first half adder in each bit and instead of the first 1 input use carry in. But well who cares :P <[newline]> (That is just less components and thus a bit more optimized and lag less)
Yrk06#4697: This is my second revision of a RAM module. I made it 4 bits only, but I'll have to expand both the RAM and the ALU to 8 bits because 4 would be way too limited
Saltypretzel#0321: But it will be slower
Saltypretzel#0321: What‚Äôs the most compact ram so far that is usuable I want to beat that compactness
Orionater#6345: So far it can do 0 and 1. Still trying to work out the other 6.
Saltypretzel#0321: 16 bit width 8 addresses
Saltypretzel#0321: but ill do that tommorow
Saltypretzel#0321: It can be shrunken even more
Saltypretzel#0321: finally done! 128 bits of delay line memory
DADp#7461: buying one instantly
Compilatron#6231: The Compitech‚Ñ¢Ô∏è Modular‚Ñ¢Ô∏è Decoder‚Ñ¢Ô∏è <[newline]>  <[newline]> Coming to stores for only $99.99 (RRP)! <[newline]>  <[newline]> *Terms and conditions apply. Contains small plastic parts. Keep away from children. Please contact your doctor if symptoms persist. Avoid contact with skin.*
Compilatron#6231: With all the modules‚Ñ¢Ô∏è connected together, watch as it decodes a 2 before your very eyes!
Compilatron#6231: Tired of making your decoders manually? Wiring each wire to each combination manually? FEAR NOT FRIEND! <[newline]>  <[newline]> With the new‚Ñ¢Ô∏è compitech‚Ñ¢Ô∏è modular‚Ñ¢Ô∏è decoder‚Ñ¢Ô∏è, you can decode any bitwidth and any length! Just connect them together and input any binary number, and it will do all the work for you! <[newline]>  <[newline]> using revolutionary‚Ñ¢Ô∏è half-adder‚Ñ¢Ô∏è technology, the decoder will automatically assign it's position relative to other modules, allowing it to do all the complex wiring for you!
VigilanteHobo#1873: 8 bit ripple carry adder/subtracter with accumulator hooked up
Orionater#6345: Yeah I forgot it was there. ü§£
Orionater#6345: Oh ok.
Compilatron#6231: Also: <@!350046304312885249> , F1 to hide UI by default. <[newline]>  <[newline]> Only for LW heh
Orionater#6345: 
Orionater#6345: I had noidea about that. I knew about the print screen. But not the alt+Prt combo. So thank you.
Kahyxen#0001: Anyone have a compact decoder?
Attikitty#2900: why are there two relays? i only know one way of building instant carry adders and it uses one. could you explain? is this faster?
circuitgamer77#0377: 8 bit program counter v2:
circuitgamer77#0377: Thanks :)
ieee 802.11ac#6337: 
snailüåà#6534: just look at my bad wiring
snailüåà#6534: not that btw
snailüåà#6534: 
circuitgamer77#0377: Anyone have a compact & flexible design for a pulse generator/lengthener?  I've gotten both to work, but I'm really bad at compacting...
ieee 802.11ac#6337: this definitely doesn't contain a fire hazard's worth of wire in the back
Compilatron#6231: Here's a better looking version of my BIN 2 7 SEG, using plugs, which I had only just figured out what they do. This 7 seg is much easier to understand and customise - and could theoretically be tiled to do other functions (or act as a ROM!) <[newline]>  <[newline]> In the meantime, ima plug this into something and see what happens
a tiny cactus#1776: okay i got my adder working
a tiny cactus#1776: 
RyanT#1426: How does the display work?
ieee 802.11ac#6337: what are you talking about? screenshots work fine /j
Whisper#7076: They are in the serverfiles
Compilatron#6231: i.e. save them
Compilatron#6231: Well first we need a way to share circuits between each other
Whisper#7076: I should have a CPU up by tomorrow if you wanna try mingle em lol
Whisper#7076: Ahh
Compilatron#6231: this post
Whisper#7076: Where is the GPU?
Compilatron#6231: here is a very very crude racer minigame! <[newline]>  <[newline]>  <[newline]> Y'all making computers and such... here I am making GPUs and converters
jackson535#1361: this was tung 0.27 or whatever it was, and it's correctly counting at 1MHz
jackson535#1361: it can go *a LOT* faster
ArbysSauce#8865: Or is some kind of vertical layout typically cleaner
ArbysSauce#8865: Is this a decent way to pull from buses? I'm not used to this kind of geometry in a logic sim. (not my full adder)
DustyAngel47#7299: ~~also i had/have no idea how to make storage~~
DustyAngel47#7299: I was trying to make one back in (open)tung but could never be bothered to spam down all the decoders i had in my design plan
DustyAngel47#7299: Nice
Saltypretzel#0321: but this also needs decoders
RyanT#1426: Ok
Saltypretzel#0321: but only the delay lines and a few other components need to be duplicated
Saltypretzel#0321: and it may look massive
Saltypretzel#0321: this is the delay line
Saltypretzel#0321: oh okay yeah cool
Compilatron#6231: very handy
Compilatron#6231: alt+PrtScr will capture just the window you are focused on
Compilatron#6231: on any application, not just LW
Compilatron#6231: PrtScr will copy an image of your screen to your clipboard
RyanT#1426: Just capture it with snipping tool
Saltypretzel#0321: yeah
Compilatron#6231: on windows?
Compilatron#6231: LUCKILY it seems to work
Saltypretzel#0321: idk any of the controls
Saltypretzel#0321: how to screenshot lmao
RyanT#1426: Can you please show it?
Compilatron#6231: It is plug and play however - just feed it co-ords, state and a clock signal and it'll work
Saltypretzel#0321: I made a delay line memory... and I have some plans on scaling it up \>:)
Compilatron#6231: It just plots points - I did think about adding in a rectangle renderer, but the amount of wiring I needed to do was already ridiculous.
RyanT#1426: Does it just plot points, or can it do more?
Compilatron#6231: How it works is a corporate secret.
Compilatron#6231: Don't look inside it
Compilatron#6231: And - it is complete <[newline]>  <[newline]> Introduction the Comividia 2021, a 1 bit 8x8 GPU and screen, selling for only $999.99
Whisper#7076: Eyy
ieee 802.11ac#6337: <@!499587666497634314> made it better
ieee 802.11ac#6337: 3*3 half adder
alion02#1973: but still have no idea why i made them
alion02#1973: really proud of these
alion02#1973: and, in action
alion02#1973: and my final design for the day: a 13x2x2
DanielGJ44#4557: That's literally a Daniel build and you cannot convince me otherwise
ieee 802.11ac#6337: side view
ieee 802.11ac#6337: 8*3 full adder featuring impractical solutions to practical problems
ieee 802.11ac#6337: hold ctrl when placing the thing
VigilanteHobo#1873: how is the socket put on the gridlines?
Compilatron#6231: A BIN 2 7-SEG converter - with a 7 SEG. It's designed to be tileable in a computer as being slightly easier to read than a binary output (albeit, much less compact). The inputs are up the back, but the underside is open so you could easily slap this on top of a computer for your own uses.
alion02#1973: seems like a decent way to go about it
alion02#1973: i myself built some compact 2-tick counters out of my own adder designs
circuitgamer77#0377: I was going to do that at first...
Sirracha#4986: Is it wrong that for my 8 bit counter I just took my adder and made it loop into itself and increment by one?
circuitgamer77#0377: Intended use is a program counter.
circuitgamer77#0377: It has capability to read and write to it as well, but I think I have a better design...
circuitgamer77#0377: Probably the messiest 8 bit counter ever:
alion02#1973: 9x3x2, with some space to spare!
alion02#1973: not done compacting yet! trying to get a 9x3x2 right now...
Sirracha#4986: All your builds are so compact. I built this hulk of 8-bit ram
alion02#1973: this is getting truly stupid
alion02#1973: 14x2x2
Verlio_H#0201: asking the real questions
commanderguy3001#6660: does it count back?
commanderguy3001#6660: what happens if you set tps to -1
commanderguy3001#6660: _but can it go faster_
commanderguy3001#6660: noice
alion02#1973: gothchu homie
commanderguy3001#6660: _see if it can even sustain that_
commanderguy3001#6660: go for 3000
commanderguy3001#6660: ew, just 30 tps
alion02#1973: 30 tps 16-bit counting
alion02#1973: cause i can
commanderguy3001#6660: holy crap, why
alion02#1973: compacted it even more, it's kinda ridiculous now (11x3x2)
Ecconia#4929: The last remaining evidence of the tree on my server is this stream preview image. Now it disappeared. üò¶
Erikbot#6368: I make a multiplexer by swapping wires, this allows me to build it in O(log(n)) time by copying it.
lukiono#5300: Working Tic Tac Toe game (WiP, needs more optimization and more functions)
Erikbot#6368: some 8 bit ram. LW is lagging a bit for some reason.
kiveon#0480: 
kiveon#0480: very compact 4 bit counter
Ecconia#4929: Simple unoptimized 4*4bit multiplier.
Slimepunk#3355: built some big number display boxes
Bumpy#3920: Im still quite new to logic stuffs, so I made a cheat sheet:
FalsePattern#7777: 
FalsePattern#7777: Endlessly stackable 3 bit display with row + column selection, and a backbuffer + frontbuffer system <[newline]> 16x16 demo included <[newline]> https://logicworld.net/view/ctn-6c65c551
ieee 802.11ac#6337: a 16*5 multiplier i made using a diagram i stole off ddg and pegs on mounts
alion02#1973: animated
circuitgamer77#0377: ALU v3 (0 tick carry on the adder and comparison circuits):
Ecconia#4929: This is actually amazing! It is synchronized 2 ticks indeed. Love it.
TBS-Frain_Breeze#0771: nice!
Minivan#5300: 4 cell, 8 bit RAM with tileable cells <[newline]> https://cdn.discordapp.com/attachments/528271226049921064/901208566487203840/logicworld_1.jpg
Jimmy#8080: That's beautiful, I love your design.
trainrex#9212: 8 Byte Register
circuitgamer77#0377: It's a bit slow, though.
circuitgamer77#0377: Handles adding, subtracting, and comparisons :)
circuitgamer77#0377: 8 bit ALU v1:
PseudoGoose#2841: oh i see, there's a board on the "bottom" of the XOR
PseudoGoose#2841: no <:sad_luigi:702838740636139590>
PseudoGoose#2841: can you do the same thing with the relay - so the top pin comes out the side instead?
PseudoGoose#2841: waow, I forgot you can stand up XORs vertically!
RyanT#1426: Compact, Tileable adder, shown calculating 5 + 3
Nik#1011: we don't remove inoffensive messages ‚ù§Ô∏è
Gositi#4985: I'm not online in game rn. But tomorrow I will (if it's still there, after all it is an anarchy server). <[newline]>  <[newline]> Sorry if I'm filling this channel with irrelevant stuff - if so, feel free to remove these messages.
Jimmy#8080: post screenshot
Gositi#4985: I made a multiplier on the anarchh server. It is pretty big, when I left it was the boggest build there.
alion02#1973: compressed tileable 2-tick latency instant carry adder
Ecconia#4929: Synchronized Instant Carry Adder (looping) ( ICA )
Nik#1011: https://discord.com/channels/401255675264761866/401255675264761868/901161941240774696
DustyAngel47#7299: clock
